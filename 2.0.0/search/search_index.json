{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"administration-guide/introduction/","title":"Administration Guide","text":"<p>This guide is aimed at administrators of a Gaffer deployment and more advanced users. It is recommended to read the user guide and be familiar with Gaffer beforehand as many of the core concepts are expanded on and covered in more detail.</p>"},{"location":"administration-guide/introduction/#how-to-run-gaffer","title":"How to Run Gaffer?","text":"<p>There are detailed guides in this section on how to set up a Gaffer instance, covering both containerised deployments via standard Docker/Podman along with Kubernetes deployment via Helm.</p> <ul> <li>Kubernetes Guide</li> <li>Docker Guide</li> </ul>"},{"location":"administration-guide/introduction/#graph-configuration","title":"Graph Configuration","text":"<p>There are many aspects of a Gaffer graph deployment that can be configured. If you wish to know how and what can be configured along with a more in-depth guide of Gaffers schemas you can see the section on configuring a graph.</p> <ul> <li>Configuration Overview</li> </ul>"},{"location":"administration-guide/introduction/#gaffer-stores","title":"Gaffer Stores","text":"<p>The store selection for the Gaffer backend is also covered in this guide to provide an overview of the different types and features each provides.</p> <ul> <li>Store Guide</li> <li>Map Store</li> <li>Accumulo Store</li> <li>Proxy Store</li> <li>Federated Store</li> </ul>"},{"location":"administration-guide/named-operations/","title":"Named Operations","text":"<p>This guide walks through configuring Gaffer to use Named Operations and how to run them.</p> <p>Named Operations allow users to encapsulate an OperationChain into a new single NamedOperation. Named Operations execute the encapsulated Operation Chain and are used just like any other Operation.</p> <p>There are various possible uses for Named Operations:</p> <ul> <li>Making it simpler to store and run frequently used Operation Chains.</li> <li>In a controlled way, allowing specific Operation Chains to be run by a user that would not normally have permission to run them.</li> </ul> <p>There are three operations which manage Named Operations.  These are <code>AddNamedOperation</code>, <code>GetAllNamedOperations</code> and <code>DeleteNamedOperations</code>.</p>"},{"location":"administration-guide/named-operations/#using-named-operations","title":"Using Named Operations","text":"<p>All Named Operations are stored in a cache, so your first step should be to configure a suitable cache. For details on potential caches and how to configure them, see the Stores Guide.</p> <p>Note</p> <p>If you choose a non-persistent cache then any Named Operations will be lost when you shut down your instance of Gaffer.</p> <p>This guide assumes that you have set up your graph, if not please refer to our example deployment to get started.</p> <p>This walkthrough will use this directed graph:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre> <p>Once you have configured your cache, you can then add your first NamedOperation. </p> <p>You can then add a NamedOperation to the cache using <code>AddNamedOperation</code>. Here you are specifying the OperationChain that you want to be used as a NamedOperation.</p> <p>Adding a new NamedOperation</p> JavaJSONPython <pre><code>final AddNamedOperation operation = new AddNamedOperation.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.then(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build())\n.description(\"2 hop query\")\n.name(\"2-hop\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.overwrite()\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop\",\n\"description\" : \"2 hop query\",\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n},\n\"overwriteFlag\" : true,\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \noperation_name=\"2-hop\", \ndescription=\"2 hop query\", \nread_access_roles=[ \n\"read-user\" \n], \nwrite_access_roles=[ \n\"write-user\" \n], \noverwrite_flag=True \n)\n</code></pre> <p>Following on from this, you can then run your new NamedOperation:</p> <p>Running your NamedOperation</p> JavaJSONPython <pre><code>final NamedOperation&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt; operation =\nnew NamedOperation.Builder&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt;()\n.name(\"2-hop\")\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"2-hop\"\n}\n</code></pre> <pre><code>g.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"2-hop\" \n)\n</code></pre> <p>This produces the following result: <pre><code>EntitySeed[vertex=4]\nEntitySeed[vertex=3]\nEntitySeed[vertex=5]\n</code></pre></p> <p>Named Operations are able to take parameters which allow the OperationChain that is being executed to be configured. Parameters could be as simple as specifying <code>resultLimit</code> on a Limit Operation, they could specify a custom view to use in an Operation or even the input to an Operation.</p> <p>When adding a NamedOperation with parameters to an OperationChain it must be specified as a JSON string, with the parameter names enclosed in <code>${</code> and <code>}</code>.  For each parameter, a <code>ParameterDetail</code> object must be created which gives a description, a class type and an optional default for that parameter. As the default is optional you can alternatively indicate that the parameter must be provided and that there is no default.</p> <p>The following code adds a NamedOperation with a parameter that allows the result limit for the OperationChain to be set:</p> <p>Adding a NamedOperation with parameters</p> JavaJSONPython <pre><code>final String opChainString = new JSONObject()\n.put(\"operations\", new JSONArray()\n.put(new JSONObject()\n.put(\"class\", \"GetAdjacentIds\")\n.put(\"includeIncomingOutGoing\", \"OUTGOING\"))\n.put(new JSONObject()\n.put(\"class\", \"GetAdjacentIds\")\n.put(\"includeIncomingOutGoing\", \"OUTGOING\"))\n.put(new JSONObject()\n.put(\"class\", \"Limit\")\n.put(\"resultLimit\", \"${param1}\")))\n.toString();\nParameterDetail param = new ParameterDetail.Builder()\n.defaultValue(1L)\n.description(\"Limit param\")\n.valueClass(Long.class)\n.build();\nMap&lt;String, ParameterDetail&gt; paramMap = Maps.newHashMap();\nparamMap.put(\"param1\", param);\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n.operationChain(opChainString) .description(\"2 hop query with settable limit\")\n.name(\"2-hop-with-limit\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.parameters(paramMap)\n.overwrite()\n.score(3)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop-with-limit\",\n\"description\" : \"2 hop query with settable limit\",\n\"score\" : 3,\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.Limit\",\n\"resultLimit\" : \"${param1}\"\n} ]\n},\n\"overwriteFlag\" : true,\n\"parameters\" : {\n\"param1\" : {\n\"description\" : \"Limit param\",\n\"defaultValue\" : 1,\n\"valueClass\" : \"Long\",\n\"required\" : false\n}\n},\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.Limit( \nresult_limit=\"${param1}\" \n) \n] \n), \noperation_name=\"2-hop-with-limit\", \ndescription=\"2 hop query with settable limit\", \nread_access_roles=[ \n\"read-user\" \n], \nwrite_access_roles=[ \n\"write-user\" \n], \noverwrite_flag=True, \nscore=3, \nparameters=[ \ng.NamedOperationParameter( \nname=\"param1\", \nvalue_class=\"java.lang.Long\", \ndescription=\"Limit param\", \ndefault_value=1, \nrequired=False \n) \n] \n)\n</code></pre> <p>A NamedOperation can then be run, with a value provided for the result limit parameter:</p> <p>Running your NamedOperation with parameters</p> JavaJSONPython <pre><code>Map&lt;String, Object&gt; paramMap = Maps.newHashMap();\nparamMap.put(\"param1\", 2L);\nfinal NamedOperation&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt; operation =\nnew NamedOperation.Builder&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt;()\n.name(\"2-hop-with-limit\")\n.input(new EntitySeed(1))\n.parameters(paramMap)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"2-hop-with-limit\",\n\"parameters\" : {\n\"param1\" : 2\n}\n}\n</code></pre> <pre><code>g.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"2-hop-with-limit\", \nparameters={'param1': 2} \n)\n</code></pre> <p>This will produce these results:</p> <p><pre><code>EntitySeed[vertex=4]\nEntitySeed[vertex=3]\n</code></pre> For more examples of Named Operations, please refer to the Named Operations page in the Reference Guide.</p>"},{"location":"administration-guide/named-operations/#security","title":"Security","text":"<p>By default, read access to Named Operations is unrestricted while write access is limited to administrators and the NamedOperation creator.  More fine-grained controls can be configured using the following options.</p>"},{"location":"administration-guide/named-operations/#read-and-write-access-roles","title":"Read and Write Access Roles","text":"<p>Read and write access to Named Operations can be locked down to users who have at least one of the auths listed in the <code>readAccessRoles</code> and <code>writeAccessRoles</code> settings. This example ensures that readers have the \"read-user\" auth and writers the \"write-user\" auth.</p> <p>Example</p> <pre><code>final AddNamedOperation addOperation = new AddNamedOperation.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.then(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build())\n.description(\"2 hop query\")\n.name(\"2-hop\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.overwrite()\n.build();\n</code></pre>"},{"location":"administration-guide/named-operations/#access-controlled-resource","title":"Access Controlled Resource","text":"<p>Named Operations implement the <code>AccessControlledResource</code> interface allowing configuration of a custom Predicate which is tested against the User to determine whether they can access the Named Operation.</p> <p>This example ensures readers of the NamedOperation have both the \"read-access-auth-1\" and \"read-access-auth-2\" auths and users attempting to remove the NamedOperation have both the \"write-access-auth-1\" and \"write-access-auth-2\" auths.</p> <p>Note that the <code>readAccessPredicate</code> and <code>writeAccessPredicate</code> fields are mutually exclusive with the <code>readAccessRoles</code> and <code>writeAccessRoles</code> settings respectively as described in the Read and Write Access Roles section.</p> <p>Example</p> <pre><code>final AddNamedOperation addNamedOperationAccessControlledResource = new AddNamedOperation.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.then(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build())\n.description(\"access controlled 2 hop\")\n.name(\"access-controlled-2-hop-query\")\n.overwrite()\n.readAccessPredicate(new AccessPredicate(\nnew AdaptedPredicate(\nnew CallMethod(\"getOpAuths\"),\nnew And(\nnew CollectionContains(\"read-access-auth-1\"),\nnew CollectionContains(\"read-access-auth-2\")))))\n.writeAccessPredicate(\nnew AccessPredicate(\nnew AdaptedPredicate(\nnew CallMethod(\"getOpAuths\"),\nnew And(\nnew CollectionContains(\"write-access-auth-1\"),\nnew CollectionContains(\"write-access-auth-2\")))))\n.build();\n</code></pre>"},{"location":"administration-guide/named-operations/#full-example","title":"Full Example","text":"<p>The below example uses the Road Traffic Dataset and asks \"In the year 2000, which junctions in the South West were heavily used by buses\".  This can be written as a NamedOperation and is also an example of a more complex query that a user may wish to run on a dataset.</p> <p>To make it more useful vehicle type and the number of results to return have been parameterised. We have also wrapped the <code>ToCsv</code> operation in an <code>If</code> operation so it can be conditionally enabled/disabled.</p> Example JavaJSONFull JSONPython <pre><code>final String fullExampleOpChain = \"{\\n\" +\n\"  \\\"operations\\\" : [ {\\n\" +\n\"    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\\n\" +\n\"    \\\"view\\\" : {\\n\" +\n\"      \\\"edges\\\" : {\\n\" +\n\"        \\\"RegionContainsLocation\\\" : { }\\n\" +\n\"      }\\n\" +\n\"    }\\n\" +\n\"  }, {\\n\" +\n\"    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\\n\" +\n\"    \\\"view\\\" : {\\n\" +\n\"      \\\"edges\\\" : {\\n\" +\n\"        \\\"LocationContainsRoad\\\" : { }\\n\" +\n\"      }\\n\" +\n\"    }\\n\" +\n\"  }, {\\n\" +\n\"    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.output.ToSet\\\"\\n\" +\n\"  }, {\\n\" +\n\"    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\\n\" +\n\"    \\\"view\\\" : {\\n\" +\n\"      \\\"edges\\\" : {\\n\" +\n\"        \\\"RoadHasJunction\\\" : { }\\n\" +\n\"      }\\n\" +\n\"    }\\n\" +\n\"  }, {\\n\" +\n\"    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\\\",\\n\" +\n\"    \\\"view\\\" : {\\n\" +\n\"      \\\"entities\\\" : {\\n\" +\n\"        \\\"JunctionUse\\\" : {\\n\" +\n\"          \\\"properties\\\" : [\\\"${vehicle}\\\"],\\n\" +\n\"          \\\"preAggregationFilterFunctions\\\" : [ {\\n\" +\n\"            \\\"selection\\\" : [ \\\"startDate\\\", \\\"endDate\\\" ],\\n\" +\n\"            \\\"predicate\\\" : {\\n\" +\n\"              \\\"class\\\" : \\\"uk.gov.gchq.koryphe.impl.predicate.range.InDateRangeDual\\\",\\n\" +\n\"              \\\"start\\\" : \\\"2000/01/01\\\",\\n\" +\n\"              \\\"end\\\" : \\\"2001/01/01\\\"\\n\" +\n\"            }\\n\" +\n\"          } ],\\n\" +\n\"          \\\"transientProperties\\\" : {\\n\" +\n\"            \\\"${vehicle}\\\" : \\\"Long\\\"\\n\" +\n\"          },\\n\" +\n\"          \\\"transformFunctions\\\" : [ {\\n\" +\n\"            \\\"selection\\\" : [ \\\"countByVehicleType\\\" ],\\n\" +\n\"            \\\"function\\\" : {\\n\" +\n\"              \\\"class\\\" : \\\"uk.gov.gchq.gaffer.types.function.FreqMapExtractor\\\",\\n\" +\n\"              \\\"key\\\" : \\\"${vehicle}\\\"\\n\" +\n\"            },\\n\" +\n\"            \\\"projection\\\" : [ \\\"${vehicle}\\\" ]\\n\" +\n\"          } ]\\n\" +\n\"        }\\n\" +\n\"      },\\n\" +\n\"      \\\"globalElements\\\" : [ {\\n\" +\n\"        \\\"groupBy\\\" : [ ]\\n\" +\n\"      } ]\\n\" +\n\"    },\\n\" +\n\"    \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"\\n\" +\n\"  }, {\\n\" +\n\"    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.compare.Sort\\\",\\n\" +\n\"    \\\"comparators\\\" : [ {\\n\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.data.element.comparison.ElementPropertyComparator\\\",\\n\" +\n\"      \\\"property\\\" : \\\"${vehicle}\\\",\\n\" +\n\"      \\\"groups\\\" : [ \\\"JunctionUse\\\" ],\\n\" +\n\"      \\\"reversed\\\" : true\\n\" +\n\"    } ],\\n\" +\n\"    \\\"deduplicate\\\" : true,\\n\" +\n\"    \\\"resultLimit\\\" : \\\"${result-limit}\\\"\\n\" +\n\"  }, {\\n\" +\n\"    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.If\\\",\\n\" +\n\"    \\\"condition\\\" : \\\"${to-csv}\\\",\\n\" +\n\"    \\\"then\\\" : {\\n\" +\n\"        \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.output.ToCsv\\\",\\n\" +\n\"        \\\"elementGenerator\\\" : {\\n\" +\n\"          \\\"class\\\" : \\\"uk.gov.gchq.gaffer.data.generator.CsvGenerator\\\",\\n\" +\n\"          \\\"fields\\\" : {\\n\" +\n\"            \\\"VERTEX\\\" : \\\"Junction\\\",\\n\" +\n\"            \\\"${vehicle}\\\" : \\\"${vehicle}\\\"\\n\" +\n\"          },\\n\" +\n\"          \\\"constants\\\" : { },\\n\" +\n\"          \\\"quoted\\\" : false,\\n\" +\n\"          \\\"commaReplacement\\\" : \\\" \\\"\\n\" +\n\"        },\\n\" +\n\"        \\\"includeHeader\\\" : true\\n\" +\n\"    }\\n\" +\n\"  } ]\\n\" +\n\"}\";\nfinal Map&lt;String, ParameterDetail&gt; fullExampleParams = Maps.newHashMap();\nfullExampleParams.put(\"vehicle\", new ParameterDetail.Builder()\n.defaultValue(\"BUS\")\n.description(\"The type of vehicle: HGVR3, BUS, HGVR4, AMV, HGVR2, HGVA3, PC, HGVA3, PC, HGCA5, HGVA6, CAR, HGV, WM2, LGV\")\n.valueClass(String.class)\n.required(false)\n.build());\nfullExampleParams.put(\"result-limit\", new ParameterDetail.Builder()\n.defaultValue(2)\n.description(\"The maximum number of junctions to return\")\n.valueClass(Integer.class)\n.required(false)\n.build());\nfullExampleParams.put(\"to-csv\", new ParameterDetail.Builder()\n.defaultValue(false)\n.description(\"Enable this parameter to convert the results to a simple CSV in the format: Junction, Count\")\n.valueClass(Boolean.class)\n.required(false)\n.build());\nfinal AddNamedOperation addFullExampleNamedOperation = new AddNamedOperation.Builder()\n.name(\"frequent-vehicles-in-region\")\n.description(\"Finds the junctions in a region with the most of an individual vehicle (e.g BUS, CAR) in the year 2000. The input is the region.\")\n.overwrite(true)\n.parameters(fullExampleParams)\n.operationChain(fullExampleOpChain)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"frequent-vehicles-in-region\",\n\"description\" : \"Finds the junctions in a region with the most of an individual vehicle (e.g BUS, CAR) in the year 2000. The input is the region.\",\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"view\" : {\n\"edges\" : {\n\"RegionContainsLocation\" : { }\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"view\" : {\n\"edges\" : {\n\"LocationContainsRoad\" : { }\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"view\" : {\n\"edges\" : {\n\"RoadHasJunction\" : { }\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\",\n\"view\" : {\n\"entities\" : {\n\"JunctionUse\" : {\n\"properties\" : [ \"${vehicle}\" ],\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"startDate\", \"endDate\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.range.InDateRangeDual\",\n\"start\" : \"2000/01/01\",\n\"end\" : \"2001/01/01\"\n}\n} ],\n\"transientProperties\" : {\n\"${vehicle}\" : \"Long\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"countByVehicleType\" ],\n\"function\" : {\n\"class\" : \"uk.gov.gchq.gaffer.types.function.FreqMapExtractor\",\n\"key\" : \"${vehicle}\"\n},\n\"projection\" : [ \"${vehicle}\" ]\n} ]\n}\n},\n\"globalElements\" : [ {\n\"groupBy\" : [ ]\n} ]\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Sort\",\n\"comparators\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.comparison.ElementPropertyComparator\",\n\"property\" : \"${vehicle}\",\n\"groups\" : [ \"JunctionUse\" ],\n\"reversed\" : true\n} ],\n\"deduplicate\" : true,\n\"resultLimit\" : \"${result-limit}\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.If\",\n\"condition\" : \"${to-csv}\",\n\"then\" : {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToCsv\",\n\"elementGenerator\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.generator.CsvGenerator\",\n\"fields\" : {\n\"VERTEX\" : \"Junction\",\n\"${vehicle}\" : \"${vehicle}\"\n},\n\"constants\" : { },\n\"quoted\" : false,\n\"commaReplacement\" : \" \"\n},\n\"includeHeader\" : true\n}\n} ]\n},\n\"overwriteFlag\" : true,\n\"parameters\" : {\n\"to-csv\" : {\n\"description\" : \"Enable this parameter to convert the results to a simple CSV in the format: Junction, Count\",\n\"defaultValue\" : false,\n\"valueClass\" : \"Boolean\",\n\"required\" : false\n},\n\"result-limit\" : {\n\"description\" : \"The maximum number of junctions to return\",\n\"defaultValue\" : 2,\n\"valueClass\" : \"Integer\",\n\"required\" : false\n},\n\"vehicle\" : {\n\"description\" : \"The type of vehicle: HGVR3, BUS, HGVR4, AMV, HGVR2, HGVA3, PC, HGVA3, PC, HGCA5, HGVA6, CAR, HGV, WM2, LGV\",\n\"defaultValue\" : \"BUS\",\n\"valueClass\" : \"String\",\n\"required\" : false\n}\n}\n}\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.named.operation.AddNamedOperation\",\n\"operationName\" : \"frequent-vehicles-in-region\",\n\"description\" : \"Finds the junctions in a region with the most of an individual vehicle (e.g BUS, CAR) in the year 2000. The input is the region.\",\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"view\" : {\n\"edges\" : {\n\"RegionContainsLocation\" : { }\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"view\" : {\n\"edges\" : {\n\"LocationContainsRoad\" : { }\n}\n}       }, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"view\" : {\n\"edges\" : {\n\"RoadHasJunction\" : { }\n}       }\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\",\n\"view\" : {\n\"entities\" : {\n\"JunctionUse\" : {\n\"properties\" : [ \"${vehicle}\" ],\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"startDate\", \"endDate\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.range.InDateRangeDual\",\n\"start\" : \"2000/01/01\",\n\"end\" : \"2001/01/01\"\n}\n} ],\n\"transientProperties\" : {\n\"${vehicle}\" : \"Long\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"countByVehicleType\" ],\n\"function\" : {\n\"class\" : \"uk.gov.gchq.gaffer.types.function.FreqMapExtractor\",\n\"key\" : \"${vehicle}\"\n},\n\"projection\" : [ \"${vehicle}\" ]\n} ]\n}\n},\n\"globalElements\" : [ {\n\"groupBy\" : [ ]\n} ]\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Sort\",\n\"comparators\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.comparison.ElementPropertyComparator\",\n\"property\" : \"${vehicle}\",\n\"groups\" : [ \"JunctionUse\" ],\n\"reversed\" : true\n} ],\n\"deduplicate\" : true,\n\"resultLimit\" : \"${result-limit}\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.If\",\n\"condition\" : \"${to-csv}\",\n\"then\" : {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToCsv\",\n\"elementGenerator\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.generator.CsvGenerator\",\n\"fields\" : {\n\"VERTEX\" : \"Junction\",\n\"${vehicle}\" : \"${vehicle}\"\n},\n\"constants\" : { },\n\"quoted\" : false,\n\"commaReplacement\" : \" \"\n},\n\"includeHeader\" : true\n}\n} ]\n},\n\"overwriteFlag\" : true,\n\"parameters\" : {\n\"to-csv\" : {\n\"description\" : \"Enable this parameter to convert the results to a simple CSV in the format: Junction, Count\",\n\"defaultValue\" : false,\n\"valueClass\" : \"java.lang.Boolean\",\n\"required\" : false\n},\n\"result-limit\" : {\n\"description\" : \"The maximum number of junctions to return\",\n\"defaultValue\" : 2,\n\"valueClass\" : \"java.lang.Integer\",\n\"required\" : false\n},\n\"vehicle\" : {\n\"description\" : \"The type of vehicle: HGVR3, BUS, HGVR4, AMV, HGVR2, HGVA3, PC, HGVA3, PC, HGCA5, HGVA6, CAR, HGV, WM2, LGV\",\n\"defaultValue\" : \"BUS\",\n\"valueClass\" : \"java.lang.String\",\n\"required\" : false\n}\n}\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"RegionContainsLocation\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.GetAdjacentIds( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"LocationContainsRoad\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ToSet(), \ng.GetAdjacentIds( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"RoadHasJunction\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"JunctionUse\", \ntransient_properties={'${vehicle}': 'Long'}, \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"startDate\", \n\"endDate\" \n], \npredicate=g.InDateRangeDual( \nstart=\"2000/01/01\", \nend=\"2001/01/01\" \n) \n) \n], \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"countByVehicleType\" \n], \nfunction=g.FreqMapExtractor( \nkey=\"${vehicle}\" \n), \nprojection=[ \n\"${vehicle}\" \n] \n) \n], \nproperties=[ \n\"${vehicle}\" \n] \n) \n], \nglobal_elements=[ \ng.GlobalElementDefinition( \ngroup_by=[ \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.Sort( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"JunctionUse\" \n], \nproperty=\"${vehicle}\", \nreversed=True \n) \n], \nresult_limit=\"${result-limit}\", \ndeduplicate=True \n), \ng.If( \ncondition=\"${to-csv}\", \nthen=g.ToCsv( \nelement_generator=g.CsvGenerator( \nfields={'VERTEX': 'Junction', '${vehicle}': '${vehicle}'}, \nconstants={}, \nquoted=False, \ncomma_replacement=\" \" \n), \ninclude_header=True \n) \n) \n] \n), \noperation_name=\"frequent-vehicles-in-region\", \ndescription=\"Finds the junctions in a region with the most of an individual vehicle (e.g BUS, CAR) in the year 2000. The input is the region.\", \noverwrite_flag=True, \nparameters=[ \ng.NamedOperationParameter( \nname=\"to-csv\", \nvalue_class=\"java.lang.Boolean\", \ndescription=\"Enable this parameter to convert the results to a simple CSV in the format: Junction, Count\", \ndefault_value=False, \nrequired=False \n), \ng.NamedOperationParameter( \nname=\"result-limit\", \nvalue_class=\"java.lang.Integer\", \ndescription=\"The maximum number of junctions to return\", \ndefault_value=2, \nrequired=False \n), \ng.NamedOperationParameter( \nname=\"vehicle\", \nvalue_class=\"java.lang.String\", \ndescription=\"The type of vehicle: HGVR3, BUS, HGVR4, AMV, HGVR2, HGVA3, PC, HGVA3, PC, HGCA5, HGVA6, CAR, HGV, WM2, LGV\", \ndefault_value=\"BUS\", \nrequired=False  \n) \n] \n)\n</code></pre>"},{"location":"administration-guide/operation-score/","title":"Operation Scores","text":"<p>Operation Scores can be used to give an OperationChains and NamedOperations a \"score\" which can then be used to determine whether a particular user has the required permissions to execute a given OperationChain.</p> <p>These scores work on a credit-like system where user's configured \"score\" is the amount they can then spend on running an Operation/OperationChain.  Users cannot spend more than their score and every time they run an Operation or OperationChain that has a configured \"score\" this will be 'subtracted' from their score 'credit'.</p>"},{"location":"administration-guide/operation-score/#using-operation-scores","title":"Using Operation Scores","text":"<p>A <code>ScoreOperationChain</code> operation determines a \"score\" for an OperationChain. To use this Operation you need to configure an <code>OperationsDeclarations.json</code>.</p> <p>To configure this file you need to set the following handlers which configure how Operation Scores are used with a graph:</p> <ul> <li><code>opScores</code> - required map of operation scores. These are the operation score values.</li> <li><code>authScores</code> - required map of operation authorisation scores. These are the maximum scores allowed for a user with a given role. </li> <li><code>scoreResolver</code> - maps the operation class to its respective score resolver.</li> </ul> <p>Example OperationDeclarations.json for a NamedOperation</p> <pre><code>{\n\"operations\": [\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.ScoreOperationChain\",\n\"handler\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.handler.ScoreOperationChainHandler\",\n\"opScores\": {\n\"uk.gov.gchq.gaffer.operation.Operation\": 2,\n\"uk.gov.gchq.gaffer.operation.impl.generate.GenerateObjects\": 0\n},\n\"authScores\": {\n\"User\": 4,\n\"EnhancedUser\": 10\n},\n\"scoreResolvers\": {\n\"uk.gov.gchq.gaffer.named.operation.NamedOperation\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.resolver.named.NamedOperationScoreResolver\"\n}\n}\n}\n}\n]\n}\n</code></pre> <p>Example ScoreOperationChain</p> JavaJSONPython <pre><code>final ScoreOperationChain scoreOpChain = new ScoreOperationChain.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new GetElements())\n.then(new NamedOperation.Builder&lt;Element, Iterable&lt;? extends Element&gt;&gt;()\n.name(\"namedOp\")\n.build())\n.then(new Limit&lt;&gt;(3))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"ScoreOperationChain\",\n\"operationChain\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\"\n}, {\n\"class\" : \"NamedOperation\",\n\"operationName\" : \"namedOp\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : true\n} ]\n}\n}\n</code></pre> <pre><code>g.ScoreOperationChain( \noperation_chain=g.OperationChain( \noperations=[ \ng.GetElements(), \ng.NamedOperation( \noperation_name=\"namedOp\" \n), \ng.Limit( \nresult_limit=3, \ntruncate=True \n) \n] \n) \n)\n</code></pre> <p>For more examples of ScoreOperationChain refer to the Misc Operations page in the Reference Guide.</p>"},{"location":"administration-guide/operation-score/#score-resolver","title":"Score Resolver","text":"<p>A <code>ScoreResolver</code> is used to retreive the score associated with a provided Operation.</p> <p>In most cases, implementing the <code>DefaultScoreResolver</code> interface will be suitable. However, some operations require specific ways of calculating their score so will require the implementation of different scoreResolver handlers.</p> <p>In the case of NamedOperations, the <code>NamedOperationScoreResolver</code> should be implemented in the OperationDeclarations.json. This will resolve the custom Operation Score for a provided NamedOperation by looking for it in the cache. </p> <p>If choosing to score your <code>If</code> Operation, then you should implement the <code>IfScoreResolver</code>. This will provide the score as the maximum of the operations that are used within the <code>If</code> operation, regardless of which operation is actually executed.</p> <p>The <code>While</code> Operation, if scored, will also require implementation of the specific <code>WhileScoreResolver</code>.  The score will be the maximum of the transform operation and the delegate operation, multiplied by the minimum of the configured number of max repeats vs the global maximum number of allowed repeats. This is simply because the number of actual repetitions is nondeterministic, therefore a \"worst\"-case scenario is considered.</p>"},{"location":"administration-guide/operation-score/#operation-chain-limiters","title":"Operation Chain Limiters","text":"<p><code>OperationChainLimiter</code> is a GraphHook that checks a user is authorised to execute an operation chain based on that user's maximum chain score and the configured score value for each operation in the chain.  If you wish to use the ScoreOperationChain operation and this graph hook, then both need to have the same score configuration.</p> <p>To use the <code>OperationChainLimiter</code> GraphHook then you will need to configure that GraphHook to use the a Score Resolver interface.  The ScoreOperationChainDeclaration.json declares that a NamedOperation should be resolved using a <code>NamedOperationScoreResolver</code>. This will then allow you to have custom scores for each NamedOperation.</p> <p>If you have the <code>OperationChainLimiter</code> GraphHook configured then this score will be used by the hook to limit operation chains.</p> <p>Example hook configuration</p> <p>Configuration of the hook should look something like this and should be placed in your <code>graphConfig.json</code>.</p> <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.graph.hook.OperationChainLimiter\",\n\"opScores\": {\n\"uk.gov.gchq.gaffer.operation.Operation\": 1,\n\"uk.gov.gchq.gaffer.operation.impl.add.AddElements\": 2,\n\"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\": 5,\n\"uk.gov.gchq.gaffer.operation.impl.generate.GenerateObjects\": 0\n},\n\"authScores\": {\n\"User\": 2,\n\"SuperUser\": 5\n},\n\"scoreResolvers\": { \"uk.gov.gchq.gaffer.named.operation.NamedOperation\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.resolver.named.NamedOperationScoreResolver\"\n}\n}\n}\n</code></pre> <p>Example operation declarations file</p> <p>As a result, the operation declarations file for registering the <code>ScoreOperationChain</code> operation would then look like:</p> <pre><code>{\n\"operations\": [\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.ScoreOperationChain\",\n\"handler\": {\n\"opScores\": {\n\"uk.gov.gchq.gaffer.operation.Operation\": 1,\n\"uk.gov.gchq.gaffer.operation.impl.add.AddElements\": 2,\n\"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\": 5,\n\"uk.gov.gchq.gaffer.operation.impl.generate.GenerateObjects\": 0\n},\n\"authScores\": {\n\"User\": 2,\n\"SuperUser\": 5\n},\n\"scoreResolvers\": {\n\"uk.gov.gchq.gaffer.named.operation.NamedOperation\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.resolver.named.NamedOperationScoreResolver\"\n}\n}\n}\n}\n]\n}\n</code></pre>"},{"location":"administration-guide/aggregation/ingest-example/","title":"Ingest Aggregation Example","text":""},{"location":"administration-guide/aggregation/ingest-example/#simple-aggregation","title":"Simple Aggregation","text":"<p>To demonstrate basic aggregation at ingest we can take the following graph as a start point and modify the schema so that the properties are summed together:</p> <pre><code>graph LR\n    A([\"Person\n\n        ID: Dave\"])\n    --\n    \"Commit\n     added: 6\n     removed: 8\"\n    --&gt;\n    B([\"Repository\n\n        ID: r1\"])\n    A\n    --\n    \"Commit\n     added: 35\n     removed: 10\"\n    --&gt;\n    B</code></pre> <p>As you can see we have two vertex types, <code>Person</code> and <code>Repository</code> both without any properties then, we have one edge type <code>Commit</code> with two properties <code>added</code> and <code>removed</code>. Translating this into a basic Gaffer schema gives the following:</p> <p>Note</p> <p>In Gaffer every property type defined in the schema must specify an <code>\"aggregationFunction\"</code> unless you specify <code>\"aggregate\": \"false\"</code> on the type.</p> elements.jsontypes.json <pre><code>{\n\"edges\": {\n\"Commit\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.repo.string\",\n\"directed\": \"true\",\n\"properties\": {\n\"added\": \"property.integer\",\n\"removed\": \"property.integer\"\n}\n}\n},\n\"entities\": {\n\"Person\": {\n\"description\": \"Entity representing a person vertex\",\n\"vertex\": \"id.person.string\"\n},\n\"Repository\": {\n\"description\": \"Entity representing a repository vertex\",\n\"vertex\": \"id.repo.string\"\n}\n}\n}\n</code></pre> <pre><code>{\n\"types\": {\n\"id.person.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.repo.string\": {\n\"description\": \"A basic type to hold the string id of a repository entity\",\n\"class\": \"java.lang.String\"\n},\n\"property.integer\": {\n\"description\": \"A basic type to hold integer properties of elements\",\n\"class\": \"java.lang.Integer\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"true\": {\n\"description\": \"A simple boolean that must always be true.\",\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n}\n]\n}\n}\n}\n</code></pre> <p>In the above schema you can see we have applied an aggregation function to the <code>\"property.integer\"</code> type which will sum the property to give a total. For this function we must specify a class that will do the aggregation. There exists a few default classes and some additional ones implemented by the Koryphe module which you can read more about in the reference guide.</p> <p>Tip</p> <p>It is possible to create your own aggregation functions however, they must extend the <code>java.util.function.BiFunction</code> interface.</p> <p>Loading the data into a Graph using the example schema we can form the Graph and see the aggregation in action. First loading the data via the REST API using the <code>AddElements</code> operation like below:</p> <pre><code>{\n\"class\": \"AddElements\",\n\"input\": [\n{\n\"class\": \"Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"properties\": {\n\"added\": 6,\n\"removed\": 8\n}\n},\n{\n\"class\": \"Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"properties\": {\n\"added\": 35,\n\"removed\": 10\n}\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Person\",\n\"vertex\": \"Dave\"\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Repository\",\n\"vertex\": \"r1\"\n}\n]\n}\n</code></pre> <p>Now running a query on these elements with the seed as <code>\"Dave\"</code> you can see that all the commit edges have been aggregated together to give a total for the <code>added</code> and <code>removed</code> properties.</p> JSON QueryResult <pre><code>{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"Dave\"\n}\n]\n}\n</code></pre> <pre><code>[\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Person\",\n\"vertex\": \"Dave\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {\n\"removed\": 18,\n\"added\": 41\n}\n}\n]\n</code></pre>"},{"location":"administration-guide/aggregation/ingest-example/#using-the-groupby-field","title":"Using the groupBy field","text":"<p>It is also possible to have a fine control over exactly when aggregation is applied to by using the <code>groupBy</code> parameter. This parameter can be added to the schema so that aggregation is applied only when a specific property is the same between elements.</p> <p>To demonstrate this functionality we can expand the example from the previous section to add a new property to the <code>Commit</code> edge called <code>issue</code> which hypothetically represents the issue number the commit relates to.</p> <p>Now we can add the <code>groupBy</code> parameter to the schema so that all <code>Commit</code> edges with the same <code>issue</code> property will be aggregated like before to sum the <code>removed</code> and <code>added</code> properties:</p> <pre><code>\"edges\": {\n\"Commit\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.repo.string\",\n\"directed\": \"true\",\n\"properties\": {\n\"added\": \"property.integer\",\n\"removed\": \"property.integer\",\n\"issue\": \"property.integer\"\n},\n\"groupBy\": [\n\"issue\"\n]\n}\n}\n</code></pre> <p>Now say if we added the following element to the graph and run a query to get the edges like before:</p> AddElementsResult <pre><code>{\n\"class\": \"AddElements\",\n\"input\": [\n{\n\"class\": \"Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"properties\": {\n\"added\": 20,\n\"removed\": 5,\n\"issue\": 1\n}\n},\n{\n\"class\": \"Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"properties\": {\n\"added\": 6,\n\"removed\": 8,\n\"issue\": 1\n}\n},\n{\n\"class\": \"Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"properties\": {\n\"added\": 60,\n\"removed\": 4,\n\"issue\": 2\n}\n},\n{\n\"class\": \"Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"properties\": {\n\"added\": 35,\n\"removed\": 10,\n\"issue\": 2\n}\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Person\",\n\"vertex\": \"Dave\"\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Repository\",\n\"vertex\": \"r1\"\n}\n]\n}\n</code></pre> <pre><code>[\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Person\",\n\"vertex\": \"Dave\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {\n\"issue\": 1,\n\"removed\": 13,\n\"added\": 26\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {\n\"issue\": 2,\n\"removed\": 14,\n\"added\": 95\n}\n}\n]\n</code></pre> <p>As you can see we end up with two <code>Commit</code> edges relating to each <code>issue</code> with all other properties aggregated together.</p>"},{"location":"administration-guide/aggregation/ingest-example/#expanded-example","title":"Expanded Example","text":"<p>The example from the first section is a good demonstration of how aggregation works but just having the total number of some properties may not be the most useful. To demonstrate a more complex use case we will modify the example to add some new properties to the edges so that after aggregation we'll have a graph like:</p> <pre><code>graph LR\n    A([\"Person\n\n        ID: Dave\"])\n    --\n    \"Commit\n     first: 2015-12-25\n     latest: 2023-01-01\n     count: 3\"\n    --&gt;\n    B([\"Repository\n\n        ID: r1\"])</code></pre> <p>What we are doing with this graph is aggregating any new <code>Commit</code> edges so that the <code>first</code> and <code>latest</code> commit dates are kept updated as new edges are added to the Graph whilst, incrementing a <code>count</code> property to indicate overall how many <code>Commit</code> edges are between two vertexes.</p> <p>We will modify the schema from the basic example add the different properties and set up the aggregation functions:</p> <p>Tip</p> <p>For good practice we have also added some <code>validateFunctions</code> to give minimum confidence in the values of the types. Please see the predicates reference guide for more information.</p> elements.jsontypes.json <pre><code>{\n\"edges\": {\n\"Commit\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.repo.string\",\n\"directed\": \"true\",\n\"properties\": {\n\"first\": \"property.date.first\",\n\"latest\": \"property.date.latest\",\n\"count\": \"property.integer.count\"\n}\n}\n},\n\"entities\": {\n\"Person\": {\n\"description\": \"Entity representing a person vertex\",\n\"vertex\": \"id.person.string\"\n},\n\"Repository\": {\n\"description\": \"Entity representing a repository vertex\",\n\"vertex\": \"id.repo.string\"\n}\n}\n}\n</code></pre> <pre><code>{\n\"types\": {\n\"id.person.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.repo.string\": {\n\"description\": \"A basic type to hold the string id of a repository entity\",\n\"class\": \"java.lang.String\"\n},\n\"property.integer.count\": {\n\"description\": \"A basic type to hold a count property that must be greater than 0\",\n\"class\": \"java.lang.Integer\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n},\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\": true,\n\"value\": 0\n}\n]\n},\n\"property.date.first\": {\n\"description\": \"A Date type to hold first date property after aggregation\",\n\"class\": \"java.util.Date\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n},\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"property.date.latest\": {\n\"description\": \"A Date type to hold latest date property after aggregation\",\n\"class\": \"java.util.Date\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n},\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"true\": {\n\"description\": \"A simple boolean that must always be true.\",\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n}\n]\n}\n}\n}\n</code></pre> <p>As you can see in the types schema we have applied the <code>Min</code> function to the <code>property.date.first</code> type so that will always be aggregated to be the earliest date property. Similarly we apply the <code>Max</code> function to the <code>property.date.latest</code> to always give us the latest date property. The <code>property.integer.count</code> property keeps the simple <code>Sum</code> function to keep a total of the number of edges.</p> <p>Applying these schemas to a Graph we can then add the following elements to demonstrate the aggregation in practice:</p> <p>Note</p> <p>The dates here are in milliseconds since the Unix Epoch due to how Jackson serialises <code>java.util.Date</code> types.</p> <pre><code>{\n\"class\": \"AddElements\",\n\"input\": [\n{\n\"class\": \"Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"properties\": {\n\"first\": {\n\"java.util.Date\": 1451044800146\n},\n\"latest\": {\n\"java.util.Date\": 1451044800146\n},\n\"count\": 1\n}\n},\n{\n\"class\": \"Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"properties\": {\n\"first\": {\n\"java.util.Date\": 1514808000146\n},\n\"latest\": {\n\"java.util.Date\": 1514808000146\n},\n\"count\": 1\n}\n},\n{\n\"class\": \"Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"properties\": {\n\"first\": {\n\"java.util.Date\": 1672574400146\n},\n\"latest\": {\n\"java.util.Date\": 1672574400146\n},\n\"count\": 1\n}\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Person\",\n\"vertex\": \"Dave\"\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Repository\",\n\"vertex\": \"r1\"\n}\n]\n}\n</code></pre> <p>Tip</p> <p>Loading the elements like this is just for demonstration purposes, it can look a little unintuitive as we have the same data for <code>first</code> and <code>latest</code> properties. In production you may want to create a custom <code>ElementsGenerator</code> so that the elements are created correctly from your raw data based on the graph schema.</p> <p>Now running a query on these elements with the seed as <code>\"Dave\"</code> we can see that we get back one edge with aggregated properties holding the <code>first</code> and <code>latest</code> commit times as well as a <code>count</code> with the current number of edges.</p> JSON QueryResult <pre><code>{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"Dave\"\n}\n]\n}\n</code></pre> <pre><code>[\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Person\",\n\"vertex\": \"Dave\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"Commit\",\n\"source\": \"Dave\",\n\"destination\": \"r1\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {\n\"count\": 3,\n\"first\": {\n\"java.util.Date\": 1451044800146\n},\n\"latest\": {\n\"java.util.Date\": 1672574400146\n}\n}\n}\n]\n</code></pre>"},{"location":"administration-guide/aggregation/overview/","title":"Aggregation Guide","text":"<p>A basic introduction to the concept of Aggregation in Gaffer can be found in the User Guide. This guide is an extension of the introduction to demonstrate more advanced usage of Aggregation and how it can be applied.</p>"},{"location":"administration-guide/aggregation/overview/#ingest-aggregation","title":"Ingest Aggregation","text":"<p>Ingest aggregation permanently aggregates similar elements together in the Graph as they are loaded. The application of ingest aggregation is done via the Graph schema which will apply the aggregation if one of the following conditions are met:</p> <ul> <li>An entity has the same <code>group</code>, <code>vertex</code> (e.g. ID), <code>visibility</code> and all <code>groupBy</code>   property values are the same.</li> <li>An edge has the same <code>group</code>, <code>source</code>, <code>destination</code>, and all <code>groupBy</code>   property values are the same.</li> </ul> <p>There are a few different use cases for applying ingest aggregation but it is largely driven by the data you have and the analysis you wish to perform. As an example, say you were expecting multiple connections of the same edge between two nodes but each instance of the edge may have differing values on it's properties this could be a place to apply aggregation to sum the values etc.</p> <p>Please see the following page for some common use cases and how you could apply ingest aggregation.</p>"},{"location":"administration-guide/aggregation/overview/#query-time-aggregation","title":"Query-time Aggregation","text":"<p>Query-time aggregation as the name suggests is adding aggregation to elements from within the graph query. This differs from ingest aggregation as only the results of the query will have been aggregated the data stored in the graph remains unchanged.</p> <p>Generally to apply aggregation at query-time you must override the <code>groupBy</code> property to prevent the default grouping taking place. It is then possible to create your own aggregator in the query which can force the use of a different aggregation function on a property.</p> <p>A simple example demonstrating query-time aggregation can be found in the user guide on filtering.</p> <p>Tip</p> <p>Most of the time you will want to couple query-time aggregation with a <code>View</code> to allow more targeted queries on the data in your graph.</p>"},{"location":"administration-guide/gaffer-config/change-accumulo-passwords/","title":"Changing the Accumulo Passwords","text":"<p>When deploying Accumulo - either as part of a Gaffer stack or as a standalone, the passwords for all the users and the instance.secret are set to default values and should be changed. The instance.secret cannot be changed once deployed as it is used in initalisation.</p> <p>The passwords can be configured in a standard deployment via the <code>accumulo.properties</code> file.</p> <p>The following table outlines the values and defaults if using the container images:</p> Name value default value Instance Secret <code>instance.secret</code> \"DEFAULT\" Tracer user <code>trace.user</code> \"root\" Tracer user password <code>trace.token.property.password</code> \"secret\""},{"location":"administration-guide/gaffer-config/config/","title":"Configuration","text":""},{"location":"administration-guide/gaffer-config/config/#how-to-configure-a-gaffer-instance","title":"How to configure a Gaffer instance","text":"<p>First you must set up the files and directories you will need for the instance. As it stands there are a couple of different ways to run a Gaffer project this example will use a logical structure that suites a stand alone deployment e.g. docker consisting of the following file structure:</p> <p>Example Gaffer project structure</p> <p>Click the plus symbols for a brief description of each file</p> <pre><code>\u251c\u2500\u2500 config\n\u2502   \u251c\u2500\u2500 gaffer\n\u2502       \u251c\u2500\u2500 application.properties #(1)!\n\u2502       \u251c\u2500\u2500 data                   #(2)!\n\u2502       \u2502   \u251c\u2500\u2500 neo4jExport.csv\n\u2502       \u251c\u2500\u2500 graph\n\u2502       \u2502   \u2514\u2500\u2500 graphConfig.json #(3)!\n\u2502       \u251c\u2500\u2500 schema\n\u2502       \u2502   \u251c\u2500\u2500 elements.json #(4)!\n\u2502       \u2502   \u2514\u2500\u2500 types.json    #(5)!\n\u2502       \u2514\u2500\u2500 store\n\u2502           \u251c\u2500\u2500 operationsDeclarations.json #(6)!\n\u2502           \u2514\u2500\u2500 store.properties            #(7)!\n\u2502   \u2514\u2500\u2500 docker-compose.yaml #(8)!\n</code></pre> <ol> <li>Properties file that generally sets the file locations of other Gaffer     configs e.g. schemas (note these are the absolute paths inside the     container).</li> <li>Any data files, e.g. CSV, to be made available to the Gaffer container.</li> <li>The graph config file to set id, description and other values for the graph.</li> <li>This file holds the schema outlining the elements in the graph, e.g. the entities and edges.</li> <li>This file defines the different data types in the graph and how they are serialised to Java classes. An example of the schema files can be found here</li> <li>Config file for additional Gaffer operations and set the class to handle them on the store.</li> <li>The General store properties, sets up what store to use and any additional configuration.</li> <li>This file controls which containers will be started up and the configuration of them to ensure correct ports and files are available.</li> </ol> <p>All the files in the <code>config/accumulo/</code> and <code>config/hdfs/</code> directories will be copied directly from the two locations in the Gaffer docker repo, here and here. The configuration of these are out of scope of this example but are covered in other sections of the documentation. The main focus of this guide will be on the configuration files under the <code>config/gaffer/</code> directory.</p>"},{"location":"administration-guide/gaffer-config/config/#configuration-files","title":"Configuration Files","text":""},{"location":"administration-guide/gaffer-config/config/#application-properties","title":"Application Properties","text":"<p>This is probably the simplest configuration file in the Gaffer deployment. In general it borrows a concept from Spring Boot to allow any properties related to Gaffer. In the example that follows we use it to set the file location properties of where the other config files are (inside the container).</p> application.properties<pre><code>gaffer.schemas=/gaffer/schema\ngaffer.storeProperties=/gaffer/store/store.properties\ngaffer.graph.config=/gaffer/graph/graphConfig.json\n</code></pre>"},{"location":"administration-guide/gaffer-config/config/#graph-configuration","title":"Graph Configuration","text":"<p>The graph configuration file is a JSON file that configures few bits of the Gaffer graph. Primarily it is used to set the name and description along with any additional hooks to run before an operation chain e.g. to impose limits on max results etc. For the example, as it is a very basic graph we just set the name and short description.</p> graphConfig.json<pre><code>{\n\"graphId\": \"ExampleGraph\",\n\"description\": \"An example graph\"\n}\n</code></pre>"},{"location":"administration-guide/gaffer-config/config/#store-properties","title":"Store Properties","text":"<p>The store properties file is used to configure the Gaffer store for a graph. There are a few different stores available for Gaffer, these are explained in more detail in the reference documentation, but by default you must provide a store class and a store properties class. For this example we are using an Accumulo store as it is recommended for efficient storage and retrieval of large data volumes. Its configuration requires a few custom properties which are outlined in the following file.</p> store.properties<pre><code>gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.AccumuloStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\n# Accumulo specific config\naccumulo.instance=accumulo\naccumulo.zookeepers=zookeeper\naccumulo.user=root\naccumulo.password=secret\n# General store config\ngaffer.cache.service.class=uk.gov.gchq.gaffer.cache.impl.HashMapCacheService\ngaffer.store.job.tracker.enabled=true\ngaffer.store.operation.declarations=/gaffer/store/operationsDeclarations.json\n</code></pre>"},{"location":"administration-guide/gaffer-config/config/#operations-declarations","title":"Operations Declarations","text":"<p>The operation declarations file is a way of enabling additional operations in Gaffer. By default most built-in operations are already available (use <code>GetAllOperations</code> or the equivalent REST endpoint to see a list), but it's possible you'll want to enable others or add your own custom ones. The example loads its data from a local CSV file, we can activate a couple of additional operations for this using the following file.</p> operationsDeclarations.json<pre><code>{\n\"operations\": [\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ImportFromLocalFile\",\n\"handler\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ImportFromLocalFileHandler\"\n}\n},\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ExportToLocalFile\",\n\"handler\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ExportToLocalFileHandler\"\n}\n}\n]\n}\n</code></pre> <p>The two additional operations already exist in Gaffer (in the code base: ImportFromLocalFile and ExportToLocalFile), what this file is doing is essentially activating them and setting the handler class for them. The <code>ImportFromLocalFile</code> usage is demonstrated in the using the API section to load some data.</p> <p>This operation allows us to pass a local CSV file (in the container) which will be read line by line and get a stream of the line strings. This is very useful when we start using Operation Chains as we can pass this stream of data as the input to the next operation in the chain similar to shell pipes.</p> <p>Note</p> <p>The location of the file needs to be set via the store properties file using the <code>gaffer.store.operation.declarations</code> property (see previous section).</p>"},{"location":"administration-guide/gaffer-config/graph-metadata/","title":"Graph Metadata Configuration","text":"<p>The graph configuration file is a JSON file that configures a few bits of the Gaffer graph. Primarily it is used to set the name and description along with any additional hooks to run before an operation chain e.g. to impose limits on max results etc. For example, a simple graph configuration file may look like:</p> graphConfig.json<pre><code>{\n\"graphId\": \"ExampleGraph\",\n\"description\": \"An example graph\"\n}\n</code></pre>"},{"location":"administration-guide/gaffer-config/graph-metadata/#changing-values","title":"Changing Values","text":"<p>The standard file location in the gaffer images for the file is <code>/gaffer/graph/graphConfig.json</code></p> <p>To change any of the values for a standard Gaffer deployment all that's needed is to configure the JSON file for the <code>graphConfig</code>. The key value pairs in the file can then be configured as you wish and upon restarting the graph the values will be updated (assuming the file is loaded correctly).</p> <p>However be aware, if you are using the Accumulo store, updating the <code>graphId</code> is a little more complicated since the <code>graphId</code> corresponds to an Accumulo table. This means that if you change the ID then a new Accumulo table will be used and any existing data would be lost.</p> <p>Tip</p> <p>You can see you new description if you to the Swagger UI and call the <code>/graph/config/description</code> endpoint.</p>"},{"location":"administration-guide/gaffer-config/schema/","title":"Schemas","text":"<p>This page delves into more detail on Schemas. As seen in the other guides, there are two main components to schemas: Elements and Types.</p> <p>Schemas are often separated into two JSON files (<code>elements.json</code> &amp; <code>types.json</code>), but it's worth remembering that your schema can be broken up further if required.</p> <p>For example if you have a Graph that is made up of 5 different data sources, you may find it easier to develop and maintain by splitting your schema into multiple parts, for example 5 Element Schemas and 1 Types schema. Alternatively, a single overall schema file could be used for Elements and Types, as there is no requirement to have a single Types schemas. When you construct your Gaffer graph you must provide all the Schema parts. If provided separately, these will then be merged together to form an internal schema used for the Graph.</p> <p>When using Java directly, you don't need to use JSON files to store you schemas - although this is still recommended. See the Java API section for more about interacting with Schemas in Java.</p> <p>The sections below walkthrough the features of Schemas in detail and explain how to accurately model your data in Gaffer.</p>"},{"location":"administration-guide/gaffer-config/schema/#elements-schema","title":"Elements schema","text":"<p>The Elements schema is designed to be a high level document describing what information your Graph contains, i.e. the different kinds of edges and entities and the list of properties associated with each. Essentially this part of the schema should just be a list of all the entities and edges in the graph. Edges describe the relationship between a source vertex and a destination vertex. Entities describe a vertex. Edges describe the relationship between a source vertex and a destination vertex. We use the term \"element\" to mean either an edge or an entity.</p> <p>When defining an element we must provide a \"group\". This is a unique string identifier for each element. Groups must be completely unique and cannot be shared between edges and entities.</p>"},{"location":"administration-guide/gaffer-config/schema/#edges","title":"Edges","text":"<p>Edges must have the following:</p> <ul> <li><code>source</code> - Type of object to use as the source vertex in your graph. Needs to be a type defined in the Types schema.</li> <li><code>destination</code> - Type of object to use as the destination vertex in your graph. Can either be the same type as <code>source</code>, or a different type.</li> <li><code>directed</code> - Tells Gaffer if the edge is directed or undirected. Needs to be a type which means true or false, see Types for more info.</li> </ul> <p>When an Edge is undirected in Gaffer (<code>directed</code> is <code>false</code>), it is treated as if the relationship was bidirectional, meaning that the vertices of the edge do not have an authoritative source and destination. Thus, the undirected edges <code>A -- B</code> and <code>B -- A</code> are equal, and will be aggregated with any other undirected edge with the same source and destination. Gaffer will present the undirected edges vertices in natural ordering, so a client will also see the above edge presented as <code>A, B</code>. This means when adding an undirected Edge of <code>A -- B</code>, it will be aggregated with another existing undirected Edge of <code>B -- A</code>.</p>"},{"location":"administration-guide/gaffer-config/schema/#entities","title":"Entities","text":"<p>Entities must have a <code>vertex</code> field, which is similar to the <code>source</code> and <code>destination</code> fields on an edge. For example, modelling <code>London -&gt; Paris</code> requires an entity definition to represent the city and an edge definition to represent the relationship. In the previous example the entity <code>vertex</code> field and the edge <code>source</code> and <code>destination</code> fields would all be of the same type.</p>"},{"location":"administration-guide/gaffer-config/schema/#optional-element-fields","title":"Optional Element fields","text":"<p>Edges and Entities can optionally have the following fields:</p> <ul> <li><code>description</code> - A simple string which should provide some context and explain what the element is.</li> <li><code>parents</code> - An array of parent group names. These must relate to the same sort of element as the child, for example an edge cannot have an entity as a parent. Elements can inherit any information from multiple parent elements. Fields will be merged/overridden, so the hierarchy of parents is important. Any fields that are defined in the child element will also merge or override information taken from the parents.</li> <li><code>properties</code> - Properties are defined by a map of key-value pairs of property names to property types. Property types are described in the Types schema.</li> <li><code>groupBy</code> - Allows you to specify extra properties (in addition to the element group and vertices) to use for controlling when similar elements should be grouped together and summarised. By default Gaffer uses the element group and its vertices to group similar elements together when aggregating and summarising elements.</li> <li><code>visibilityProperty</code> - Used to specify the property to use as a visibility property when using visibility properties in your graph. If sensitive elements have a visibility property then set this field to that property name. This ensures Gaffer knows to restrict access to sensitive elements.</li> <li><code>timestampProperty</code> - Used to specify timestamp property in your graph, so Gaffer Stores know to treat that property specially. Setting this is optional and does not affect the queries available to users. This property allows Store implementations like Accumulo to optimise the way the timestamp property is persisted. For these stores using it can have a very slight performance improvement due to the lazy loading of properties. For more information see the timestamp section of the Accumulo Store Reference.</li> <li><code>aggregate</code> - Specifies if aggregation is enabled for this element group. True by default. If you would like to disable aggregation, set this to false.</li> </ul> <p>These 2 optional fields are for advanced users. They can go in the Elements Schema, however we have split them out into separate Validation and Aggregation Schema files for this page, so the logic doesn't complicate the Elements schema.</p> <ul> <li><code>validateFunctions</code> - An array of selections and predicates to be applied to an element. This allows you to validate based on multiple properties at once. E.g. check a timestamp property together with a time to live property to check if the element should be aged off. Individual property validation is best done as a validateFunction in the property type definition in Types schema.</li> <li><code>aggregateFunctions</code> - An array of selections and binary operators to be applied to an element. This allows you to aggregate based on multiple properties at once. It is important to note that types of properties (groupBy, non-groupBy, visibility) cannot be aggregated in the same aggregate function. The timestamp property is treated as a non-groupBy property. Individual property aggregation is best done as a aggregateFunction in the property type definition in the Types schema.</li> </ul>"},{"location":"administration-guide/gaffer-config/schema/#example-elements-schema","title":"Example Elements Schema","text":"<p>This example Elements schema is a subset of the schema used in the Gaffer Road Traffic example graph.</p> <pre><code>{\n\"edges\": {\n\"RoadUse\": {\n\"description\": \"A directed edge representing vehicles moving from junction A to junction B.\",\n\"source\": \"junction\",\n\"destination\": \"junction\",\n\"directed\": \"true\",\n\"properties\": {\n\"startDate\": \"date.earliest\",\n\"endDate\": \"date.latest\",\n\"count\": \"count.long\"\n},\n\"groupBy\": [\n\"startDate\",\n\"endDate\"\n]\n},\n\"RoadHasJunction\": {\n\"description\": \"A directed edge from each road to all the junctions on that road.\",\n\"source\": \"road\",\n\"destination\": \"junction\",\n\"directed\": \"true\"\n}\n},\n\"entities\": {\n\"Cardinality\": {\n\"description\": \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n\"vertex\": \"anyVertex\",\n\"properties\": {\n\"edgeGroup\": \"set\",\n\"hllSketch\": \"hllSketch\",\n\"count\": \"count.long\"\n},\n\"groupBy\": [\n\"edgeGroup\"\n]\n}\n}\n}\n</code></pre> <p>Here is the Validation Schema. It contains advanced validation, that is applied to multiple properties within an Element group.</p> <pre><code>{\n\"edges\": {\n\"RoadUse\": {\n\"validateFunctions\": [\n{\n\"selection\": [\n\"startDate\",\n\"endDate\"\n],\n\"predicate\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsXLessThanY\"\n}\n}\n]\n}\n}\n}\n</code></pre> <p>Here is the Aggregation Schema. It contains advanced aggregation, that is applied to multiple properties within an Element group. The multi property aggregate function defined here overrides the relevant single property aggregate functions defined in the Types schema.</p> <pre><code>{\n\"edges\": {\n\"RoadUse\": {\n\"aggregateFunctions\": [\n{\n\"selection\": [\n\"startDate\",\n\"endDate\"\n],\n\"binaryOperator\": {\n\"class\": \"uk.gov.gchq.gaffer.doc.dev.aggregator.ExampleTuple2BinaryOperator\"\n}\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"administration-guide/gaffer-config/schema/#types","title":"Types","text":"<p>All types used in the Elements schema must be defined in the Types parts of the schema. These Types explain to Gaffer what types of properties to expect and how to deal with them.</p> <p>For each type you must provide the following information:</p> <ul> <li><code>class</code> - The Java class of the type.</li> </ul> <p>You can optionally provide the following:</p> <ul> <li><code>description</code> - String which should provide a description of the type.</li> <li><code>validateFunctions</code> - Array of predicates that will be executed against every type value to validate it. To improve performance, put quicker/low cost functions first in the array.</li> <li><code>aggregateFunction</code> - The aggregate binary operator to use to aggregate/summarise/merge property values of the same type together.</li> <li><code>serialiser</code> - Object which contains a field class which represents the Java class of the serialiser to use, and potentially arguments depending on the serialiser. If this is not provided Gaffer will attempt to select an appropriate one for you (only available for simple Java types).</li> </ul>"},{"location":"administration-guide/gaffer-config/schema/#true-false","title":"True &amp; False","text":"<p>The <code>directed</code> field for edge elements is either \"true\" or \"false\". Currently, you need to manually define these as types in your Types schema. The easiest way to do this is to create a type called \"true\", \"false\" and define it as being a boolean with a filter predicate to check the boolean is either true or false respectively. There's an example of a \"true\" type in the example Types section below.</p>"},{"location":"administration-guide/gaffer-config/schema/#serialisers","title":"Serialisers","text":"<p>Gaffer will automatically choose serialisers for you for some core types. Where possible you should let Gaffer choose for you, as it will choose the optimal serialiser for the type and your usage. For custom types you will need to write your own serialiser.</p> <p>When manually choosing a serialiser for your schema you will need to take the following into consideration.</p> <p>For vertex serialisation and groupBy properties you must choose serialisers that are consistent. A consistent serialiser will serialise the equal objects into exactly the same values (bytes). For example the JavaSerialiser and FreqMapSerialiser are not consistent.</p> <p>When using an ordered store (a store that implements the ORDERED StoreTrait, such as Accumulo), you need to check whether the serialisers are ordered:</p> <ul> <li>For vertex serialisation you must use a serialiser that is ordered.</li> <li>For groupBy properties you must use a serialiser that is ordered.</li> <li>All other properties can be serialised with ordered/unordered serialisers.</li> </ul>"},{"location":"administration-guide/gaffer-config/schema/#example-types-schema","title":"Example Types Schema","text":"<p>Here is an example Types schema (goes with the example Elements schema above):</p> <pre><code>{\n\"types\": {\n\"junction\": {\n\"description\": \"A road junction represented by a String.\",\n\"class\": \"java.lang.String\"\n},\n\"road\": {\n\"description\": \"A road represented by a String.\",\n\"class\": \"java.lang.String\"\n},\n\"anyVertex\": {\n\"description\": \"An String vertex - used for cardinalities\",\n\"class\": \"java.lang.String\"\n},\n\"count.long\": {\n\"description\": \"A long count that must be greater than or equal to 0.\",\n\"class\": \"java.lang.Long\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\": true,\n\"value\": {\n\"java.lang.Long\": 0\n}\n}\n],\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"true\": {\n\"description\": \"A simple boolean that must always be true.\",\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n}\n]\n},\n\"date.earliest\": {\n\"description\": \"A Date that when aggregated together will be the earliest date.\",\n\"class\": \"java.util.Date\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n],\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n}\n},\n\"date.latest\": {\n\"description\": \"A Date that when aggregated together will be the latest date.\",\n\"class\": \"java.util.Date\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n],\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n}\n},\n\"set\": {\n\"class\": \"java.util.TreeSet\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n}\n},\n\"hllSketch\": {\n\"class\": \"org.apache.datasketches.hll.HllSketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser\"\n}\n}\n}\n}\n</code></pre>"},{"location":"administration-guide/gaffer-config/schema/#full-schema-example","title":"Full Schema Example","text":"<p>Once the schema has been loaded into a graph the parent elements are merged into the children for performance reasons. This is what the full schema created from the above example schema parts looks like:</p> <pre><code>{\n\"edges\" : {\n\"RoadUse\" : {\n\"description\" : \"A directed edge representing vehicles moving from junction A to junction B.\",\n\"source\" : \"junction\",\n\"destination\" : \"junction\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"startDate\" : \"date.earliest\",\n\"endDate\" : \"date.latest\",\n\"count\" : \"count.long\"\n},\n\"groupBy\" : [ \"startDate\", \"endDate\" ],\n\"aggregateFunctions\" : [ {\n\"selection\" : [ \"startDate\", \"endDate\" ],\n\"binaryOperator\" : {\n\"class\" : \"uk.gov.gchq.gaffer.doc.dev.aggregator.ExampleTuple2BinaryOperator\"\n}\n} ],\n\"validateFunctions\" : [ {\n\"selection\" : [ \"startDate\", \"endDate\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsXLessThanY\"\n}\n} ]\n},\n\"RoadHasJunction\" : {\n\"description\" : \"A directed edge from each road to all the junctions on that road.\",\n\"source\" : \"road\",\n\"destination\" : \"junction\",\n\"directed\" : \"true\"\n}\n},\n\"entities\" : {\n\"Cardinality\" : {\n\"description\" : \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n\"vertex\" : \"anyVertex\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllSketch\" : \"hllSketch\",\n\"count\" : \"count.long\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"junction\" : {\n\"description\" : \"A road junction represented by a String.\",\n\"class\" : \"java.lang.String\"\n},\n\"road\" : {\n\"description\" : \"A road represented by a String.\",\n\"class\" : \"java.lang.String\"\n},\n\"anyVertex\" : {\n\"description\" : \"An String vertex - used for cardinalities\",\n\"class\" : \"java.lang.String\"\n},\n\"count.long\" : {\n\"description\" : \"A long count that must be greater than or equal to 0.\",\n\"class\" : \"java.lang.Long\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n},\n\"validateFunctions\" : [ {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\" : true,\n\"value\" : {\n\"java.lang.Long\" : 0\n}\n} ]\n},\n\"true\" : {\n\"description\" : \"A simple boolean that must always be true.\",\n\"class\" : \"java.lang.Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n} ]\n},\n\"date.earliest\" : {\n\"description\" : \"A Date that when aggregated together will be the earliest date.\",\n\"class\" : \"java.util.Date\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n},\n\"validateFunctions\" : [ {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n} ]\n},\n\"date.latest\" : {\n\"description\" : \"A Date that when aggregated together will be the latest date.\",\n\"class\" : \"java.util.Date\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n},\n\"validateFunctions\" : [ {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n} ]\n},\n\"set\" : {\n\"class\" : \"java.util.TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n}\n},\n\"hllSketch\" : {\n\"class\" : \"org.apache.datasketches.hll.HllSketch\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser\"\n}\n}\n}\n}\n</code></pre>"},{"location":"administration-guide/gaffer-config/schema/#java-api","title":"Java API","text":"<p>Schemas can be loaded from a JSON file directly using the <code>fromJSON()</code> method of the <code>Schema</code> class. This accepts <code>byte[]</code>, <code>InputStream</code> or <code>Path</code> types, for example:</p> <pre><code>Schema mySchema = Schema.fromJson(Paths.get(\"path/to/schema.json\"));\n</code></pre> <p>While it's easiest to create Schema objects using the JSON approach, you can create them directly from their component classes in Java. Constructing a Schema from scratch this way would be tedious, but you could use this to create your own solutions for Schema generation by building on these components.</p> <p>A Schema can be created using its <code>Builder()</code> method. See Schema Javadoc.</p> <pre><code>Schema mySchema = new Schema.Builder().edges(edges)\n.entities(entities)\n.types(types)\n.build();\n</code></pre> <p>The Edges, Entities and Types are supplied as Maps with String keys. See the Javadoc covering <code>SchemaEdgeDefinition</code>, <code>SchemaEntityDefinition</code> and <code>TypeDefinition</code> for information about their builders.</p> <pre><code>Map&lt;String, SchemaEdgeDefinition&gt; myEdges = new HashMap&lt;&gt;();\nmyEdges.put(\"myEdge\", new SchemaEdgeDefinition.Builder()...\n.build());\nMap&lt;String, SchemaEntityDefinition&gt; myEntities = new HashMap&lt;&gt;();\nmyEntities.put(\"myEntity\", new SchemaEntityDefinition.Builder()...\n.build());\nMap&lt;String, TypeDefinition&gt; myTypes = new HashMap&lt;&gt;();\nmyTypes.put(\"myType\", new TypeDefinition.Builder()...\n.build());\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/quickstart/","title":"Deployment Quickstart","text":"<p>The quickest way to get up and running with Gaffer is through its container images. To start up a simple map store based instance with some default schemas simply pull and run the <code>gaffer-rest</code> image.</p> <pre><code>docker pull gchq/gaffer-rest:2.0.0\n</code></pre> <pre><code>docker run -p 8080:8080 gchq/gaffer-rest:2.0.0\n</code></pre> <p>The Swagger rest API should be available at http://127.0.0.1:8080/rest to try out.</p> <p>Be aware that as the image uses the map store backend by default, all graph data will be saved in memory so killing the container will mean you will lose any data added to the graph. Take a look at the possible storage options section for an overview of the different store types Gaffer supports.</p> <p>If you wish to add custom schema to try out you can mount these into the container at start up to configure the graph. By default the <code>gaffer-rest</code> image looks under <code>/gaffer/schema</code> meaning you can bind-mount over this directory with a directory containing your custom schema.</p> <pre><code>docker run -p 8080:8080 -v /path/to/your/schema:/gaffer/schema gchq/gaffer-rest:2.0.0\n</code></pre> <p>Info</p> <p>A simple map store based deployment is usually only useful for small scale graphs and rapid prototyping; please see the subsequent pages in this section for more scalable deployments.</p>"},{"location":"administration-guide/gaffer-deployment/quickstart/#possible-storage-options","title":"Possible Storage Options","text":"<p>As Gaffer essentially works as a framework to structure and save data into a data store, the storage option is one of the largest considerations when deploying a new graph. A few technologies are supported by Gaffer; however, some are more widely used than others, the main types you might want to use are:</p> <ul> <li>Accumulo Store - The main recommended data store for Gaffer implemented by     Apache Accumulo.</li> <li>Map Store - In memory JVM store, useful for quick prototyping.</li> <li>Proxy Store - This provides a way to hook into an existing Gaffer store,     when used all operations are delegated to the chosen Gaffer Rest API.</li> <li>Federated Store - Similar to a proxy store however, this will forward all     requests to a collection of sub graphs but merge the responses so they     appear as one graph.</li> </ul> <p>Once the storage option has been chosen, the deployment can be setup and started using one or more of the available Gaffer container images.</p> <p>Info</p> <p>Please see the gaffer stores documentation for more information on the available store types.</p> <p>To change the storage backend for Gaffer the <code>store.properties</code> file can be configured with the chosen type. Various other properties and configuration are available and covered in the Gaffer configuration section.</p> <p>Example <code>store.properties</code> for MapStore</p> <pre><code>gaffer.store.class=uk.gov.gchq.gaffer.mapstore.MapStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.mapstore.MapStoreProperties\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/gaffer-images/","title":"Gaffer Images","text":"<p>As demonstrated in the quickstart it is very simple to start up a basic in memory gaffer graph using the available Open Container Initiative (OCI) images.</p> <p>For large scale graphs with persistent storage you will want to use a different storage backend to a Map Store; the recommended one being Accumulo. To do this a different deployment of containers are required. This guide will run through the containers needed for a basic Accumulo cluster and how to configure and create custom images of Gaffer.</p>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/gaffer-images/#available-images","title":"Available Images","text":"<p>Currently there are a few different images that can be used to run a Gaffer deployment. The main ones are outlined in the following table and are all available on Docker Hub.</p> Image Description <code>gchq/accumulo</code> This image is a containerised deployment of Apache Accumulo. This was created as historically there has not been an available official image from the maintainers of Accumulo. There has since been an offical image made available however, it is not well supported so not currently in use in Gaffer. <code>gchq/hdfs</code> A custom image for running HDFS (Hadoop file system) via a container. Contains an official release of Apache Hadoop which is used as the scalable data storage for Accumulo. <code>gchq/gaffer</code> This is the main container image for Gaffer that is built on on top of the <code>gchq/accumulo</code> image so includes a release of <code>zookeeper</code>, <code>hdfs</code> and <code>accumulo</code> along with the Gaffer libraries. Running this image simply runs an Accumulo instance but with the Gaffer libraries loaded to allow Graph creation. <code>gchq/gaffer-rest</code> This is the REST API image containing the files that can be used to configure the graph to connect to the chosen store, by default there are some pre-configured config files which can be overridden by a bind-mount of alternatives. <p>Note</p> <p>There are a few other images available; however, they are less frequently used or purely example images, please see the <code>gaffer-docker</code> repository for more details.</p>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/gaffer-images/#volumes-and-bind-mount","title":"Volumes and bind-mount","text":"<p>To change and configure the graph that is deployed you will need to override the default files in the images by default. You can of course create a custom image with different config files however, it can be more flexible to just bind-mount over the current files.</p> <p>To do this you will need to know the location of the files in the image you want to override but in many cases you can mount over an entire directory for example:</p> <p>The path <code>/custom/configs</code> is some path on the host system with different config files in that can be mounted in when running the image.</p> <pre><code>docker run \\\n-p 8080:8080 \\\n-v /custom/configs/gaffer/graph:/gaffer/graph \\\n-v /custom/configs/gaffer/schema:/gaffer/schema \\\n-v /custom/configs/gaffer/store:/gaffer/store \\\ngchq/gaffer-rest:2.0.0\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/gaffer-images/#custom-images","title":"Custom Images","text":"<p>To avoid managing a file on the host and bind-mount it, the configuration can be baked into the image. This works well if the configuration itself is rather static and the same across all environments.</p> <p>Creating a custom image can also be useful if you want to load custom extensions to use with Gaffer (e.g. Jars) by default.</p> <p>To create a custom image simply make a new <code>Dockerfile</code> and use one of the Gaffer images as the base image like the following:</p> <pre><code>FROM gchq/gaffer-rest:latest\n# Copy over the existing directory with store configs in\nCOPY ./custom/configs/gaffer/store /gaffer/store\n</code></pre> <p>Then build the new image using a suitable tool or just plain Docker from the current directory like:</p> <pre><code>docker build -t my-gaffer-rest .\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/gaffer-images/#adding-additional-libraries","title":"Adding Additional Libraries","text":"<p>By default with the Gaffer deployment you get access to the:</p> <ul> <li>Sketches library</li> <li>Time library</li> <li>Bitmap Library</li> <li>JCS cache library</li> </ul> <p>If you want more libraries than this (either one of ours of one of your own) you will need to customise the docker images and use them in place of the defaults.</p> <p>At the moment, the <code>gchq/gaffer-rest</code> image uses a runnable jar file located at <code>/gaffer/jars</code>. When it runs it includes the <code>/gaffer/jars/lib</code> on the classpath. This is empty by default because all the dependencies are bundled in to the JAR. However, if you wanted to add your own jars, you can add then to this directory like the following:</p> <pre><code>FROM gchq/gaffer-rest:latest\nCOPY ./custom-lib:1.0-SNAPSHOT.jar /gaffer/jars/lib/\n</code></pre> <p>For an Accumulo deployment, you may wish to add additional libraries to the classpath to enable the use of new iterators. To do this you need to update the <code>gchq/gaffer</code> image and add the JARs to the <code>/opt/accumulo/lib/ext</code> directory:</p> <pre><code>FROM gchq/gaffer:latest\nCOPY ./my-library-1.0-SNAPSHOT.jar /opt/accumulo/lib/ext\n</code></pre> <p>Note</p> <p>This path is different in Accumulo v1 please see the migration page for more detail.</p>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/how-to-run/","title":"How to Deploy with Accumulo on Docker","text":"<p>After reading the previous page you should have a good understanding of what images are available for Gaffer and how to configure them to your needs. However, before running a deployment backed by Accumulo you will need to know a bit of background on Hadoop to understand how the data will scale and be distributed.</p> <p>Usually when deploying a container image you simply run the image and everything is contained locally to the container (hence the name). For larger scale graphs this is less desirable as we will usually want to be able to scale and load balance the storage based on the volume of data; this is where Hadoop comes in.</p> <p>Tip</p> <p>Please see the Accumulo Store page for more information on Accumulo and Hadoop.</p>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/how-to-run/#running-a-cluster-via-docker-for-gaffer","title":"Running a Cluster via Docker for Gaffer","text":"<p>To run an Accumulo cluster on Docker containers, we will need a few different containers that will work together. The general set of containers we will need to run is the following:</p> <p><code>zookeeper</code></p> <p><code>gchq/hdfs</code></p> <ul> <li><code>namenode</code></li> <li><code>datanode</code> (one or more)</li> </ul> <p><code>gchq/gaffer</code> (accumulo)</p> <ul> <li><code>master</code></li> <li><code>tserver</code></li> <li><code>monitor</code></li> <li><code>gc</code></li> </ul> <p><code>gchq/gaffer-rest</code></p> <p>The guide here will walk through the set up of each container using standard Docker but it may be more practical to use a tool such as docker compose. An example docker compose file can be found in the gaffer-docker repository.</p> <p>Before starting any containers we need to create a network so all the containers can talk to each other. To do this we simply run the following command to make a network and name it appropriately:</p> <pre><code>docker network create gaffer-example\n</code></pre> <p>Note</p> <p>If you are using something like docker compose or host networking (e.g. with <code>--net=host</code>) you can skip the network creation step.</p>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/how-to-run/#zookeeper","title":"ZooKeeper","text":"<p>Starting with ZooKeeper, this is used by Accumulo to provide distributed synchronization so is useful to start up first.</p> <pre><code>docker run \\\n--detach \\\n--name zookeeper \\\n--hostname zookeeper \\\n--net gaffer-example \\\n--env ZOO_SERVERS=\"server.1=zookeeper:2888:3888;2181\" \\\n--env ZOO_4LW_COMMANDS_WHITELIST=\"*\" \\\n--volume /data \\\n--volume /datalog \\\nzookeeper:3.7.1\n</code></pre> <p>The above docker command will run a ZooKeeper container with few bits of configuration. The main part that is being set up is the hostname and ports. With ZooKeeper you can also do this by providing a <code>zoo.cfg</code> file but as there is not much to do for a small cluster so we can just pass the configuration in via environment variables with <code>--env</code>. See the official ZooKeeper docs for more information and configuration options.</p>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/how-to-run/#hadoophdfs","title":"Hadoop/HDFS","text":"<p>Next we can launch the Hadoop cluster, we will use the custom distribution of the HDFS image <code>gchq/hdfs</code>. As mentioned before this provides a single-node Hadoop cluster which we can run multiple times to extend into a multi-node cluster.</p> <p>To run a Hadoop cluster we first need the configuration files for Hadoop which we can then add into the running containers. As a starting point you can use the files from the <code>gaffer-docker</code> repository, but you may wish to edit these for your deployment and can read more in the official Hadoop docs.</p> <p>The first Hadoop container we need is a <code>namenode</code> container which runs the Namenode service essentially acting as a master node. We can run this using docker like the following:</p> <pre><code>docker run \\\n--detach \\\n--name hdfs-namenode \\\n--hostname hdfs-namenode \\\n--net gaffer-example \\\n--publish 9870:9870 \\\n--env HADOOP_CONF_DIR=\"/etc/hadoop/conf\" \\\n--volume /custom/configs/hdfs:/etc/hadoop/conf \\\n--volume /var/log/hadoop \\\n--volume /data1 \\\n--volume /data2 \\\ngchq/hdfs:3.3.3 namenode\n</code></pre> <p>The configuration of the above <code>docker</code> command is fairly straight forward, we make sure the port we have configured in the <code>core-site.xml</code> file is made available on the host (e.g. port 9870). We also set up the bind-mount and environment variables so the custom configuration files are available and used. Finally there are a few defined volumes for data, these can be changed to where ever you might want to store the data; it is highly recommended to set these up correctly for your available infrastructure.</p> <p>Once the <code>namenode</code> has been created we now need to add the <code>datanode</code>(s) these are additional nodes in the Hadoop cluster to store data. You can add multiple data nodes to distribute the data across volumes and even machines (with some additional setup).</p> <p>To create a <code>datanode</code> container its much of the same steps as the <code>namenode</code> however, we use a different command to run the <code>datanode</code> service.</p> <pre><code>docker run \\\n--detach \\\n--name hdfs-datanode1 \\\n--hostname hdfs-datanode1 \\\n--net gaffer-example \\\n--env HADOOP_CONF_DIR=\"/etc/hadoop/conf\" \\\n--volume /custom/configs/hdfs:/etc/hadoop/conf \\\n--volume /var/log/hadoop \\\n--volume /data1 \\\n--volume /data2 \\\ngchq/hdfs:3.3.3 datanode\n</code></pre> <p>Note</p> <p>It is recommended you configure the volumes used by your data nodes to fit your infrastructure and the amount of data you are expecting to store. You can also run <code>datanode</code> containers across multiple machines and network them together to have full data distribution.</p>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/how-to-run/#accumulo","title":"Accumulo","text":"<p>There are a few different containers that need to be started for an Accumulo instance. They work on a similar principal to the Hadoop/HDFS containers where the configuration is added via a bind-mount and the different services started via the command passed to the container.</p> <p>For Accumulo we will use the <code>gchq/gaffer</code> image which includes the libraries for both Gaffer and Accumulo. For a deployment of Accumulo generally the following nodes/containers are needed:</p> <ul> <li><code>master</code> - This is the primary coordinating process. Must specify one node.   Can specify a few for fault tolerance (note as of Accumulo v2.1 this is   referred to as <code>manager</code>).</li> <li><code>gc</code> - The Accumulo garbage collector. Must specify one node. Can specify a   few for fault tolerance.</li> <li><code>monitor</code> - Node where Accumulo monitoring web server is run.</li> <li><code>tserver</code> - An Accumulo worker process.</li> </ul> master nodegc nodemonitor nodetserver node <p>This node needs to be running before starting the others.</p> <pre><code>docker run \\\n--detach \\\n--name accumulo-master \\\n--hostname accumulo-master \\\n--net gaffer-example \\\n--env ACCUMULO_CONF_DIR=\"/etc/accumulo/conf\" \\\n--env HADOOP_USER_NAME=\"hadoop\" \\\n--volume /custom/configs/accumulo:/etc/accumulo/conf \\\n--volume /var/log/accumulo \\\ngchq/gaffer:2.0.0-accumulo-2.0.1 master\n</code></pre> <pre><code>docker run \\\n--detach \\\n--name accumulo-gc \\\n--hostname accumulo-gc \\\n--net gaffer-example \\\n--env ACCUMULO_CONF_DIR=\"/etc/accumulo/conf\" \\\n--env HADOOP_USER_NAME=\"hadoop\" \\\n--volume /custom/configs/accumulo:/etc/accumulo/conf \\\n--volume /var/log/accumulo \\\ngchq/gaffer:2.0.0-accumulo-2.0.1 gc\n</code></pre> <pre><code>docker run \\\n--detach \\\n--name accumulo-monitor \\\n--hostname accumulo-monitor \\\n--net gaffer-example \\\n--publish 9995:9995 \\\n--env ACCUMULO_CONF_DIR=\"/etc/accumulo/conf\" \\\n--env HADOOP_USER_NAME=\"hadoop\" \\\n--volume /custom/configs/accumulo:/etc/accumulo/conf \\\n--volume /var/log/accumulo \\\ngchq/gaffer:2.0.0-accumulo-2.0.1 monitor\n</code></pre> <pre><code>docker run \\\n--detach \\\n--name accumulo-tserver \\\n--hostname accumulo-tserver \\\n--net gaffer-example \\\n--env ACCUMULO_CONF_DIR=\"/etc/accumulo/conf\" \\\n--env HADOOP_USER_NAME=\"hadoop\" \\\n--volume /custom/configs/accumulo:/etc/accumulo/conf \\\n--volume /var/log/accumulo \\\ngchq/gaffer:2.0.0-accumulo-2.0.1 tserver\n</code></pre> <p>Note</p> <p>Please see the official Accumulo docs for more information on configuring the deployment.</p>"},{"location":"administration-guide/gaffer-deployment/gaffer-docker/how-to-run/#rest-api","title":"REST API","text":"<p>The final container we need to start up is the REST API, this essentially gives the front end so we can use containers together in a Gaffer cluster. The REST API container is also where the configuration for the graph is applied, such as the schema files and store properties.</p> <p>To start up the REST API it is a similar process to the other containers; however, there are a few more bind-mounts that need defining to configure the graph (you can also build a custom image with files baked in).</p> <pre><code>docker run \\\n--detach \\\n--name gaffer-rest \\\n--net gaffer-example \\\n--publish 8080:8080 \\\n--volume /custom/configs/application.properties:/gaffer/config/application.properties \\\n--volume /custom/configs/graph:/gaffer/graph \\\n--volume /custom/configs/schema:/gaffer/schema \\\n--volume /custom/configs/store:/gaffer/store \\\ngchq/gaffer-rest:2.0.0-accumulo-2.0.1 monitor\n</code></pre> <p>Note</p> <p>The <code>gaffer-rest</code> image comes with some default configuration files and graph schema, you'll likely want to configure these for your project so please see the pages on gaffer configs and graph schema for more information.</p>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration/","title":"Configuring Gaffer with Helm","text":"<p>Warning</p> <p>Configuration via Helm is under development the information here is subject to change in future releases.</p> <p>The general overview of what you can configure in a Gaffer graph is outlined under the configuring Gaffer pages. However, under a Helm based Kubernetes deployment the configuration needs to be applied slightly differently, this page captures how you can currently configure a Gaffer deployment using Helm.</p> <p>Tip</p> <p>Use the <code>--reuse-values</code> argument on a Helm upgrade to re-use passwords from the initial construction.</p>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration/#graph-metadata","title":"Graph Metadata","text":"<p>Create a file called <code>graph-meta.yaml</code>. We will use this file to add our description and graph ID. Changing the description is as easy as changing the <code>graph.config.description</code> value.</p> <pre><code>graph:\nconfig:\ndescription: \"My graph description\"\n</code></pre> <p>Upgrade your deployment using Helm to load the new file:</p> <pre><code>helm upgrade my-graph gaffer-docker/gaffer -f graph-metadata.yaml --reuse-values\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration/#graph-id","title":"Graph ID","text":"<p>Updating the ID may be simple or complicated depending on your store type. If you are using a Map or Federated store, you can just set the <code>graph.config.graphId</code> value like with the graph description. Though if you are using a Map Store, the graph will be emptied as a result.</p> <p>To safely update the Graph ID of an Accumulo instance you must change the gaffer users permissions to read and write to that table. To do that update the <code>graph-meta.yaml</code> file with the following contents:</p> <pre><code>graph:\nconfig:\ngraphId: \"MyGraph\"\ndescription: \"My Graph description\"\naccumulo:\nconfig:\nuserManagement:\nusers:\ngaffer:\npermissions:\ntable:\nMyGraph:\n- READ\n- WRITE\n- BULK_IMPORT\n- ALTER_TABLE\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration/#loading-new-graph-schema","title":"Loading new Graph Schema","text":"<p>The easiest way to deploy a schema file is to use helms <code>--set-file</code> option which lets you set a value from the contents of a file. For a Helm deployment to pick up changes to a Schema, you need to run a helm upgrade:</p> <pre><code>helm upgrade my-graph gaffer-docker/gaffer --set-file graph.schema.\"schema\\.json\"=./schema.json --reuse-values\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration/#change-accumulo-passwords","title":"Change Accumulo Passwords","text":"<p>When deploying the Accumulo Helm chart, the following values are set. If you are using the Gaffer Helm chart with the Accumulo integration, the values will be prefixed with \"accumulo\":</p> Name value default value Instance Secret <code>config.accumuloSite.\"instance.secret\"</code> \"DEFAULT\" Root password <code>config.userManagement.rootPassword</code> \"root\" Tracer user password <code>config.userManagement.users.tracer.password</code> \"tracer\" <p>When you deploy the Gaffer Helm chart with Accumulo, a \"gaffer\" user with a password of \"gaffer\" is used by default following the same pattern as the tracer user.</p> <p>So to install a new Gaffer with Accumulo store, create an <code>accumulo-passwords.yaml</code> with the following contents:</p> <pre><code>accumulo:\nenabled: true\nconfig:\naccumuloSite:\ninstance.secret: \"changeme\"\nuserManagement:\nrootPassword: \"changeme\"\nusers:\ntracer:\npassword: \"changme\"\ngaffer:\npassword: \"changeme\"\n</code></pre> <p>You can install the graph with:</p> <pre><code>helm install my-graph gaffer-docker/gaffer -f accumulo-passwords.yaml\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/running-on-kubernetes/","title":"Running Gaffer on Kubernetes","text":"<p>Gaffer's Open Container Initiative (OCI) images mean it is also possible to deploy via kubernetes to give an alternative scalable deployment. This guide will assume the reader is familiar with general usage of kubernetes, further reading is available in the official documentation.</p> <p>Note</p> <p>All the files needed to get started using Gaffer in Kubernetes are contained in the <code>kubernetes</code> sub-folder of the <code>gaffer-docker</code> repository.</p>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/running-on-kubernetes/#pre-requisites","title":"Pre-requisites","text":"<p>To deploy container images on a kubernetes cluster, you'll need the following:</p> <ul> <li>A Kubernetes cluster (local or remote)</li> <li>kubectl</li> <li>helm</li> <li>An ingress controller running (e.g. NGINX)</li> </ul> <p>You will also need to install a container management engine such as, <code>containerd</code> via Docker or Podman, to run and manage your containers.</p>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/running-on-kubernetes/#adding-the-gaffer-helm-charts","title":"Adding the Gaffer Helm Charts","text":"<p>Helm is a package manager for Kubernetes which uses a format called charts. A chart is a collection of files that describe a set of Kubernetes resources, essentially what images to run where and how much resources they can access.</p> <p>The Helm charts for Gaffer can be found in the following places in the <code>gaffer-docker</code> repository:</p> <ul> <li>Gaffer</li> <li>Accumulo</li> <li>HDFS</li> <li>JupyterHub with Gaffer Integrations</li> <li>Example Gaffer Graph of Road Traffic Data</li> </ul> <p>These charts can be accessed by cloning our repository or by using Helm to add the <code>gaffer-docker</code> repo:</p> <pre><code>helm repo add gaffer-docker https://gchq.github.io/gaffer-docker\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/running-on-kubernetes/#using-custom-images","title":"Using Custom Images","text":"<p>You may wish to create custom images that have configuration or additional libraries baked in.</p> <p>The Docker deployment guide has information on how to create new images but you will need a way of making the custom images visible to the Kubernetes cluster. Once visible you can switch them out.</p> <p>Create a <code>custom-images.yaml</code> file with the following contents:</p> <pre><code># Add custom REST API image\napi:\nimage:\nrepository: custom-rest\ntag: latest\n# Add custom Accumulo image\naccumulo:\nimage:\nrepository: custom-gaffer-accumulo\ntag: latest\n</code></pre> <p>To switch them run:</p> <pre><code>helm upgrade my-graph gaffer-docker/gaffer -f custom-images.yaml --reuse-values\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/simple-deployment/","title":"Creating a Simple Deployment","text":"<p>This guide will describe how to deploy a simple graph on a Kubernetes cluster with the minimum configuration. It is assumed you have read the previous page to get an overview of running Gaffer on Kubernetes.</p> <p>To start with, you should add the Gaffer Docker repo to your Helm repos. This will save the need for cloning this Git repository. If you have already done this you can skip this step.</p> <pre><code>helm repo add gaffer-docker https://gchq.github.io/gaffer-docker\n</code></pre> <p>The next step is to chose a Store type for the deployment there is a handy overview of each type in the quickstart to help you decide on this.</p>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/simple-deployment/#deploy-using-a-map-store","title":"Deploy using a Map Store","text":"<p>A Map Store is just an in-memory store that can be used for demos or if you need something small scale short-term. It is our default store so there is no need for any extra configuration.</p> <p>You can install a Map Store by just running:</p> <pre><code>helm install my-graph gaffer-docker/gaffer\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/simple-deployment/#deploy-using-an-accumulo-store","title":"Deploy using an Accumulo Store","text":"<p>If you want to deploy an Accumulo Store with your graph, it is relatively easy to do so with some small additional configuration. Create a file called <code>accumulo.yaml</code> and add the following:</p> <pre><code>accumulo:\nenabled: true\n</code></pre> <p>By default, the Gaffer user is created with a password of \"gaffer\" the <code>CREATE_TABLE</code> system permission with full access to the simpleGraph table which is coupled to the <code>graphId</code>.</p> <p>Warning</p> <p>All the default Accumulo passwords are in place so if you were to deploy this in production, you should consider changing the default Accumulo passwords.</p> <p>You can stand up an Accumulo store by running:</p> <pre><code>helm install my-graph gaffer-docker/gaffer -f accumulo.yaml\n</code></pre>"},{"location":"administration-guide/gaffer-deployment/kubernetes-guide/simple-deployment/#deploy-using-a-federated-store","title":"Deploy using a Federated Store","text":"<p>If you want to deploy a Federated Store, all that you really need to do is set the <code>store.properties</code>. To do this add the following to a <code>federated.yaml</code> file:</p> <pre><code>graph:\nstoreProperties:\ngaffer.store.class: uk.gov.gchq.gaffer.federatedstore.FederatedStore\ngaffer.store.properties.class: uk.gov.gchq.gaffer.federatedstore.FederatedStoreProperties\ngaffer.serialiser.json.modules: uk.gov.gchq.gaffer.sketches.serialisation.json.SketchesJsonModules\n</code></pre> <p>The addition of the <code>SketchesJsonModules</code> is just to ensure that if the Federated Store was connecting to a store which used sketches, they could be rendered nicely in json.</p> <p>We can create the graph with:</p> <pre><code>helm install federated gaffer-docker/gaffer -f federated.yaml\n</code></pre> <p>Note</p> <p>For information on how to configure the deployed graph further please see the Gaffer configuration guides.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/","title":"Accumulo Store","text":""},{"location":"administration-guide/gaffer-stores/accumulo-store/#introduction","title":"Introduction","text":"<p>Gaffer contains a store implemented using Apache Accumulo. This offers the following functionality:</p> <ul> <li>Scalability to large volumes of data</li> <li>Resilience to failures of hardware</li> <li>The ability to store any properties (subject to serialisers being provided if Gaffer is not aware of the objects)</li> <li>User-configured persistent aggregation of properties for the same vertices and edges</li> <li>Flexibly query-time filtering, aggregation and transformation</li> <li>Integration with Apache Spark to allow Gaffer data stored in Accumulo to be analysed as either an RDD or a Dataframe</li> </ul>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#what-is-hadoopaccumulo","title":"What is Hadoop/Accumulo?","text":"<p>Apache Hadoop is an open-source software framework used for distributed storage and processing of large datasets. Hadoop is designed to handle various types of data, including structured, semi-structured, and unstructured data. It is a highly scalable framework that allows users to add nodes to the cluster as needed.</p> <p>Hadoop has two main components: Hadoop Distributed File System (HDFS) and MapReduce. HDFS is a distributed file system that provides high-throughput access to data. MapReduce is a programming model used for processing large datasets in parallel.</p> <p>Accumulo is built on top of the HDFS to provide a key-value store with all the same scalability and robustness of Hadoop.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#use-cases","title":"Use cases","text":"<p>Gaffer's <code>AccumuloStore</code> is particularly well-suited to graphs where the properties on vertices and edges are formed by aggregating interactions over time windows.</p> <p>For example, suppose that we want to produce daily summaries of the interactions between vertices, e.g. on January 1st 2016, 25 interactions between A and B were observed, on January 2nd, 10 interactions between A and B were observed. Gaffer allows this data to be continually updated (e.g. if a new interaction between A and B is observed on January 2nd then an edge for January 2nd between A and B with a count of 1 can be inserted and this will automatically be merged with the existing edge and the count updated). This ability to update the properties without having to perform a query, then an update, then a put, is important for scaling to large volumes.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#accumulo-set-up","title":"Accumulo set up","text":"<p>As of Gaffer 2.0, Accumulo 2.0.1 is supported. Accumulo 1.x.x versions can also be used (by using artifacts with the \"legacy\" classifier). Gaffer has been tested with Accumulo version 1.9.0 &amp; previously 1.8.1. It should also work with any of the 1.8.x &amp; 1.9.x versions of Accumulo as well.</p> <p>Gaffer can also be used with a <code>MiniAccumuloCluster</code>. This is an Accumulo cluster that runs in one JVM. To set up a <code>MiniAccumuloCluster</code> with Gaffer support, see the mini-accumulo-cluster project in the Gaffer tools repository.</p> <p>All real applications of Gaffer's <code>AccumuloStore</code> will use an Accumulo cluster running on a real Hadoop cluster consisting of multiple servers. Instructions on setting up an Accumulo cluster can be found in Accumulo's User Manual.</p> <p>To use Gaffer's Accumulo store, it is necessary to add a jar file to the class path of all of Accumulo's tablet servers. This jar contains Gaffer code that runs inside Accumulo's tablet servers to provide functionality such as aggregation and filtering at ingest and query time.</p> <p>The Accumulo store iterators.jar required can be downloaded from maven central. It follows the naming scheme <code>accumulo-store-{version}-iterators.jar</code>, e.g. <code>accumulo-store-2.0.0-iterators.jar</code>. This jar file will then need to be installed on Accumulo's tablet servers by adding it to the classpath. For Accumulo 1.x.x it can be placed in the <code>lib/ext</code> folder within the Accumulo distribution on each tablet server, Accumulo should load this jar file without needing to be restarted. For Accumulo 2.x.x this dynamic reloading classpath directory functionality has been deprecated. The jar can instead be put into the <code>lib</code> directory and Accumulo restarted. The <code>lib</code> directory can also be used with Accumulo 1.x.x and may be useful if you see error messages due to classes not being found and restarting Accumulo doesn't fix the problem.</p> <p>In addition, if you are using custom serialisers, properties or functions, then a jar of these should be created and installed into the same location as the Gaffer iterators.</p> <p>At this stage you have installed Gaffer into your Accumulo cluster. It is now ready for loading data.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#properties-file","title":"Properties file","text":"<p>The next stage is to create a properties file that Gaffer will use to instantiate a connection to your Accumulo cluster. This requires the following properties:</p> <ul> <li><code>gaffer.store.class</code>: The name of the Gaffer class that implements this store. For a full or pre-existing mini Accumulo cluster this should be <code>uk.gov.gchq.gaffer.accumulostore.AccumuloStore</code>. To use the <code>MiniAccumuloStore</code> in unit tests, it should be <code>uk.gov.gchq.gaffer.accumulostore.MiniAccumuloStore</code>.</li> <li><code>gaffer.store.properties.class</code>: This is the name of the Gaffer class that contains the properties for this store. This should always be <code>uk.gov.gchq.gaffer.accumulostore.AccumuloProperties</code>.</li> <li><code>accumulo.instance</code>: The instance name of your Accumulo cluster.</li> <li><code>accumulo.zookeepers</code>: A comma separated list of the Zookeeper servers that your Accumulo cluster is using. Each server should specify the hostname and port separated by a colon, i.e. host:port.</li> <li><code>accumulo.user</code>: The name of your Accumulo user.</li> <li><code>accumulo.password</code>: The password for the above Accumulo user.</li> </ul> <p>A typical properties file will look like:</p> <pre><code>gaffer.store.class=gaffer.accumulostore.AccumuloStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\naccumulo.instance=myInstance\naccumulo.zookeepers=server1.com:2181,server2.com:2181,server3.com:2181\naccumulo.user=myUser\naccumulo.password=myPassword\n</code></pre> <p>When using Kerberos authentication, the username and password are not used, alternative properties are used to configure Kerberos. See the Accumulo Kerberos guide for more information.</p> <p>Note that if the graph does not exist, it will be created when a <code>Graph</code> object is instantiated using these properties, the schema and the graph ID (given when the graph is created in Java or via a <code>graphConfig.json</code>). In this case the user must have permission to create a table. If the graph already exists (based on the graph ID) then the user simply needs permission to read the table. For information about protecting data via setting the visibility, see Visibilty.</p> <p>Other properties can be specified in this file. For details see Advanced Properties. To improve query performance, see the property <code>accumulo.batchScannerThreads</code>. Increasing this from the default value of 10 can significantly increase the rate at which data is returned from queries.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#inserting-data","title":"Inserting data","text":"<p>There are two ways of inserting data into a Gaffer <code>AccumuloStore</code>: continuous load, and bulk import. To ingest large volumes of data, it is recommended to first set appropriate split points on the table. The split points represent how Accumulo partitions the data into multiple tablets. This is best done for continuous load, and essential for bulk imports.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#setting-appropriate-split-points","title":"Setting appropriate split points","text":"<p>The <code>SampleDataForSplitPoints</code> operation can be used to produce a file of split points that can then be used to set the split points on the table. It runs a MapReduce job that samples a percentage of the data, which is sent to a single reducer. That reducer simply writes the sorted data to file. This file is then read and sampled to produce split points that split the data into approximately equally sized partitions.</p> <p>To run this operation, use:</p> <p><pre><code>SampleDataForSplitPoints sample = new SampleDataForSplitPoints.Builder()\n.addInputPath(inputPath)\n.splitsFile(splitsFilePath)\n.outputPath(outputPath)\n.jobInitialiser(jobInitialiser)\n.validate(true)\n.proportionToSample(0.01F)\n.mapperGenerator(myMapperGeneratorClass)\n.build();\ngraph.execute(sample, new User());\n</code></pre> where:</p> <ul> <li><code>inputPath</code> is a string giving a directory in HDFS containing your data</li> <li><code>splitsFilePath</code> is a string giving a file in HDFS where the output of the operation will be stored (this file should not exist before the operation is run)</li> <li><code>outputPath</code> is a string giving a directory in HDFS where the output of the MapReduce job will be stored</li> <li><code>jobInitialiser</code> is an instance of the <code>JobInitialiser</code> interface that is used to initialise the MapReduce job. If your data is in text files then you can use the built-in <code>TextJobInitialiser</code>. An <code>AvroJobInitialiser</code> is also provided</li> <li>The <code>true</code> option in the <code>validate</code> method indicates that every element will be validated</li> <li>The <code>0.01F</code> option in the <code>proportionToSample</code> method causes 1% of the data to be sampled. This is the amount of data that will be sent to the single reducer, so it should be small enough for a single reducer to handle</li> <li><code>myMapperGeneratorClass</code> is a <code>Class</code> that extends the <code>MapperGenerator</code> interface. This is used to generate a <code>Mapper</code> class that is used to convert your data into <code>Element</code>s. Gaffer contains two built-in generators: <code>TextMapperGenerator</code> and <code>AvroMapperGenerator</code>. The former requires your data to be stored in text files in HDFS; the latter requires your data to be stored in Avro files</li> </ul> <p>To apply these split points to the table, run:</p> <pre><code>SplitStoreFromFile splitStore = new SplitStoreFromFile.Builder()\n.inputPath(splitsFilePath)\n.build();\ngraph.execute(splitStore, new User());\n</code></pre> <p>or from an Iterable:</p> <pre><code>SplitStoreFromIterable splitStore = new SplitStoreFromIterable.Builder()\n.input(splits) // Base64 encoded strings\n.build();\ngraph.execute(splitStore, new User());\n</code></pre>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#continuous-load","title":"Continuous load","text":"<p>This is done by using the <code>AddElements</code> operation and is as simple as the following where <code>elements</code> is a Java <code>Iterable</code> of Gaffer <code>Element</code>s that match the schema specified when the graph was created:</p> <pre><code>AddElements addElements = new AddElements.Builder()\n.elements(elements)\n.build();\ngraph.execute(addElements, new User());\n</code></pre> <p>Note that here <code>elements</code> could be a never-ending stream of <code>Element</code>s and the above command will continuously ingest the data until it is cancelled or the stream stops.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#bulk-import","title":"Bulk import","text":"<p>To ingest data via bulk import, a MapReduce job is used to convert your data into files of Accumulo key-value pairs that are pre-sorted to match the distribution of data in Accumulo. Once these files are created, Accumulo moves them from their current location in HDFS to the correct directory within Accumulo's data directory. The data in them is then available for query immediately.</p> <p>Gaffer provides code to make this as simple as possible. The <code>AddElementsFromHdfs</code> operation is used to bulk import data. See AddElementsFromHdfs for examples.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#visibility","title":"Visibility","text":"<p>Gaffer can take advantage of Accumulo's built-in fine-grained security to ensure that users only see data that they have authorisation to. This is done by specifying a \"visibilityProperty\" in the schema. This is a string that tells Accumulo which key in the <code>Properties</code> on each <code>Element</code> should be used for the visibility. The value of this property will be placed in the column visibility in each Accumulo key. This means that a user must have authorisations corresponding to that visibility in order to see the data.</p> <p>If no \"visibilityProperty\" is specified then the column visibility is empty which means that anyone who has read access to the table can view it.</p> <p>See the visibility walkthrough in the Dev Guide for an example of how properties can be aggregated over different visibilities at query time.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#timestamp","title":"Timestamp","text":"<p>Accumulo keys have a timestamp field. The user can specify which property is used for this by setting \"timestampProperty\" in the schema's config to the name of the property. If the timestamp is not set then it will be populated automatically:</p> <ul> <li>Constant value - aggregated groups</li> <li>Random number - non-aggregated groups</li> </ul> <p>Setting the timestamp yourself is an advanced feature and is not recommended as it can cause significant issues if it is not populated correctly.</p> <p>If you choose to set timestampProperty, the property will be aggregated with 'Max' - you cannot override this.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#validation-and-age-off-of-data","title":"Validation and age-off of data","text":"<p>In production systems where data is continually being ingested, it is necessary to periodically remove data so that the total size of the graph does not become too large. The <code>AccumuloStore</code> allows the creator of the graph to specify custom logic to decide what data should be removed. This logic is applied during compactions, so that the data is permanently deleted. It is also applied during queries so that even if a compaction has not happened recently, the data that should be removed is still hidden from the user.</p> <p>A common approach is simply to delete data that is older than a certain date. In this case, within the properties on each element there will be a time window specified. For example, the properties may contain a \"day\" property, and the store may be configured so that once the day is more than one year ago, it will be deleted. This can be implemented as follows:</p> <ul> <li>Each element has a property called, for example, \"day\", which is a <code>Long</code> which contains the start of the time window. Every time an element is observed this property is set to the previous midnight expressed in milliseconds since the epoch.</li> <li>In the schema the validation of this property is expressed as follows: <pre><code>\"long\": {\n\"class\": \"java.lang.Long\",\n\"validateFunctions\": [\n{\n\"function\": {\n\"class\": \"gaffer.function.simple.filter.AgeOff\",\n\"ageOffDays\": \"100\"\n}\n}\n]\n}\n</code></pre></li> <li>Then data will be aged-off whenever it is more than 100 days old.</li> </ul>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#key-packages","title":"Key-packages","text":"<p>In Gaffer's <code>AccumuloStore</code> a key-package contains all the logic for:</p> <ul> <li>Converting <code>Element</code>s into Accumulo key-value pairs, and vice-versa</li> <li>Generating ranges of Accumulo keys that correspond to the seeds of a query</li> <li>Creating the iterator settings necessary to perform the persistent aggregation that happens at compaction time, and the filtering and aggregation that happens during queries</li> <li>Creating the <code>KeyFunctor</code> used to configure the Bloom filters in Accumulo</li> </ul> <p>A key-package is an implementation of the <code>AccumuloKeyPackage</code> interface. Gaffer provides two implementations: <code>ByteEntityKeyPackage</code> and <code>ClassicKeyPackage</code>. These names are essentially meaningless. The \"classic\" in <code>ClassicKeyPackage</code> refers to the fact that it is similar to the implementation in the first version of Gaffer (known as \"Gaffer1\").</p> <p>Both key-packages should provide good performance for most use-cases. There will be slight differences in performance between the two for different types of query. The <code>ByteEntityKeyPackage</code> will be slightly faster if the query specifies that only out-going or in-coming edges are required. The <code>ClassicKeyPackage</code> will be faster when querying for all edges involving a pair of vertices. See the Key-Packages part of the Accumulo Store Implementation page for more information about these key-packages.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#advanced-properties","title":"Advanced properties","text":"<p>The following properties can also be specified in the properties file. If they are not specified, then sensible defaults are used.</p> <ul> <li><code>gaffer.store.accumulo.keypackage.class</code>: The full name of the class to be used as the key-package. By default <code>ByteEntityKeyPackage</code> will be used.</li> <li><code>accumulo.batchScannerThreads</code>: The number of threads to use when <code>BatchScanner</code>s are created to query Accumulo. The default value is 10.</li> <li><code>accumulo.entriesForBatchScanner</code>: The maximum number of ranges that should be given to an Accumulo <code>BatchScanner</code> at any one time. The default value is  50000.</li> <li><code>accumulo.clientSideBloomFilterSize</code>: The size in bits of the Bloom filter used in the client during operations such as <code>GetElementsBetweenSets</code>. The default value is 838860800, i.e. 100MB.</li> <li><code>accumulo.falsePositiveRate</code>: The desired rate of false positives for Bloom filters that are passed to an iterator in operations such as <code>GetElementsBetweenSets</code>. The default value is 0.0002.</li> <li><code>accumulo.maxBloomFilterToPassToAnIterator</code>: The maximum size in bits of Bloom filters that will be created in an iterator on Accumulo's tablet server during operations such as <code>GetElementsBetweenSets</code>. By default this will be 8388608, i.e. 1MB.</li> <li><code>accumulo.maxBufferSizeForBatchWriterInBytes</code>: The size of the buffer in bytes used in Accumulo <code>BatchWriter</code>s when data is being ingested. The default value is 1000000.</li> <li><code>accumulo.maxTimeOutForBatchWriterInMilliseconds</code>: The maximum latency used in Accumulo <code>BatchWriter</code>s when data is being ingested. Th default value is 1000, i.e. 1 second.</li> <li><code>accumulo.numThreadsForBatchWriter</code>: The number of threads used in Accumulo <code>BatchWriter</code>s when data is being ingested. The default value is 10.</li> <li><code>accumulo.file.replication</code>: The number of replicas of each file in tables created by Gaffer. If this is not set then your general Accumulo setting will apply, which is normally the same as the default on your HDFS instance.</li> <li><code>gaffer.store.accumulo.enable.validator.iterator</code>: This specifies whether the validation iterator is applied. The default value is true.</li> <li><code>accumulo.namespace</code>: The namespace to use for the table in Accumulo. The default is to use the default Accumulo namespace, which is the empty string.</li> </ul>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#migration","title":"Migration","text":"<p>The Accumulo Store also provides a utility AddUpdateTableIterator to help with migrations - updating to new versions of Gaffer or updating your schema.</p> <p>The following changes to your schema are allowed: - add new groups - add new non-groupBy properties (including visibility and timestamp), but they must go after the other properties - rename properties - change aggregators (your data may become inconsistent as any elements that were aggregated on ingest will not be updated.) - change validators - change descriptions</p> <p>But, you cannot do the following: - rename groups - remove any properties (groupBy, non-groupBy, visibility or timestamp) - add new groupBy properties - reorder any of the properties. In the Accumulo store we don't use any property names, we just rely on the order the properties are defined in the schema. - change the way properties or vertices are serialised - i.e don't change the serialisers. - change which properties are groupBy</p> <p>Please note, that the validation functions in the schema can be a bit dangerous. If an element is found to be invalid then the element will be permanently deleted from the table. So, be very careful when making changes to your schema that you don't accidentally make all your existing elements invalid as you will quickly realise all your data has been deleted. For example, if you add a new property 'prop1' and set the validateFunctions to be a single Exists predicate. Then when that Exists predicate is applied to all of your existing elements, those old elements will fail validation and be removed.</p> <p>To carry out the migration you will need the following:</p> <ul> <li>your schema in 1 or more json files.</li> <li><code>store.properties</code> file contain your accumulo store properties</li> <li>a jar-with-dependencies containing the Accumulo Store classes and any of your custom classes. If you don't have any custom classes then you can just use the <code>accumulo-store-[version]-utility.jar</code>. Otherwise you can create one by adding a build profile to your maven pom: <pre><code>&lt;build&gt;\n&lt;plugins&gt;\n&lt;plugin&gt;\n&lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;\n&lt;version&gt;${shade.plugin.version}&lt;/version&gt;\n&lt;executions&gt;\n&lt;execution&gt;\n&lt;id&gt;utility&lt;/id&gt;\n&lt;phase&gt;package&lt;/phase&gt;\n&lt;goals&gt;\n&lt;goal&gt;shade&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;configuration&gt;\n&lt;shadedArtifactAttached&gt;true\n                        &lt;/shadedArtifactAttached&gt;\n&lt;shadedClassifierName&gt;utility\n                        &lt;/shadedClassifierName&gt;\n&lt;/configuration&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n&lt;/plugin&gt;\n&lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre></li> </ul> <p>If you have existing data, then before doing any form of upgrade or change to your table we strongly recommend using the accumulo shell to clone the table so you have a backup so you can easily restore to that version if things go wrong. Even if you have an error like the one above where all your data is deleted in your table you will still be able to quickly revert back to your backup. Cloning a table in Accumulo is very simple and fast (it doesn't actually copy the data). If you have a table called 'table1', you can do something like the following in the Accumulo shell:</p> <pre><code>&gt; offline -t table1\n&gt; clone table table1 table1-backup\n&gt; offline -t table1-backup\n\n# Do your upgrades\n#   - deploy new gaffer jars to Accumulo's class path on each node in your cluster\n#   - run the AddUpdateTableIterator class to update table1\n&gt; online -t table1\n\n# Check table1 is still healthy:\n#   - run a query and check the iterators are successfully aggregating and filtering elements correctly.\n&gt; droptable -t table1-backup\n</code></pre> <p>You will need to run the AddUpdateTableIterator utility providing it with your graphId, schema and store properties. If you run it without any arguments it will tell you how to use it.</p> <pre><code>java -cp [path to your jar-with-dependencies].jar uk.gov.gchq.gaffer.accumulostore.utils.AddUpdateTableIterator\n</code></pre>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#troubleshooting","title":"Troubleshooting","text":""},{"location":"administration-guide/gaffer-stores/accumulo-store/#data-hasnt-appeared-after-i-performed-a-bulk-import","title":"Data hasn't appeared after I performed a bulk import","text":"<p>Accumulo's UI often shows that there are zero entries in a table after a bulk import. This is generally because Accumulo does not know how many entries have been added until it has performed a major compaction. Open the Accumulo shell, change to the table you specified in your Accumulo properties file, and type <code>compact</code>. You should see compactions starting for that table in Accumulo's UI, and the number of entries should then start to increase.</p> <p>If this has not solved the problem, look at the logs of your bulk import MapReduce job and check that the number of entries output by both the Mapper and the Reducer was positive.</p> <p>Next check that the elements you generate pass your validation checks.</p> <p>If all the above fails, try inserting a small amount of data using <code>AddElements</code> to see whether the problem is your bulk import job or your data generation.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#queries-result-in-no-data","title":"Queries result in no data","text":"<p>Check that you have the correct authorisations to see the data you inserted. Check with the administrator of your Accumulo cluster.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#spark-operations-are-slow","title":"Spark operations are slow","text":"<p>Try using a batch scanner to read the data from the tablet server. To enable this for the <code>GetRDDOfAllElements</code> or <code>GetJavaRDDOfAllElements</code> operation, set the <code>gaffer.accumulo.spark.rdd.use_batch_scanner</code> option to true. <code>GetRDDOfElements</code> and <code>GetJavaRDDOfElements</code> use a batch scanner by default.</p> <p>If you still don't see a significant improvement, try increasing the value of the <code>table.scan.max.memory</code> setting in Accumulo for your table.</p>"},{"location":"administration-guide/gaffer-stores/accumulo-store/#error-running-accumulo-store-integration-tests","title":"Error running accumulo-store Integration Tests","text":"<p>If you are getting <code>error: Error BAD_AUTHORIZATIONS for user root on table integrationTestGraph(ID:1l)</code> this means you have correctly set your user (in this case user 'root') in store.properties as <code>accumulo.user=root</code>, however you have not set the correct scan authorisations for the user 'root' required by the integration tests.</p> <p>If you have the accumulo cluster shell running, you can set these scan auths directly from the shell (as root user) by entering the following command:</p> <pre><code>setauths -u root -s vis1,vis2,publicVisibility,privateVisibility,public,private\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/","title":"Federated Store","text":"<p>The Federated Store is a Gaffer store which forwards operations to a collection of sub-graphs and returns a single response as though a single graph were queried.</p>"},{"location":"administration-guide/gaffer-stores/federated-store/#introduction","title":"Introduction","text":"<p>The Federated Store facilitates querying of multiple Gaffer graphs through a single endpoint/instance, and the federation of queries across many graphs at once - with results automatically merged. Unlike the Map or Accumulo Store, the Federated Store doesn't use a schema of its own. This is because it represents a graph of graphs.</p> <p>The Federated Store graph is a collection of other graphs. These sub-graphs can be any kind of Gaffer graph, including further federated graphs. There are special Gaffer Operations for adding and removing graphs to/from the collection. It's also possible to include access restrictions on sub-graphs. When adding a new sub-graph, the schema and store properties for this new graph are supplied to the Federated Store directly.</p> <p>The Federated Store can be used as a single entry point to a set of multiple different Gaffer graphs, using different store types and across different instances/hosts (via Proxy Stores).</p>"},{"location":"administration-guide/gaffer-stores/federated-store/#create-a-federated-store","title":"Create a Federated Store","text":"<p>To create a Federated Store, you need to initialise the store/graph with a <code>graphId</code> and a properties file. See the Graph page for detailed info on this.</p> <p>Optionally you can add a Graph Library to store Schemas and Store Properties associated with the Federated Store sub-graphs. You can also add a Cache Service within the Store Properties, for example this will be required if you want to use Named Operations.</p>"},{"location":"administration-guide/gaffer-stores/federated-store/#using-the-rest-api","title":"Using the REST API","text":"<p>When using the REST API, configuration is done with the files <code>graphId.json</code> and <code>store.properties</code>. Minimal examples are shown below.</p> graphId.json<pre><code>{\n\"graphId\": \"federatedGraph\",\n\"library\": {\n\"class\": \"uk.gov.gchq.gaffer.store.library.HashMapGraphLibrary\"\n}\n}\n</code></pre> store.properties<pre><code>gaffer.store.class=uk.gov.gchq.gaffer.federatedstore.FederatedStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.federatedstore.FederatedStoreProperties\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/#using-the-java-api","title":"Using the Java API","text":"<p>A <code>Graph</code> Object containing this Federated Store graph can be created as follows:</p> <pre><code>final Graph federatedGraph = new Graph.Builder()\n.config(new GraphConfig.Builder()\n.graphId(\"federatedGraph\")\n.library(graphLibrary) // (1)!\n.build())\n.storeProperties(new FederatedStoreProperties())\n.build();\n</code></pre> <ol> <li>See GraphLibrary Javadoc for more info.</li> </ol>"},{"location":"administration-guide/gaffer-stores/federated-store/#federated-store-properties","title":"Federated Store Properties","text":"<p>In addition to the standard Store Properties, there are some additional properties specific to this store:</p> <ul> <li><code>gaffer.federatedstore.isPublicAllowed</code>: Controls if adding graphs with public access is allowed. True by default.</li> <li><code>gaffer.federatedstore.customPropertiesAuths</code>: String containing auths for allowing users to use store properties other than those contained in a graph library. Unset by default, allowing all users to do this.</li> <li><code>gaffer.federatedstore.storeConfiguredMergeFunctions</code>: Path to file containing merge function definitions to use to override the default merge functions.</li> <li><code>gaffer.federatedstore.storeConfiguredGraphIds</code>: Path to file containing Graph IDs to be queried when a user doesn't target specific graphs. By default, all graphs a user can access are queried.</li> </ul> Setting these properties with the Java API <pre><code>final FederatedStoreProperties exampleFederatedStoreProperties = new FederatedStoreProperties();\nexampleFederatedStoreProperties.setGraphsCanHavePublicAccess(false);\nexampleFederatedStoreProperties.setCustomPropertyAuths(\"Auth1, Auth2, Auth3\");\nexampleFederatedStoreProperties.setStoreConfiguredMergeFunctions(\"path/to/mergefunctionDefinitions.json\");\nexampleFederatedStoreProperties.setStoreConfiguredGraphIds(\"path/to/defaultGraphIds.json\");\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/#setting-default-merge-functions","title":"Setting default Merge Functions","text":"<p>Merge Functions control how results from different sub-graphs in a Federated Store are merged together. If you want to override the default behaviour and use different merge functions, then you can do this using <code>storeConfiguredMergeFunctions</code>. This property takes a path to a JSON file containing definitions of how to override the default merge functions.</p> <p>The example file given below configures the <code>GetElements</code> and <code>GetAllElements</code> Operations to use <code>ConcatenateMergeFunction</code> instead of the default <code>ApplyViewToElementsFunction</code>.</p> mergefunctionDefinitions.json<pre><code>{\n\"configuredMergeFunctions\": {\n\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\": {\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n},\n\"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\": {\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n}\n}\n}\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/#setting-default-query-graph-ids","title":"Setting default query Graph IDs","text":"<p>By default, when a user submits a query to a Federated Store without using a Federated Operation, their query is federated across all graphs they are permitted to read (or write, depending on the query). If the Federated Store contains many graphs, this might not be desirable as a default - especially if the graphs do not have compatible schemas. It might also be useful for an administrator to configure a defined list of graph IDs to use with these kinds of query, e.g. where a certain primary graph should always be treated as the default for users.</p> <p>The default graphs to query when a Federated Operation is not used can be set using <code>storeConfiguredGraphIds</code>. This property takes a path to a JSON file containing a list of Graph IDs to use as the defaults.</p> <p>The example file given below configures the Federated Store to federate queries across the <code>GraphA</code> and <code>GraphB</code> graphs by default when a Federated Operation is not used.</p> defaultGraphIds.json<pre><code>[\n\"GraphA\", \"GraphB\"\n]\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/#adding-graphs","title":"Adding Graphs","text":"<p>To add a graph to a Federated Store you use the <code>AddGraph</code> operation. To load a graph you need to provide:</p> <ul> <li>Graph ID</li> <li>Graph Schema</li> <li>Graph Properties</li> </ul> <p>Duplicate Graph IDs</p> <p>You can't add a graph with an ID which is already in use, you will need to explicitly remove the old graph first.</p> <p>A Schema &amp; Properties are not required if <code>parentSchemaId</code>/<code>parentPropertiesId</code> are instead used to retrieve this information from a Graph Library.</p> <p>You can limit user access to when adding sub-graphs, see Limiting Access. User specified store properties are allowed by default, but this can be disallowed if desired, see limit custom properties.</p> AddGraph Operation<pre><code>{\n\"class\" : \"AddGraph\",\n\"graphId\" : \"AnotherGraph\",\n\"schema\" : {\n... Schema in JSON format\n},\n\"storeProperties\" : {\n... Store Properties\n}\n}\n</code></pre> AddGraph with the Java API <pre><code>AddGraph addAnotherGraph = new AddGraph.Builder()\n.graphId(\"AnotherGraph\")\n.schema(mySchema)\n.storeProperties(myStoreProperties)\n.build();\nfederatedGraph.execute(addAnotherGraph, user);\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/#removing-graphs","title":"Removing Graphs","text":"<p>To remove a graph from a Federated Store, you only need to know the graph's ID. Removing a graph does not delete it, it only removes it from the scope of the store. A removed graph can be re-added again later, assuming the same graph ID is used and the configuration for the underlying store and any associated storage is unchanged. Graphs can only be removed by users with write access or by an administrator (user with admin auths).</p> RemoveGraph Operation<pre><code>{\n\"class\" : \"RemoveGraph\",\n\"graphId\" : \"AnotherGraph\"\n}\n</code></pre> RemoveGraph with the Java API <pre><code>RemoveGraph removeGraph = new RemoveGraph.Builder()\n.graphId(\"AnotherGraph\")\n.build();\nfederatedGraph.execute(removeGraph, user);\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/#removing-graphs-and-deleting-data","title":"Removing Graphs and Deleting Data","text":"<p>Remove a graph and deleting the underlying data is done with the <code>RemoveGraphAndDeleteAllData</code> operation. Other than also deleting data, this operation is identical to <code>RemoveGraph</code>. Gaffer stores are not required to support this operation, if it's not supported an error will be raised. It is supported by and has been tested with the Accumulo Store.</p> RemoveGraphAndDeleteAllData Operation<pre><code>{\n\"class\" : \"RemoveGraphAndDeleteAllData\",\n\"graphId\" : \"AnotherGraph\"\n}\n</code></pre> RemoveGraphAndDeleteAllData with the Java API <pre><code>RemoveGraph removeGraphAndDeleteAllData = new RemoveGraphAndDeleteAllData.Builder()\n.graphId(\"AnotherGraph\")\n.build();\nfederatedGraph.execute(removeGraphAndDeleteAllData, user);\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/#get-graphids","title":"Get GraphIds","text":"<p>To get a list of all the sub-graphs within a Federated Store you can perform the following <code>GetAllGraphIds</code> operation.</p> GetAllGraphIds Operation<pre><code>{\n\"class\" : \"GetAllGraphIds\"\n}\n</code></pre> GetAllGraphIds with the Java API <pre><code>final GetAllGraphIds getAllGraphIDs = new GetAllGraphIds();\nIterable&lt;? extends String&gt; graphIds = federatedGraph.execute(getAllGraphIDs, user);\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/#performing-operations","title":"Performing Operations","text":"<p>Running operations against a Federated Store is much the same as running operations against any other store. Behind the scenes operation chains are sent to the sub-graphs to be executed, with the responses then merged together inside the Federated Store.</p> <p>Special Case</p> <p><code>AddElements</code> operations are a special case, these only add elements to sub-graphs where the edge or entity groupId is known by that sub-graph.</p> <p>Potential Duplication</p> <p>When adding elements, if 2 sub-graphs contain the same group in the schema then the elements will be added to both of the sub-graphs. Subsequently, running a <code>GetElements</code> operation would then return the same element from both sub-graph, resulting in duplicates. It is advised to keep groups to within one sub-graph or limit federated queries to one of the graphs.</p> <p>Selecting which sub-graph(s) to federate operations across is done using the <code>FederatedOperation</code>. Running operations against a Federated Store without using this automatically runs them over all graphs the user can view, unless the <code>storeConfiguredGraphIds</code> property has been set.</p> <p>See the <code>FederatedOperation</code> page for details and examples of using this operation.</p>"},{"location":"administration-guide/gaffer-stores/federated-store/#skipping-failed-execution","title":"Skipping Failed Execution","text":"<p>If operation execution against one of the graphs fails, an <code>OperationException</code> will be thrown. Unless the operation has the option <code>gaffer.federatedstore.operation.skipFailedFederatedStoreExecute</code> set to <code>true</code>. In this situation that graph is skipped and the Federated Store continues with the remaining graphs.</p> Skipping failed execution example<pre><code>{\n\"class\" : \"GetAllElements\",\n\"options\" : {\n\"gaffer.federatedstore.operation.skipFailedFederatedStoreExecute\" : \"true\"\n}\n}\n</code></pre> Skipping failed execution example with the Java API <pre><code>GetAllElements skipFailedExecution = new GetAllElements.Builder()\n.option(FederatedStoreConstants.KEY_SKIP_FAILED_FEDERATED_STORE_EXECUTE, \"true\")\n.build();\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/#restricting-graph-access","title":"Restricting Graph Access","text":"<p>If you have many graphs and different groups of users, then you may wish to limit user access to some sub-graphs. This can be done by either using authorisations, or configurable read and write access predicates. These are specified at the time of adding the graph to the Federated Store.</p>"},{"location":"administration-guide/gaffer-stores/federated-store/#publicprivate-access","title":"Public/Private Access","text":"<p>Within the <code>AddGraph</code> operation, explicitly setting the parameter <code>isPublic</code> as true grants access to all users, regardless of any authorisations used. By default, the <code>isPublic</code> parameter is false.</p> <p>If <code>isPublic</code> is false and authorisations are not specified, then the graph will be private to the user who added it and no other users will be able to access it. Adding authorisations will open the graph to all users with those authorisations, not just the user who create it.</p> AddGraph Operation allowing public access<pre><code>{\n\"class\" : \"AddGraph\",\n\"graphId\" : \"publicGraph\",\n\"graphAuths\" : [ \"Auth1\" ],\n\"isPublic\" : true,\n\"options\" : null,\n\"parentPropertiesId\" : \"mapStore\",\n\"parentSchemaIds\" : [ \"exampleId\" ]\n}\n</code></pre> AddGraph allowing public access with the Java API <pre><code>AddGraph publicGraph = new AddGraph.Builder()\n.graphId(\"publicGraph\")\n.parentSchemaIds(Lists.newArrayList(\"exampleId\"))\n.parentPropertiesId(\"mapStore\")\n.isPublic(true) //&lt;-- public access\n.graphAuths(\"Auth1\") //&lt;-- used but irrelevant as graph has public access\n.build();\nfederatedGraph.execute(addAnotherGraph, user);\n</code></pre>"},{"location":"administration-guide/gaffer-stores/federated-store/#disallow-public-access","title":"Disallow Public Access","text":"<p>By default the Federated Store will allow graphs to be added which have public access enabled. If you don't want graphs with public access to be added, this can be prevented by setting the <code>gaffer.federatedstore.isPublicAllowed</code> store property (or Java equivalent) to false. When public access is disallowed, the <code>isPublic</code> parameter will be ignored and requests to add a graph with public access will be treated as if public access was not specified.</p>"},{"location":"administration-guide/gaffer-stores/federated-store/#limit-custom-properties","title":"Limit Custom Properties","text":"<p>You may not want all users to be able to specify their own properties for graphs they are creating and adding, and to only use properties defined within a graph library. To limit the users which can use custom properties, use the <code>gaffer.federatedstore.customPropertiesAuths</code> store property (or Java equivalent) to require authorisation(s) for this. When this is set, users without a required authorisation can only specify <code>StoreProperties</code> which exist in the <code>GraphLibrary</code> associated with the Federated Store. This limitation is not enabled by default, allowing all users to use custom properties when adding graphs.</p>"},{"location":"administration-guide/gaffer-stores/federated-store/#access-control","title":"Access Control","text":"<p>Graph access control is done through the use of a simple Authorisations approach or a more complex Access Controlled Resource approach. Note that these two access control methods are mutually exclusive, attempting to use both will result in an error.</p> <p>Within the <code>AddGraph</code> operation, do not assign the <code>isPublic</code> parameter or assign it to false, this ensures the settings described in this section are not ignored.</p>"},{"location":"administration-guide/gaffer-stores/federated-store/#authorisations","title":"Authorisations","text":"<p>By assigning the parameter <code>graphAuths</code>, all users which have one of the specified authorisations will have access to that graph. Earlier examples show how to include this when using the <code>AddGraph</code> Operation. Graph authorisations work using OR logic, which means access is tied to a user having just one of the specified auths. Using authorisations you cannot control access based on more complex logic (such as AND). See the next section for an approach which allows this.</p>"},{"location":"administration-guide/gaffer-stores/federated-store/#access-controlled-resource","title":"Access Controlled Resource","text":"<p>Graphs in the Federated Store implement the <code>AccessControlledResource</code> interface allowing configuration of a custom Predicate which is tested against the user to determine whether they can access the graph. This allows for complex access control logic, incorporating combinations of AND &amp; OR.</p> <p>The example below ensures readers of the graph have both the <code>read-access-auth-1</code> and <code>read-access-auth-2</code> auths, and users attempting to write to (or remove) the graph have both the <code>write-access-auth-1</code> and <code>write-access-auth-2</code> auths.</p> AddGraph Operation using Access Controlled Resource<pre><code>{\n\"class\" : \"AddGraph\",\n\"graphId\" : \"AccessControlledResourceSecureGraph\",\n\"options\" : null,\n\"parentPropertiesId\" : \"mapStore\",\n\"parentSchemaIds\" : [ \"exampleId\" ],\n\"readAccessPredicate\" : {\n\"class\" : \"uk.gov.gchq.gaffer.access.predicate.AccessPredicate\",\n\"userPredicate\" : {\n\"class\" : \"AdaptedPredicate\",\n\"inputAdapter\" : {\n\"class\" : \"CallMethod\",\n\"method\" : \"getOpAuths\"\n},\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.And\",\n\"predicates\" : [ {\n\"class\" : \"CollectionContains\",\n\"value\" : \"read-access-auth-1\"\n}, {\n\"class\" : \"CollectionContains\",\n\"value\" : \"read-access-auth-2\"\n} ]\n}\n}\n},\n\"writeAccessPredicate\" : {\n\"class\" : \"uk.gov.gchq.gaffer.access.predicate.AccessPredicate\",\n\"userPredicate\" : {\n\"class\" : \"AdaptedPredicate\",\n\"inputAdapter\" : {\n\"class\" : \"CallMethod\",\n\"method\" : \"getOpAuths\"\n},\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.And\",\n\"predicates\" : [ {\n\"class\" : \"CollectionContains\",\n\"value\" : \"write-access-auth-1\"\n}, {\n\"class\" : \"CollectionContains\",\n\"value\" : \"write-access-auth-2\"\n} ]\n}\n}\n}\n}\n</code></pre> AddGraph using Access Controlled Resource with the Java API <pre><code>AddGraph addAccessControlledResourceSecureGraph = new AddGraph.Builder()\n.graphId(\"AccessControlledResourceSecureGraph\")\n.parentSchemaIds(Lists.newArrayList(\"ExampleId\"))\n.parentPropertiesId(\"mapStore\")\n.readAccessPredicate(\nnew AccessPredicate(\nnew AdaptedPredicate(\nnew CallMethod(\"getOpAuths\"),\nnew And(\nnew CollectionContains(\"read-access-auth-1\"),\nnew CollectionContains(\"read-access-auth-2\")))))\n.writeAccessPredicate(\nnew AccessPredicate(\nnew AdaptedPredicate(\nnew CallMethod(\"getOpAuths\"),\nnew And(\nnew CollectionContains(\"write-access-auth-1\"),\nnew CollectionContains(\"write-access-auth-2\")))))\n.build();\nfederatedGraph.execute(addAccessControlledResourceSecureGraph, user);\n</code></pre>"},{"location":"administration-guide/gaffer-stores/map-store/","title":"Map Store","text":"<p>The map store is a simple in-memory store. Any class that implements Java's Map interface can be used to store the data. If using a simple map implementation, like HashMap, then data stored in this store is not persistent, i.e. when the JVM is shut down the data will disappear. It is designed to support aggregation of properties efficiently.</p> <p>Optionally, an index is maintained so that Elements can be found quickly from EntityIds or EdgeIds.  This option in the store properties (<code>gaffer.store.mapstore.createIndex</code>) is enabled by default.</p> <p>The map store is not currently designed to be a very high-performance, scalable in-memory store. Future versions may include implementations that allow better scalability, for example by using off-heap storage. The current version stores the elements as objects in memory and so is not efficient in its memory usage.</p> <p>Some examples of how this can be used are:</p> <ul> <li>To demonstrate some of Gaffer's APIs and functionality.</li> <li>As an in-memory cache of some data that has been retrieved from a larger store.</li> <li>For the aggregation of graph data within a streaming process.</li> </ul> <p>It allows very quick calculation of the total number of elements in the graph subject to the default view.</p> <p>Note that this store requires that the classes used for the vertices, and for all the group-by properties, have an implementation of the <code>hashCode()</code> method.</p>"},{"location":"administration-guide/gaffer-stores/map-store/#differences-compared-with-accumulo-store","title":"Differences compared with Accumulo Store","text":"<p>There are two key differences between the current implementations of the map store and Accumulo store.</p>"},{"location":"administration-guide/gaffer-stores/map-store/#non-static","title":"Non-static","text":"<p>Map stores are, by default, non-static. Therefore when you create a new store with the same store properties as an existing map store, a new map is made and old data is not accessible. This is unlike Accumulo where using the same store properties would link you to the same store. To make map stores work like Accumulo stores in this regard, then you must set the <code>gaffer.store.mapstore.static</code> to <code>true</code> in the store properties.</p>"},{"location":"administration-guide/gaffer-stores/map-store/#lack-of-store-validation","title":"Lack of store validation","text":"<p>Map stores do not have the <code>STORE_VALIDATION</code> trait, meaning they do not implement store validation which Accumulo stores do. This means Elements will not be validated continuously and removed if they are found to be invalid based on the Schema.</p>"},{"location":"administration-guide/gaffer-stores/map-store/#configuration","title":"Configuration","text":"<p>Warning</p> <p>The map store does not attempt to handle concurrent adding of elements. Elements should be added from a single thread.</p> <p>To use the Map Store, set <code>gaffer.store.class=uk.gov.gchq.gaffer.mapstore.MapStore</code> in your Store Properties file.</p> <p>To configure your choice of Map implementation you can either:</p> <ul> <li>Set the <code>gaffer.store.mapstore.map.class</code> store property to be your chosen Map implementation class. This will require that Java class to be on the classpath.</li> </ul> <p>or</p> <ul> <li>For more complex Map implementation that require additional configuration and tuning you can use the <code>gaffer.store.mapstore.map.factory</code> map factory store property. This allows you to implement your own map factory to use different Map implementations like Hazelcast and MapDB. However due to the nature of having to query-update-put in order to add a new element other implementations may be slow. In addition you can provide you map factory with configuration using the <code>gaffer.store.mapstore.map.factory.config</code> store property.</li> </ul> <p>Other Map Store Properties:</p> <ul> <li><code>gaffer.store.mapstore.createIndex</code>: Controls if an index should be created. Default is True.</li> <li><code>gaffer.store.mapstore.static</code>: Controls if the Map Store is static (only one instance per JVM). Default is False.</li> <li><code>gaffer.store.mapstore.map.ingest.buffer.size</code>: Size of the buffer to use when adding objects in batches. Default is 0, i.e. batches are not used.</li> </ul>"},{"location":"administration-guide/gaffer-stores/proxy-store/","title":"Proxy Store","text":"<p>The proxy store is simply a Gaffer store implementation which delegates all operations to a Gaffer REST API. See Javadoc.</p>"},{"location":"administration-guide/gaffer-stores/proxy-store/#using-a-proxy-store-with-gaffer-rest","title":"Using a proxy store with Gaffer REST","text":"<p>These are the full set of configurable properties which can be used in <code>.properties</code> config file with Gaffer REST:</p> <ul> <li><code>gaffer.host</code>: Hostname or IP Address of the Gaffer REST API</li> <li><code>gaffer.port</code>: Port for the Gaffer REST API</li> <li><code>gaffer.context-root</code>: The path to use as the context root</li> <li><code>gaffer.connect-timeout</code>: Connect timeout in milliseconds</li> <li><code>gaffer.read-timeout</code>: Read timeout in milliseconds</li> </ul> <p>For more information on the timeouts, see the docs for the Jersey client which is used internally.</p> Example <code>store.properties</code> config file <pre><code>gaffer.store.class=uk.gov.gchq.gaffer.proxystore.ProxyStore\ngaffer.host=example.hostname\ngaffer.port=8080\ngaffer.context-root=/rest/v2\n</code></pre>"},{"location":"administration-guide/gaffer-stores/proxy-store/#using-a-proxystore-from-java","title":"Using a <code>ProxyStore</code> from Java","text":"<p>To create a <code>ProxyStore</code> you just need to provide a host, port and context root. This can be done via the <code>ProxyStore.Builder</code>: <pre><code>Graph graph = new Graph.Builder()\n.store(new ProxyStore.Builder()\n.graphId(uniqueNameOfYourGraph)\n.host(\"localhost\")\n.port(8080)\n.contextRoot(\"rest/v1\")\n.build())\n.build();\n</code></pre></p> <p>You can then write your queries in Java and the <code>ProxyStore</code> will convert them into JSON and execute them over the REST API.</p>"},{"location":"administration-guide/gaffer-stores/store-guide/","title":"Stores Guide","text":"<p>A Gaffer Store represents the backing database responsible for storing (or facilitating access to) a graph. Ordinarily a Store provides backing for a single graph. Stores which provide access to other stores can support multiple graphs. So far only the Federated Store supports this.</p> <p>Gaffer currently supplies the following store implementations:</p> <ul> <li>Map Store - Simple in-memory store</li> <li>Accumulo Store - Apache Accumulo backed store</li> <li>Proxy Store - Delegates/forwards queries to another Gaffer REST</li> <li>Federated Store - Federates queries across multiple graphs</li> </ul>"},{"location":"administration-guide/gaffer-stores/store-guide/#store-properties","title":"Store Properties","text":"<p>Stores are configured using <code>key=value</code> style properties stored in a <code>store.properties</code> file. There are general properties which apply to all Stores and per Store properties for configuring specific behaviour. Most properties are optional and don't need to be specified or configured, default values will be used.</p>"},{"location":"administration-guide/gaffer-stores/store-guide/#all-general-store-properties","title":"All General Store Properties","text":"<p>The properties in bold are set based on the type of Gaffer Store, for how to configure these see the respective page for each store type.</p> Property Default Description <code>gaffer.store.class</code> None Class Name String to set Gaffer Store class <code>gaffer.store.schema.class</code> <code>gaffer.store.schema.Schema</code> Class Name String to set class to use for serialising Schemas <code>gaffer.store.properties.class</code> <code>uk.gov.gchq.gaffer.store.StoreProperties</code> Class Name String to set Gaffer Store Properties class <code>gaffer.store.operation.declarations</code> None Path to Operation Declarations files (separate multiple files with commas) <code>gaffer.store.operation.declarations.json</code> None JSON String containing Operation Declarations <code>gaffer.store.job.tracker.enabled</code> False Controls if the Job Tracker is to be used <code>gaffer.store.job.executor.threads</code> 50 Number of threads to be used by the Job Tracker ExecutorService <code>gaffer.store.admin.auth</code> None String for Auth to associate with Administrator Users <code>gaffer.store.reflection.packages</code> None Reflection Packages to add to Koryphe ReflectionUtil <code>gaffer.serialiser.json.class</code> <code>uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser</code> Class Name String for setting a custom class extending JSONSerialiser <code>gaffer.serialiser.json.modules</code> None Class Name String for registering classes implementing JSONSerialiserModules (separate multiple modules with commas) <code>gaffer.serialiser.json.strict</code> False Controls if unknown fields should be ignored when serialising JSON (sets Jackson FAIL_ON_UNKNOWN_PROPERTIES internally) <code>gaffer.error-mode.debug</code> False Controls technical debugging by methods calling <code>DebugUtil</code> <code>gaffer.cache.service.class</code> None Fully-qualified class name of a Gaffer cache implementation <code>gaffer.cache.config.file</code> None Config file to use with a Gaffer cache implementation <code>gaffer.cache.service.name.suffix</code> <code>graphId</code> String to use as the cache suffix"},{"location":"administration-guide/gaffer-stores/store-guide/#caches","title":"Caches","text":"<p>Gaffer comes with three cache implementations:</p> <ul> <li><code>HashMapCacheService</code> - Uses a Java <code>HashMap</code> as the cache data store. See Javadoc.</li> <li><code>JcsCacheService</code> - Uses Apache Commons JCS for the cache data store. See Javadoc.</li> <li><code>HazelcastCacheService</code> - Uses Hazelcast for the cache data store. See Javadoc.</li> </ul> <p>The <code>HashMap</code> cache is not persistent. If using the Hazelcast instance of the Cache service be aware that once the last node shuts down, all data will be lost. This is due to the data being held in memory in a distributed system.</p> <p>For information on implementing caches, see the cache developer docs page.</p>"},{"location":"administration-guide/gaffer-stores/store-guide/#configuration","title":"Configuration","text":"<p>Cache configuration includes selecting which cache service to use and optionally specifying a cache suffix.</p>"},{"location":"administration-guide/gaffer-stores/store-guide/#cache-service","title":"Cache Service","text":"<p>In order for the cache service to run you must select your desired implementation. You do this by adding a line to the <code>store.properties</code> file: <pre><code>gaffer.cache.service.class=uk.gov.gchq.gaffer.cache.impl.HashMapCacheService\n</code></pre></p> <p>For the JCS and Hazelcast cache, you can specify a configuration file with properties for the cache implementation itself: <pre><code>gaffer.cache.config.file=/path/to/file\n</code></pre></p>"},{"location":"administration-guide/gaffer-stores/store-guide/#suffixes","title":"Suffixes","text":"<p>To prevent conflicts between different graphs which share the same cache service, by default the cache entries for each graph are appended with a suffix. The default value of this suffix is the Graph's ID. You can specify the suffix to use with a graph manually by setting the store property <code>gaffer.cache.service.name.suffix</code> to the desired String.</p> <p>In the past (Gaffer versions <code>1.x</code>) this suffix did not exist, and all graphs used the same cache entries. If you want two or more graphs to share the same cache entry, then configure them to use the same suffix.</p> <p>An example where you might want to share the same cache entry is when using Named Operations and a Federated Store. Adding a Named Operation to a Federated Store won't make it available to sub-graphs (when using a <code>FederatedOperation</code> to execute it) unless the sub-graphs share the same cache as the Federated Store.</p>"},{"location":"administration-guide/gaffer-stores/store-guide/#configuring-customisable-operations","title":"Configuring customisable Operations","text":"<p>Some operations are not available by default and you will need to manually configure them.</p> <p>These customisable operations can be added to your Gaffer graph by providing config in one or more operation declaration JSON files.</p>"},{"location":"administration-guide/gaffer-stores/store-guide/#named-operations","title":"Named Operations","text":"<p>Named Operations depends on the Cache service being active at runtime. See Caches above for how to enable these.</p>"},{"location":"administration-guide/gaffer-stores/store-guide/#scoreoperationchain","title":"ScoreOperationChain","text":"<p>Variables:</p> <ul> <li>opScores - required map of operation scores. These are the operation score values.</li> <li>authScores - required map of operation authorisation scores. These are the maximum scores allowed for a user with a given role.</li> <li>scoreResolvers - required (if using NamedOperations) list of score resolvers. These map operation class to its respective score resolver.</li> </ul> Example operation scores map <pre><code>{ \"opScores\": {\n\"uk.gov.gchq.gaffer.operation.Operation\": 1,\n\"uk.gov.gchq.gaffer.operation.impl.generate.GenerateObjects\": 0,\n\"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\": 3\n}\n}\n</code></pre> Example operation authorisation scores map <pre><code>{\n\"authScores\": {\n\"User\": 4,\n\"EnhancedUser\": 10,\n\"OtherUser\": 6\n}\n}\n</code></pre> Example operation declarations JSON file <pre><code>{\n\"operations\": [\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.ScoreOperationChain\",\n\"handler\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.handler.ScoreOperationChainHandler\",\n\"opScores\": {\n\"uk.gov.gchq.gaffer.operation.Operation\": 2,\n\"uk.gov.gchq.gaffer.operation.impl.generate.GenerateObjects\": 0\n},\n\"authScores\": {\n\"User\": 4,\n\"EnhancedUser\": 10\n},\n\"scoreResolvers\": {\n\"uk.gov.gchq.gaffer.named.operation.NamedOperation\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.resolver.named.NamedOperationScoreResolver\"\n}\n}\n}\n}\n]\n}\n</code></pre>"},{"location":"change-notes/changelist/v2-changes/","title":"Gaffer 2 Changelist","text":"<p>Below is a summary of changes that have been made in Gaffer version 2.</p>"},{"location":"change-notes/changelist/v2-changes/#accumulo-2-support","title":"Accumulo 2 Support","text":"<p>The Accumulo store now supports Accumulo 2 and Hadoop 3 by default, with support for Accumulo 1 and Hadoop 2 retained. See the Accumulo Migration page for more information about this change.</p>"},{"location":"change-notes/changelist/v2-changes/#federated-store-improvements","title":"Federated Store Improvements","text":"<p>The Federated Operation was added to greatly improve flexibility of using a Federated Store.</p> <p>Breaking change</p> <p>To migrate, please see the Federated Store Changes page.</p>"},{"location":"change-notes/changelist/v2-changes/#cache-improvements-and-fixes","title":"Cache Improvements and fixes","text":"<p>All \"caches\" within Gaffer received a lot of bug fixes which should make them significantly more stable and consistent over time. This should improve usability of FederatedStores, NamedOperations and NamedViews.</p> <p>Breaking change</p> <p>The cache will need to be reloaded, as the new internal cache interface has changed.  To do this, export all of the contents of your cache, upgrade, then re-add everything manually.</p>"},{"location":"change-notes/changelist/v2-changes/#removal-of-deprecated-code","title":"Removal of Deprecated code","text":"<p>All of Gaffer 1's deprecated code has been removed.</p> <p>Breaking change</p> <p>To migrate, please see the deprecations page.</p>"},{"location":"change-notes/changelist/v2-changes/#dependency-upgrades","title":"Dependency Upgrades","text":"<p>Dependencies have been updated, where possible to the latest version, removing vulnerabilities.</p> <p>Breaking change</p> <p>You will need to migrate your dependencies to be compatible with Gaffer 2's new dependency versions. Please see the dependencies page for full details.</p>"},{"location":"change-notes/changelist/v2-changes/#federated-and-proxy-store-fixes","title":"Federated and Proxy store fixes","text":"<p>A lot of bugs have been fixed that should facilitate FederatedStores with ProxyStores in them.</p> <p>Breaking change</p> <p>The unique store trait <code>DYNAMIC_SCHEMA</code> has been removed from Gaffer. Simply removing it from custom FederatedStore implementations should be an adequate fix.</p>"},{"location":"change-notes/changelist/v2-changes/#removal-of-closeableiterable","title":"Removal of CloseableIterable","text":"<p>The <code>CloseableIterable</code> class has been removed so Operations like <code>GetAllElements</code> now return an <code>Iterable</code> instead, but the result still implements <code>Closeable</code>.</p> <p>Breaking change</p> <p>Everywhere <code>CloseableIterable</code> was used in client code should be replaced with an <code>Iterable</code>: <pre><code>final CloseableIterable&lt;? extends Element&gt; results = graph.execute(new GetAllElements(), USER);\n</code></pre> <pre><code>final Iterable&lt;? extends Element&gt; results = graph.execute(new GetAllElements(), USER);\n</code></pre></p>"},{"location":"change-notes/changelist/v2-changes/#removal-of-hbase-and-parquet-stores","title":"Removal of HBase and Parquet stores","text":"<p>The HBase and Parquet stores have been removed from Gaffer in version 2. We made posts for both the HBase and Parquet stores to understand the levels of usage. It was then decided to remove both stores as this would make introducing various improvements easier in the long term. HBase and Parquet remain available in Gaffer version 1. In the future, they could be reimplemented for Gaffer 2, though we do not plan to currently.</p> <p>Breaking change</p> <p>We would recommend instead using an Accumulo Store. If you would like these store implementations in Gaffer 2, or any other potential store for that matter, please make an issue on GitHub.</p>"},{"location":"change-notes/changelist/v2-changes/#gaffer-now-builds-with-java-8-and-java-11","title":"Gaffer now builds with Java 8 and Java 11","text":"<p>There is now a maven profile that will swap dependency versions so you can build Gaffer with Java 11. The code has also been updated to build with both Java versions.</p>"},{"location":"change-notes/changelist/v2-changes/#accumulo-kerberos-authentication-support","title":"Accumulo Kerberos Authentication Support","text":"<p>The Accumulo store now supports authenticating to Accumulo and HDFS using Kerberos, in addition to username/password. For more information, see the Kerberos support page.</p>"},{"location":"change-notes/changelist/v2-changes/#csv-import-and-export","title":"CSV Import and Export","text":"<p>Basic support for importing and exporting CSVs has been added.</p>"},{"location":"change-notes/changelist/v2-changes/#all-operations-can-now-be-used-within-namedoperations","title":"All operations can now be used within NamedOperations","text":"<p>Previously, <code>GetElementsBetweenSets</code> could not be used within a NamedOperation as it used <code>inputB</code>. <code>GetElementsBetweenSets</code> and <code>inputB</code> have both been deprecated and instead you should use <code>GetElementsBetweenSetsPairs</code>.</p> Example <p>Old operation now deprecated: <pre><code>{\n\"class\": \"GetElementsBetweenSets\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"firstInput\"\n}\n],\n\"inputB\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"secondInput\"\n}\n]\n}\n</code></pre> New operation that will work within NamedOperations: <pre><code>{\n\"class\": \"GetElementsBetweenSetsPairs\",\n\"input\": {\n\"class\": \"Pair\",\n\"first\": {\n\"ArrayList\" : [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"firstInput\"\n}\n]\n},\n\"second\": {\n\"ArrayList\" : [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"secondInput\"\n}\n]\n}\n}\n}\n</code></pre></p>"},{"location":"change-notes/changelist/v2-changes/#ability-to-set-operationdeclarations-during-addgraph","title":"Ability to set OperationDeclarations during AddGraph","text":"<p>This will mean subgraphs added to FederatedStores can have additional operation handlers set when they are added. You can directly provide the OperationsDeclarations json to the store properties with <code>gaffer.store.operation.declarations.json</code>.</p> Example <pre><code>{\n\"class\": \"AddGraph\",\n\"graphId\": \"myGraph\",\n\"schema\": {}, // (1)!\n\"storeProperties\": {\n\"gaffer.store.class\": \"MapStore\",\n\"gaffer.store.operation.declarations.json\": {\n\"operations\": [\n{\n\"operation\": \"ImportFromLocalFile\", // (2)!\n\"handler\": {\n\"class\": \"ImportFromLocalFileHandler\"\n}\n}\n]\n}\n}\n}\n</code></pre> <ol> <li>Schema left empty for brevity</li> <li>This example operation enables file import. Read more in the CSV docs.</li> </ol>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/","title":"Accumulo Kerberos Support","text":"<p>This page contains information on Kerberos Authentication support for Gaffer's Accumulo Store. This functionality was introduced in version <code>2.0.0-alpha-0.3.1</code> of Gaffer.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/#using-the-accumulo-store-with-kerberos","title":"Using the Accumulo Store with Kerberos","text":""},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/#prerequisites","title":"Prerequisites","text":"<p>To use Gaffer's Accumulo Store with Kerberos authentication:</p> <ul> <li>The Accumulo cluster to connect with must be correctly configured to use Kerberos.</li> <li>A principal for the system/host Gaffer will be running on must be created in the Key Distribution Center (KDC) database.</li> <li>The Gaffer principal should use the standard <code>primary/instance@realm</code> format. Using principals without an instance qualification has not been tested.</li> <li>A keytab for the Gaffer principal must be created and transferred to the Gaffer host.</li> <li>The Gaffer principal must have been added as an Accumulo user with suitable permissions granted.</li> <li>Kerberos client utilities should be installed on the host and <code>krb5.conf</code> must be correctly configured.</li> <li>An Accumulo client configuration should be available on the host and contain the correct options to enable Kerberos.</li> <li>The Gaffer store.properties should state that Kerberos is to be used, specify the principal name and the keytab path.</li> </ul> <p>The sections below cover some of these points in more detail.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/#accumulo-user-for-gaffer","title":"Accumulo user for Gaffer","text":"<p>When Kerberos is used with Accumulo, any client with a principal can connect without requiring an Accumulo user to have been created previously. This works by creating an Accumulo user automatically when a new client connects. These users are not granted any permissions.</p> <p>Users can still be created manually via the Accumulo shell, with Gaffer's full principal (with all components) given as the username. Permissions to create and read tables can then be granted to this user. If this isn't done, Accumulo will create the user automatically when Gaffer first connects. In this case Gaffer will fail to start as the required permissions will not have been granted - they can then be granted via the shell and Gaffer restarted.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/#accumulo-client-configuration","title":"Accumulo Client configuration","text":"<p>Depending on the version of Accumulo used, an <code>accumulo-client.properties</code> (2.x) or <code>client.conf</code> (1.x) must be populated as described in the respective version of the Accumulo documentation. The only value which needs to be altered is the Kerberos server primary. This should reflect the primary part of the principals used by the Accumulo cluster.</p> <p>The location of this config file can be specified using the <code>ACCUMULO_CLIENT_CONF_PATH</code> environment variable. If this is not set, then default paths will be checked.</p> <p>Other than this file, Accumulo libraries and configuration files do not need to be installed on the Gaffer host. </p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/#gaffer-storeproperties-configuration","title":"Gaffer <code>store.properties</code> configuration","text":"<p>In addition to the usual Accumulo Store settings, these extra options must be specified for Kerberos: <pre><code>accumulo.kerberos.enable=true\naccumulo.kerberos.principal=gaffer/host.domain@REALM.NAME\naccumulo.kerberos.keytab=/gaffer/config/gaffer.keytab\n</code></pre> The <code>accumulo.username</code> and <code>accumulo.password</code> values do not need to be set and are ignored when <code>accumulo.kerberos.enable</code> is true.</p> <p>The <code>kinit</code> Kerberos command does not need to be used, although it might be useful for ensuring the client principal works correctly. All Kerberos ticket management, renewal and re-login is handled automatically.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/#specifying-a-different-krb5conf","title":"Specifying a different <code>krb5.conf</code>","text":"<p>If the <code>krb5.conf</code> in the default system location is not suitable, or if it's stored in a non-standard location, then  custom a custom <code>krb5.conf</code> location can be specified when starting Gaffer by setting the system property value <code>java.security.krb5.conf</code>. The simplest way to do this is by using the option flag <code>-Djava.security.krb5.conf=/my/path/to/krb5.conf</code> when launching the Gaffer JAR.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/#federation-considerations","title":"Federation Considerations","text":"<p>Due to the way Kerberos is implemented in Accumulo, it is not possible for Gaffer to use multiple principals at the same time. For the <code>FederatedStore</code>, this prevents adding graphs which are on different Accumulo clusters, if those clusters require different principals. In practice this is unlikely to be a problem, as different Accumulo clusters would only need separate client principals if they were on separate Kerberos Realms or using different KDCs.</p> <p>This only impacts Accumulo clusters which require Kerberos. It doesn't impact on adding graphs which are stored in clusters using basic authentication and not Kerberos. Nor does it affect adding graphs from a Kerberos cluster and also adding graphs from a non Kerberos cluster in the same <code>FederatedStore</code>.</p> <p>If this limitation is a problem, it can be worked around by running additional Gaffer instances and connecting to them using a <code>ProxyStore</code> in the <code>FederatedStore</code>, rather than connecting directly using an <code>AccumuloStore</code>.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/#hdfs-considerations","title":"HDFS Considerations","text":"<p>When using the <code>AddElementsFromHdfs</code> operation Gaffer acts as a HDFS client. When Kerberos is used (Hadoop Secure Mode), HDFS clients must have native libraries installed and configured correctly; else Hadoop will raise a Runtime Exception stating that \"Secure IO is not possible without native code extensions\".</p> <p>The HDFS client also requires the Hadoop configuration files <code>core-site.xml</code> and <code>hdfs-site.xml</code> to both be present and configured as below. The location of these files can be specified using the <code>HADOOP_CONF_DIR</code> environment variable.</p> <pre><code>&lt;!--Properties in core-site.xml--&gt;\n&lt;property&gt;\n&lt;name&gt;hadoop.security.authentication&lt;/name&gt;\n&lt;value&gt;kerberos&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n&lt;name&gt;hadoop.security.authorization&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/property&gt;\n</code></pre> <p>In particular, <code>hdfs-site.xml</code> requires the <code>yarn.resourcemanager.principal</code> property to be set to the HDFS client principal - should be the same one as in the Gaffer Store properties. If this is missing Hadoop will fail to connect and raise an IO Exception with \"Can't get Master Kerberos principal for use as renewer\".</p> <pre><code>&lt;!--Properties in hdfs-site.xml--&gt;\n&lt;property&gt;\n&lt;name&gt;yarn.resourcemanager.principal&lt;/name&gt;\n&lt;value&gt;primary/instance@realm&lt;/value&gt;\n&lt;/property&gt;\n</code></pre> <p>Note that the <code>core-site.xml</code> and <code>hdfs-site.xml</code> files are only required if <code>AddElementsFromHdfs</code> is going to be used. For Accumulo connections the Hadoop properties (from <code>core-site.xml</code>) used for enabling Kerberos are set automatically in Gaffer's connection code.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/#spark-accumulo-library","title":"Spark Accumulo Library","text":"<p>The Spark Accumulo Library has not yet been updated to support Kerberos. This prevents Spark Operations from being used with an <code>AccumuloStore</code> which has Kerberos authentication enabled. It is on the backlog for support to be added in future.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-kerberos/#troubleshooting","title":"Troubleshooting","text":"<p>Kerberos is not easy to configure and familiarity with Kerberos concepts is recommended. There are some useful links to introductory information in the Accumulo Kerberos docs.</p> <p>Improperly configured DNS will cause problems with Kerberos. Ensure all hostnames used in Principals resolved correctly, include reverse lookup. Due to how the system's hostname is used by the Hadoop Kerberos libraries, a mismatch between the configured hostname and the hostname resolved by a reverse lookup can prevent authentication from working correctly.</p> <p>Various environment variables can be set for debugging Kerberos, see the Hadoop docs for more information. These variables are applicable to Accumulo (see docs) because its Kerberos implementation uses Hadoop libraries. The Gaffer logging level (set in <code>log4.xml</code>) should be increased to at least <code>INFO</code> when using these environment variables.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-migration/","title":"Accumulo Migration","text":"<p>This page contains information on changes to the Accumulo/Hadoop versions supported by Gaffer and how to continue using the previously supported versions.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-migration/#accumulo-2-hadoop-3-become-default-versions","title":"Accumulo 2 &amp; Hadoop 3 become default versions","text":"<p>From the <code>2.0.0-alpha-0.3</code> release of Gaffer, the default version of Accumulo has been upgraded to Accumulo 2.0.1. Hadoop has also been upgraded to the latest version (currently 3.3.3). This is because Hadoop 2.x is not compatible with Accumulo 2.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-migration/#retained-support-for-accumulo-1-hadoop-2","title":"Retained support for Accumulo 1 &amp; Hadoop 2","text":"<p>Support for certain versions of Accumulo 1 and Hadoop 2 (specifically 1.9.3 &amp; 2.6.5) has been retained and can be enabled by using a Maven profile when building from source (see below). This facilitates testing with these versions and creates shaded JARs (e.g. spring-rest exec, accumulo-store iterators) with the appropriate versions of supporting libraries. As described in the source docs, other versions of Accumulo 1.x and Hadoop 2.x might also work.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-migration/#availability-of-gaffer-artifacts-supporting-accumulo-1","title":"Availability of Gaffer artifacts supporting Accumulo 1","text":"<p>The shaded JARs differ based on the versions of the bundled libraries and only the default version (Accumulo 2.0.1) is published to the Maven Central repository. The 'legacy' version must be built locally.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-migration/#building-gaffer-with-the-legacy-profile","title":"Building Gaffer with the 'legacy' profile","text":"<p>To build Gaffer using Accumulo 1.9.3 and Hadoop 2.6.5, the 'legacy' Maven profile needs to be used. This is enabled by supplying <code>-Dlegacy=true</code> as an extra argument at the command line when running Maven. For example, <code>mvn clean install -Pcoverage -Dlegacy=true</code> will perform a full build/test of Gaffer with this profile enabled. Java 11 cannot be used with this profile because only Hadoop 3.3.0 and higher support it.</p> <p>With the 'legacy' Maven profile active, the filenames of all shaded JARs produced are appended with <code>-legacy</code>. This is to differentiate them from the default shaded JARs which contain different libraries and different library versions. A default Gaffer Accumulo REST API JAR will not work with an Accumulo 1 cluster, and the 'legacy' version will not work with Accumulo 2 because the bundled libraries are specific to the version of Accumulo.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/accumulo-migration/#migrating-from-accumulo-1-to-2","title":"Migrating from Accumulo 1 to 2","text":"<p>See the Accumulo documentation for guidance on upgrading from Accumulo 1 to 2. Of particular significance is the deprecation of the dynamic reloading classpath directory functionality in Accumulo 2. This affects where and how the Gaffer iterators JAR can be installed. See the Accumulo store documentation for these installation details.</p> <p>Otherwise, no Accumulo specific Gaffer configuration needs to be changed and migrating from Accumulo 1 to 2 should be as simple as swapping the Gaffer dependency versions/JARs, although this has not been actively tested.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/dependencies/","title":"Dependency Upgrades","text":"<p>This page lists the dependencies that have been upgraded as part of Gaffer 2.</p> <ul> <li>Assertj: 3.20.2 -&gt; 3.23.1</li> <li>Avro: 1.7.7 -&gt; 1.8.2</li> <li>Commons-codec: 1.6 -&gt; 1.15</li> <li>Commons-csv: 1.4 -&gt; 1.10.0</li> <li>Commons-io: 2.7 -&gt; 2.11.0</li> <li>Commons-jcs-core: 2.1 -&gt; 2.2.1</li> <li>Commons-lang: 3.3.2 -&gt; 3.12.0</li> <li>Commons-logging: 1.1.3 -&gt; 1.2</li> <li>Commons-math3: 3.4.1 -&gt; 3.6.1</li> <li>Commons-math: 2.1 -&gt; 2.2</li> <li>Curator: 2.6.0 -&gt; 2.13.0</li> <li>Flink: 1.4.1 -&gt; 1.7.2</li> <li>Graphframes: 0.4.0 -&gt; 0.8.1</li> <li>Guava: 13.0.1 -&gt; 30.1.1</li> <li>Hadoop: 2.6.5 -&gt; 3.3.3</li> <li>Hazelcast: 3.8 -&gt; 5.3.0</li> <li>Jackson: 2.6.5 -&gt; 2.13.5</li> <li>Javassist: 3.19.0-GA -&gt; 3.28.0-GA</li> <li>Jersey: 2.25 -&gt; 2.36</li> <li>Jersey: 2.25 -&gt; 2.36</li> <li>Junit5: 5.6.0 -&gt; 5.9.0</li> <li>Kafka: 0.10.0.0 -&gt; 0.10.2.2</li> <li>Koryphe: 1.14.0 -&gt; 2.1.0</li> <li>Log4j: 1.2.17 -&gt; Reload4j: 1.2.18.3</li> <li>Mockito: 3.3.3 -&gt; 4.6.1</li> <li>Paranamer: 2.6 -&gt; 2.8</li> <li>Reflections: 0.9.10 -&gt; 0.9.12</li> <li>Slf4j: 1.7.25 -&gt; 1.7.36</li> <li>Spark 2.3.2 -&gt; 3.0.3</li> <li>Spring API Swagger: 2.6.0 -&gt; 3.0.0</li> <li>Spring Boot: 1.3.2 -&gt; 2.5.12</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/","title":"Deprecations","text":"<p>This page describes deprecated code which has been removed in Gaffer 2 and how to migrate to better equivalents. Each heading for a section below refers to a classname from <code>uk.gov.gchq.gaffer</code> where there have been changes or where that class has been removed entirely. The section headings link to the code on GitHub for that class (as of the Gaffer 1.21.1 release).</p> <p>Deprecations impacting the serialisers used in schemas are listed first, followed by changes to Seed Matching and changes to Traits. Other deprecations are then listed in alphabetical order.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#serialisers","title":"Serialisers","text":""},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#migrating-away-from-deprecated-serialisers","title":"Migrating away from deprecated Serialisers","text":"<p>Various deprecated serialisers have been removed completely (details below). If any of these are being used in an existing schema, a new graph and schema will need to be created (see below for replacement serialisers to use) and data from existing graphs migrated. Data will need to be migrated (export and reimport) from graphs using deprecated serialisers before upgrading to Gaffer v2.</p> <p>It is essential to migrate data stored using deprecated serialisers. Simply replacing these serialisers is not enough because this will prevent existing data from being read and potentially put the backing store into a corrupted state.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#preservation-of-ordering","title":"Preservation of ordering","text":"<p>When using an ordered store (such as Accumulo), all serialisers used on vertices must preserve order. As such, <code>compactRaw</code> serialisers (which do not preserve order) cannot be used on vertices in ordered stores.</p> <p>However, when preserving order is not required, such as for properties, <code>CompactRaw</code> serialisers are the most effective solution and should always be used. Using an ordered serialiser on a property would reduce performance without providing any benefit. See the schemas documentation for more detail.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#removed-serialisers","title":"Removed Serialisers","text":""},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#serialisationimplementationrawrawdateserialiser-and-serialisationdateserialiser","title":"<code>serialisation.implementation.raw.RawDateSerialiser</code> and <code>serialisation.DateSerialiser</code>","text":"<p>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDateSerialiser</code> instead - note that this will preserve order. Neither of these replacement serialisers implement <code>.deserialiseString(String)</code>, instead use <code>new Date(Long.parseLong(String))</code> in place of this.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#serialisationimplementationrawrawdoubleserialiser-and-serialisationdoubleserialiser","title":"<code>serialisation.implementation.raw.RawDoubleSerialiser</code> and <code>serialisation.DoubleSerialiser</code>","text":"<p>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDoubleSerialiser</code> instead - note that this will preserve order. Neither of these replacement serialisers implement <code>.deserialiseString(String)</code>, instead use <code>Double.parseDouble(String)</code> in place of this.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#serialisationimplementationrawrawfloatserialiser-and-serialisationfloatserialiser","title":"<code>serialisation.implementation.raw.RawFloatSerialiser</code> and <code>serialisation.FloatSerialiser</code>","text":"<p>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedFloatSerialiser</code> instead - note that this will preserve order.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#serialisationintegerserialiser-and-serialisationimplementationrawrawintegerserialiser","title":"<code>serialisation.IntegerSerialiser</code> and <code>serialisation.implementation.raw.RawIntegerSerialiser</code>","text":"<p>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser</code> instead if you need order preserved (e.g. vertex types). If object ordering definitely does not need to be preserved (e.g. only property types), <code>uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawIntegerSerialiser</code> should be used instead. Neither of these replacement serialisers implement <code>.deserialiseString(String)</code>, instead use <code>Integer.parseInt(String)</code> in place of this.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#serialisationlongserialiser-and-serialisationimplementationrawrawlongserialiser","title":"<code>serialisation.LongSerialiser</code> and <code>serialisation.implementation.raw.RawLongSerialiser</code>","text":"<p>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedLongSerialiser</code> instead if you need order preserved (e.g. vertex types). If object ordering definitely does not need to be preserved (e.g. only property types), <code>uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawLongSerialiser</code> could also be used instead.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#changed-serialisers","title":"Changed Serialisers","text":""},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#serialisationtobytesserialiser-and-serialisationtobytesviastringdeserialiser","title":"<code>serialisation.ToBytesSerialiser</code> and <code>serialisation.ToBytesViaStringDeserialiser</code>","text":"<p>In both serialisers, the method <code>deserialise(byte[])</code> has been marked as deprecated. It cannot be deleted as it is needed to implement the Serialiser interface. It is recommended for speed/performance to use the other implementation with an offset and a length: <code>deserialise(byte[], int, int)</code>.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#removal-of-seed-matching","title":"Removal of Seed Matching","text":""},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#operationseedmatching","title":"<code>operation.SeedMatching</code>","text":"<p>SeedMatching has been removed from Gaffer. This was previously used in get operations, like <code>GetElements</code>, to select whether you wanted your results to contain only Elements that are the same type as the seed, or both Edges and Entities. For more info, see the Gaffer 1.X docs page on SeedMatching. As described in the Gaffer 1.X docs, <code>SeedMatching</code> can be replaced with a <code>View</code>. The default behaviour in Gaffer is the same as if you used <code>seed_matching=\"RELATED\"</code>, so if this is the case, there is no migration required. However, if you used <code>seed_matching=\"EQUAL\"</code>, you will need to migrate to a <code>View</code>.</p> SeedMatching migration with EdgeSeeds <p>Where SeedMatching was used to only get back Edges from EdgeSeeds</p> JavaJSONPython <pre><code>final GetElements getEdgesWithSeedMatching = new GetElements.Builder()\n.input(new EdgeSeed(\"source\", \"dest\", true))\n.seedMatching(SeedMatching.SeedMatchingType.EQUAL)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : \"source\",\n\"destination\" : \"dest\",\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n} ],\n\"seedMatching\" : \"EQUAL\"\n}\n</code></pre> <pre><code>g.GetElements(\ninput=[\ng.EdgeSeed(\nsource=\"source\",\ndestination=\"dest\",\ndirected_type=\"DIRECTED\",\nmatched_vertex=\"SOURCE\"\n)\n],\nseed_matching=\"EQUAL\"\n)\n</code></pre> <p>You should instead specify that in a View</p> JavaJSONPython <pre><code>final GetElements getEdgesWithoutSeedMatching = new GetElements.Builder()\n.input(new EdgeSeed(\"source\", \"dest\", true))\n.view(new View.Builder()\n.edge(\"relevantEdgeGroup\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : \"source\",\n\"destination\" : \"dest\",\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n} ],\n\"view\" : {\n\"edges\" : {\n\"relevantEdgeGroup\" : { }\n}\n}\n}\n</code></pre> <pre><code>g.GetElements(\ninput=[\ng.EdgeSeed(\nsource=\"source\",\ndestination=\"dest\",\ndirected_type=\"DIRECTED\",\nmatched_vertex=\"SOURCE\"\n)\n],\nview=g.View(\nedges=[g.ElementDefinition(group=\"relevantEdgeGroup\")]\n)\n)\n</code></pre> SeedMatching migration with EntitySeeds <p>Where SeedMatching was used to only get back Entities from EntitySeeds</p> JavaJSONPython <pre><code>final GetElements getEntitiesWithSeedMatching = new GetElements.Builder()\n.input(new EntitySeed(\"vertex\"))\n.seedMatching(SeedMatching.SeedMatchingType.EQUAL)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : \"vertex\"\n} ],\n\"seedMatching\" : \"EQUAL\"\n}\n</code></pre> <pre><code>g.GetElements(\ninput=[\ng.EntitySeed(\nvertex=\"vertex\"\n)\n],\nseed_matching=\"EQUAL\"\n)\n</code></pre> <p>You should instead specify that in a View</p> JavaJSONPython <pre><code>final GetElements getEntitiesWithoutSeedMatching = new GetElements.Builder()\n.input(new EntitySeed(\"vertex\"))\n.view(new View.Builder()\n.entity(\"relevantEntityGroup\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : \"vertex\"\n} ],\n\"view\" : {\n\"entities\" : {\n\"relevantEntityGroup\" : { }\n}\n}\n}\n</code></pre> <pre><code>g.GetElements(\ninput=[\ng.EntitySeed(\nvertex=\"vertex\"\n)\n],\nview=g.View(\nentities=[g.ElementDefinition(group=\"relevantEntityGroup\")]\n)\n)\n</code></pre> SeedMatching migration with EdgeSeeds and EntitySeeds <p>Where SeedMatching was used to only get back only Edges from the provided EdgeSeeds and only Entities from the provided EntitySeeds</p> JavaJSONPython <pre><code>final GetElements getBothWithSeedMatching = new GetElements.Builder()\n.input(new EntitySeed(\"vertex\"), new EdgeSeed(\"source\", \"dest\", true))\n.seedMatching(SeedMatching.SeedMatchingType.EQUAL)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : \"vertex\"\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : \"source\",\n\"destination\" : \"dest\",\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n} ],\n\"seedMatching\" : \"EQUAL\"\n}\n</code></pre> <pre><code>g.GetElements(\ninput=[\ng.EntitySeed(\nvertex=\"vertex\"\n),\ng.EdgeSeed(\nsource=\"source\",\ndestination=\"dest\",\ndirected_type=\"DIRECTED\",\nmatched_vertex=\"SOURCE\"\n)\n],\nseed_matching=\"EQUAL\"\n)\n</code></pre> <p>You will instead need to perform multiple Operations and combine the results. To perform the above operation, you would have to combine both previous examples.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#changes-to-store-traits","title":"Changes to Store Traits","text":""},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#storestore","title":"<code>store.Store</code>","text":"<ul> <li>The method <code>getTraits()</code> has been removed. Use <code>Store.execute(Operation, Context)</code> with the <code>GetTraits</code> operation instead.</li> <li>The method <code>hasTrait(StoreTrait)</code> has been removed. Use <code>Store.execute(Operation, Context)</code> with the <code>HasTrait</code> operation instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#federatedstorefederatedgraphstorage","title":"<code>federatedstore.FederatedGraphStorage</code>","text":"<ul> <li>The method <code>getTraits(GetTraits, Context)</code> has been removed. Use <code>Store.execute(Operation, Context)</code> with the <code>GetTraits</code> operation instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#federatedstorefederatedstore","title":"<code>federatedstore.FederatedStore</code>","text":"<ul> <li>The methods <code>getTraits()</code> and <code>getTraits(GetTraits, Context)</code> have been removed. Use <code>Store.execute(Operation, Context)</code> with the <code>GetTraits</code> operation instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#changes-to-schemas","title":"Changes to Schemas","text":"<p>Deprecated methods in <code>store.schema.TypeDefinition</code> and <code>store.schema.Schema</code> have been removed (see below sections).</p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#elements-schema","title":"Elements Schema","text":"<p>Specifying a property name to use as a time stamp is now set under <code>config</code>.</p> <p>Previously set at the top level: <pre><code>{\n  \"entities\": {\n    ...\n  },\n  \"edges\": {\n    ...\n  },\n  \"timestampProperty\": \"timestamp\"\n}\n</code></pre></p> <p>Now set in <code>config</code>: <pre><code>{\n  \"entities\": {\n    ...\n  },\n  \"edges\": {\n    ...\n  },\n  \"config\": {\n    \"timestampProperty\": \"timestamp\"\n  }\n}\n</code></pre></p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#types-schema","title":"Types Schema","text":"<p>Specifying a serialiser class using deprecated <code>serialiserClass</code> is no longer possible. Instead, use <code>class</code> in <code>serialiser</code>. Deprecated <code>vertexSerialiserClass</code> has also been removed.</p> <p>Old, deprecated, and now removed approach: <pre><code>{\n  \"types\": {\n    \"example.map\": {\n      \"description\": \"Map type description\",\n      \"class\": \"java.util.LinkedHashMap\",\n      \"serialiserClass\": \"uk.gov.gchq.gaffer.serialisation.implementation.MapSerialiser\"\n    }\n  }\n}\n</code></pre></p> <p>Now set in <code>serialiser</code>: <pre><code>{\n  \"types\": {\n    \"example.map\": {\n      \"description\": \"Map type description\",\n      \"class\": \"java.util.LinkedHashMap\",\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.serialisation.implementation.MapSerialiser\"\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#all-other-deprecations","title":"All other Deprecations","text":""},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#accumulostoreaccumuloproperties","title":"<code>accumulostore.AccumuloProperties</code>","text":"<ul> <li>The <code>TABLE</code> setting/variable plus the methods <code>getTable()</code> and <code>setTable(String)</code> have been removed. For <code>getTable()</code>, uk.gov.gchq.gaffer.accumulostore.getTableName() could be used instead.</li> <li>A <code>graphId</code> should be supplied instead of setting <code>TABLE</code> directly.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#accumulostoremockaccumulostore","title":"<code>accumulostore.MockAccumuloStore</code>","text":"<ul> <li>This class has been removed.</li> <li>For in memory graphs, use <code>uk.gov.gchq.gaffer.mapstore.MapStore</code> instead.</li> <li>For Accumulo specific store tests, use <code>uk.gov.gchq.gaffer.accumulostore.MiniAccumuloStore</code> instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#commonutiltesttypes","title":"<code>commonutil.TestTypes</code>","text":"<ul> <li>This class has been removed.</li> <li>Use the equivalent <code>TestTypes</code> class in the store module <code>uk.gov.gchq.gaffer.store.TestTypes</code> instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#commonutilcommonconstants","title":"<code>commonutil.CommonConstants</code>","text":"<ul> <li>This class has been removed as it was redundant.</li> <li>For the <code>UTF-8</code> constant use <code>StandardCharsets.UTF_8.name()</code> from built in Java libraries.</li> <li>The above also applies to the <code>ISO_8859_1</code> constant from this class.</li> <li>This also allows for more robust error handing, this commit is an example of a change implementing this.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#dataelementdefinitionviewnamedviewdetail","title":"<code>data.elementdefinition.view.NamedViewDetail</code>","text":"<ul> <li>The method <code>hasWriteAccess(String userId, Set&lt;String&gt; opAuths, String adminAuth)</code> has been removed.</li> <li>Use <code>hasWriteAccess(User user, String adminAuth)</code> instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#dataelementdefinitionviewviewelementdefinition","title":"<code>data.elementdefinition.view.ViewElementDefinition</code>","text":"<ul> <li>The method <code>setAggregator(ElementAggregator aggregator)</code> has been removed.</li> <li>A <code>ViewElementDefinition</code> should be constructed using the builder <code>uk.gov.gchq.gaffer.data.elementdefinition.view.ViewElementDefinition.Builder</code> instead.</li> </ul> Example <p>Where <code>setAggregator</code> was used previously <pre><code>final ViewElementDefinition elementDef = new ViewElementDefinition();\nelementDef.setAggregator(myElementAggregator);\n</code></pre></p> <p>You should now use the Builder <pre><code>final ViewElementDefinition elementDef = new ViewElementDefinition.Builder()\n.aggregator(myElementAggregator)\n.build();\n</code></pre></p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#federatedstorefederatedaccess","title":"<code>federatedstore.FederatedAccess</code>","text":"<ul> <li>The method <code>isAddingUser(User)</code> has been removed.</li> <li>Use <code>hasReadAccess(User user, String adminAuth)</code>/<code>hasWriteAccess(User user, String adminAuth)</code> instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#federatedstorefederatedgraphstorage_1","title":"<code>federatedstore.FederatedGraphStorage</code>","text":"<ul> <li>The methods <code>getAllIdsAsAdmin()</code>, <code>getAllGraphAndAccessAsAdmin(List&lt;String&gt;)</code> and <code>changeGraphAccessAsAdmin(String, FederatedAccess)</code> have all been removed.</li> <li>The method <code>remove(String graphId)</code> has been removed. The following can be used instead:<ul> <li><code>remove(String graphId, User user)</code></li> <li><code>remove(String graphId, User user, String adminAuth)</code></li> <li><code>remove(String graphId, Predicate&lt;Entry&lt;FederatedAccess, Set&lt;Graph&gt;&gt;&gt; entryPredicateForGraphRemoval)</code></li> </ul> </li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#federatedstorefederatedstore_1","title":"<code>federatedstore.FederatedStore</code>","text":"<ul> <li>The method <code>updateOperationForGraph(Operation, Graph)</code> has been removed. Use <code>FederatedStoreUtil.updateOperationForGraph(Operation, Graph)</code> instead.</li> <li>The method <code>addGraphs(Set&lt;String&gt; graphAuths, String addingUserId, GraphSerialisable... graphs)</code> has been removed. The following can be used instead:<ul> <li><code>addGraphs(Set&lt;String&gt; graphAuths, String addingUserId, boolean isPublic, GraphSerialisable... graphs)</code></li> <li><code>addGraphs(Set&lt;String&gt; graphAuths, String addingUserId, boolean isPublic, boolean disabledByDefault, GraphSerialisable... graphs)</code></li> <li><code>addGraphs(Set&lt;String&gt; graphAuths, String addingUserId, boolean isPublic, boolean disabledByDefault, AccessPredicate readAccessPredicate, AccessPredicate writeAccessPredicate, GraphSerialisable... graphs)</code></li> <li><code>addGraphs(FederatedAccess access, GraphSerialisable... graphs)</code></li> </ul> </li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#federatedstoreoperationremovegraph","title":"<code>federatedstore.operation.RemoveGraph</code>","text":"<ul> <li>The method <code>Builder.setGraphId(String graphId)</code> has been removed.</li> <li>Use <code>Builder.graphId(String graphId)</code> which has identical behaviour instead.</li> </ul> Example <p>Where <code>Builder.setGraphId</code> was used previously <pre><code>final RemoveGraph removeGraphOp = new RemoveGraph.Builder()\n.setGraphId(\"myGraph\")\n.build();\n</code></pre></p> <p>You should now use <code>Builder.graphId</code> <pre><code>final RemoveGraph removeGraphOp = new RemoveGraph.Builder()\n.graphId(\"myGraph\")\n.build();\n</code></pre></p>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#graphgraph","title":"<code>graph.Graph</code>","text":"<ul> <li>The methods <code>Builder.graphId</code>, <code>Builder.library</code>, <code>Builder.view</code>, <code>Builder.addHook</code>, <code>Builder.addHooks</code> have all been removed in all forms.</li> <li>Instead of using these methods, use <code>.config()</code> to set the <code>graphConfig</code>.</li> </ul> Example <p>Where the graph config was added using the <code>Graph.Builder</code> before <pre><code>final Graph myGraph = new Graph.Builder()\n.graphId(\"myGraph\")\n.library(myGraphLibrary)\n.view(myView)\n.addHook(customHook)\n.addSchema(mySchema)\n.storeProperties(storeProperties)\n.build();\n</code></pre></p> <p>You should now use the <code>GraphConfig.Builder</code> <pre><code>final Graph myGraph = new Graph.Builder()\n.config(new GraphConfig.Builder()\n.graphId(\"myGraph\")\n.library(myGraphLibrary)\n.view(myView)\n.addHook(customHook)\n.build())\n.addSchema(mySchema) // (1)!\n.storeProperties(storeProperties) // (2)!\n.build();\n</code></pre></p> <ol> <li>Schemas are not part of the GraphConfig</li> <li>StoreProperties are not part of the GraphConfig</li> </ol>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#hdfsoperationmapreduce","title":"<code>hdfs.operation.MapReduce</code>","text":"<ul> <li>The methods <code>getNumReduceTasks()</code> and <code>setNumReduceTasks(Integer)</code> have been removed.</li> <li>Gaffer\u2019s operations that inherit <code>MapReduce</code> did not make use of <code>numReduceTasks</code>, either setting it to a constant number in the <code>JobFactory</code> or using Accumulo to automatically set the number (recommended for performance) and using min/max to keep it within a range. Therefore, <code>numReduceTasks</code>, <code>getNumReduceTasks</code> and <code>setNumReduceTasks</code> have been removed from this interface.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#hdfsoperationaddelementsfromhdfs","title":"<code>hdfs.operation.AddElementsFromHdfs</code>","text":"<ul> <li>The methods <code>getNumReduceTasks()</code> and <code>setNumReduceTasks(Integer)</code> have been removed.</li> <li>The number of reduce tasks should not be set.  By default the number of reduce tasks should match the number of tablets.  Use minimum and maximum reduce tasks to specify boundaries for the number of reduce tasks.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#hdfsoperationsampledataforsplitpoints","title":"<code>hdfs.operation.SampleDataForSplitPoints</code>","text":"<ul> <li>The methods <code>getNumReduceTasks()</code> and <code>setNumReduceTasks(Integer)</code> have been removed.</li> <li>These methods were not required as <code>NumReduceTasks</code> was always set to 1 in any case.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#jobtrackerjobdetail","title":"<code>jobtracker.JobDetail</code>","text":"<ul> <li>The constructors which took <code>userId</code> as a <code>String</code> have been removed.</li> <li>Instead, a <code>User</code> (<code>uk.gov.gchq.gaffer.user.User</code>) should be used in its place. See the Builder for User.</li> <li><code>getUserId</code> and <code>setUserId</code> have also been removed. For getting the <code>UserId</code>, <code>getUser().getUserId()</code> can be used instead. See the Javadoc for User.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#jsonserialisationjsonserialiser","title":"<code>jsonserialisation.JSONSerialiser</code>","text":"<ul> <li>The method <code>update(String jsonSerialiserClass, String jsonSerialiserModules)</code> has been removed.</li> <li>Use <code>update(String jsonSerialiserClass, String jsonSerialiserModules, Boolean strictJson)</code> instead. Passing <code>strictJson</code> as <code>null</code> will result in the same behaviour.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#operationoperation","title":"<code>operation.Operation</code>","text":"<ul> <li>The method <code>asOperationChain(Operation operation)</code> has been removed.</li> <li>Use <code>OperationChain.wrap</code> with the <code>Operation</code> instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#operationimplgetwalks","title":"<code>operation.impl.GetWalks</code>","text":"<ul> <li>The method <code>Builder.operation</code> has been removed.</li> <li>Use the vararg method <code>Builder.addOperations</code> instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#operationimplsplitstore","title":"<code>operation.impl.SplitStore</code>","text":"<ul> <li>This class has been removed.</li> <li>It is replaced by <code>SplitStoreFromFile</code> which is identical except in name.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#operationimpljoinmethodsjoinfunction","title":"<code>operation.impl.join.methods.JoinFunction</code>","text":"<ul> <li>The method <code>join(Iterable keys, String keyName, String matchingValuesName, Match match, Boolean flatten)</code> which was not implemented has been removed.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#restsystemproperty","title":"<code>rest.SystemProperty</code>","text":"<ul> <li><code>GRAPH_ID</code>, <code>GRAPH_HOOKS_PATH</code>, <code>GRAPH_LIBRARY_PATH</code> and <code>GRAPH_LIBRARY_CONFIG</code> have been removed.</li> <li>These config options have been removed in favour of providing a <code>graphConfig</code> JSON and using <code>GRAPH_CONFIG_PATH</code> instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#restservicev2exampleexamplesfactory","title":"<code>rest.service.v2.example.ExamplesFactory</code>","text":"<ul> <li>This class has been removed.</li> <li>It is replaced by <code>uk.gov.gchq.gaffer.rest.factory.ExamplesFactory</code>, which can be used instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#storestoreproperties","title":"<code>store.StoreProperties</code>","text":"<ul> <li>StoreProperties ID (<code>gaffer.store.id</code>) and related methods (<code>getId()</code>, <code>setId(String)</code>) have been removed.</li> <li>The ID of the store properties is instead directly set in the <code>GraphLibrary</code> when adding the <code>StoreProperties</code> with <code>GraphLibrary.add(String graphId, String schemaId, Schema schema, String propertiesId, StoreProperties properties)</code>.</li> <li>See the Javadoc for GraphLibrary for more detail.</li> <li>If you aren't using a <code>GraphLibrary</code>, this change shouldn't affect you as store properties ID is only used in <code>GraphLibrary</code>.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#storecontext","title":"<code>store.Context</code>","text":"<ul> <li>The private constructor <code>Context(User user, Map&lt;String, Object&gt; config, String jobId)</code> has been removed; along with the <code>jobId(String)</code> method.</li> <li>Use <code>Context(User user, Map&lt;String, Object&gt; config)</code> instead. This does not support supplying the Job ID, this will be set automatically. To get the Job ID use <code>.getJobId()</code>.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#storeschematypedefinition","title":"<code>store.schema.TypeDefinition</code>","text":"<ul> <li>The method <code>getSerialiserClass()</code> has been removed. Instead, use <code>getSerialiser()</code> with <code>.getClass()</code> and related methods.</li> <li>The method <code>setSerialiserClass(String)</code> has been removed. Instead, set the Serialiser directly using <code>setSerialiser(Serialiser)</code>.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#storeschemaschema","title":"<code>store.schema.Schema</code>","text":"<ul> <li>Schema ID (<code>gaffer.store.id</code>) and related methods have been removed. The ID is now defined in <code>GraphLibrary</code> when adding the schema.</li> <li><code>timestampProperty</code> and related methods have been removed. Instead, this is specified by setting <code>\"config\": {\"timestampProperty\": \"timestamp\"}</code> (where <code>\"timestamp\"</code> is the property name to use as a time stamp) in the Schema. See this example schema for more info.</li> <li>The method <code>getVertexSerialiserClass()</code> has been removed. It can be replaced by calling <code>vertexSerialiser.getClass()</code> and converting the result as appropriate, e.g. <code>getVertexSerialiserClass()</code> used <code>SimpleClassNameIdResolver.getSimpleClassName(vertexSerialiser.getClass())</code>.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#storelibrarygraphlibrary","title":"<code>store.library.GraphLibrary</code>","text":"<ul> <li>The method <code>addSchema(Schema schema)</code> has been removed. Use <code>addSchema(String id, Schema schema)</code> instead.</li> <li>The method <code>addProperties(StoreProperties properties)</code> has been removed. Use <code>addProperties(String id, StoreProperties properties)</code> instead.</li> <li>Both of these now require the ID to be supplied.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#storeoperationoperationchainvalidator","title":"<code>store.operation.OperationChainValidator</code>","text":"<ul> <li>The method <code>validateViews(Operation op, ValidationResult validationResult, Schema schemaNotUsed, Store store)</code> has been removed. Use <code>validateViews(Operation op, User user, Store store, ValidationResult validationResult)</code> instead, passing <code>user</code> as <code>null</code> will result in the same behaviour.</li> <li>The method <code>validateComparables(Operation op, ValidationResult validationResult, Schema schemaNotUsed, Store store)</code> has been removed. Use <code>validateComparables(Operation op, User user, Store store, ValidationResult validationResult)</code> instead, passing <code>user</code> as <code>null</code> will result in the same behaviour.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#storeoperationhandlernamedcachenamedviewcache","title":"<code>store.operation.handler.named.cache.NamedViewCache</code>","text":"<ul> <li>The method <code>deleteNamedView(String name)</code> has been removed. Use <code>deleteNamedView(String name, User user)</code> instead, passing <code>user</code> as <code>null</code> will result in the same behaviour.</li> <li>The method <code>getNamedView(String name)</code> has been removed. Use <code>getNamedView(String name, User user)</code> instead.</li> <li>The method <code>getAllNamedViews()</code> has been removed. Use <code>getAllNamedViews(User user)</code> instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#typesintegerfreqmap","title":"<code>types.IntegerFreqMap</code>","text":"<ul> <li>This class has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.types.FreqMap</code> instead, this is identical except for using Long rather than Integer.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#typesfunctionintegerfreqmapaggregator","title":"<code>types.function.IntegerFreqMapAggregator</code>","text":"<ul> <li>This class has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.types.function.FreqMapAggregator</code> instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/deprecations/#serialisationintegerfreqmapserialiser","title":"<code>serialisation.IntegerFreqMapSerialiser</code>","text":"<ul> <li>This class has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.FreqMapSerialiser</code> instead.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/","title":"Federated Store Changes","text":"<p>This page contains information on the changes to Gaffer's Federated Store. This functionality was introduced in version <code>2.0.0-alpha-0.4</code> of Gaffer. The main changes were the addition of the Federated Operation, and a change to how results are merged by default.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#the-federated-operation","title":"The Federated Operation","text":"<p>The <code>FederatedOperationChain</code> was removed and replaced with a new Operation, the <code>FederatedOperation</code>. This was added to improve the control you have over how operations are federated. The Federated Operation has 3 key parameters: <code>operation</code>, <code>graphIds</code> and <code>mergeFunction</code>: <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n},\n\"graphIds\": [ \"graphA\", \"graphB\" ],\n\"mergeFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n}\n}\n</code></pre></p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#required-parameter-operation","title":"Required parameter: operation","text":"<p>This is the Operation you wish to be federated to the subgraphs. This can be a single Operation or an OperationChain. If you use an OperationChain, then the whole chain will be sent to the subgraphs.  </p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#optional-parameter-graphids","title":"Optional parameter: graphIds","text":"<p>This is a list of graph IDs which you want to send the operation to.  </p> <p>If the user does not specify <code>graphIds</code> in the Operation, then the <code>storeConfiguredGraphIds</code> for that store will be used. If the admin has not configured the <code>storeConfiguredGraphIds</code> then all graphIds will be used.  </p> <p>For information on sending different operations in one chain to different subgraphs, see below.  </p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#optional-parameter-mergefunction","title":"Optional parameter: mergeFunction","text":"<p>The <code>mergeFunction</code> parameter is the Function you want to use when merging the results from the subgraphs.  </p> <p>If the user does not specify a <code>mergeFunction</code> then it will be selected from the <code>storeConfiguredMergeFunctions</code> for that store. If the admin has not configured the <code>storeConfiguredMergeFunctions</code>, it will contain pre-populated <code>mergeFunctions</code>. Lastly, if a suitable <code>mergeFunction</code> is not found then a default <code>ConcatenateMergeFunction</code> is used.  </p> <p>For example, when GetElements is used as the operation inside a FederatedOperation and the user hasn't specified a <code>mergeFunction</code>, the pre-populated <code>ApplyViewToElementsFunction</code> will be selected from <code>storeConfiguredMergeFunctions</code>, unless the admin configured it to use something else.  </p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#migrating-to-a-federatedoperation","title":"Migrating to a FederatedOperation","text":"<p>Previously, graphIds were selected in queries with the now deprecated option: <code>gaffer.federatedstore.operation.graphIds</code>. This is being supported while users migrate to using a FederatedOperation.  </p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#sending-an-operation-to-specific-stores","title":"Sending an Operation to specific stores","text":"<p>As mentioned, the <code>gaffer.federatedstore.operation.graphIds</code> option is still being supported so if you have an Operation using that option, it will continue to work. Despite the option still being supported, we recommend you migrate to using a FederatedOperation.  </p> <p>The <code>gaffer.federatedstore.operation.graphIds</code> option does not work an OperationChain. Previously, if you wanted to send an entire OperationChain to specific graphs, then you had to use a FederatedOperationChain. This has been replaced by a FederatedOperation with an OperationChain as the payload. For migration, see below.  </p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#deprecated-graphids-option-on-a-single-operation","title":"Deprecated graphIds option on a single Operation","text":"<pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\",\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"graphA\"\n}\n}\n</code></pre>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#new-federatedoperation-graphids-on-a-single-operation","title":"New FederatedOperation graphIds on a single Operation","text":"<pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n},\n\"graphIds\": [ \"graphA\" ]\n}\n</code></pre>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#deprecated-graphids-option-inside-an-operationchain","title":"Deprecated graphIds option inside an OperationChain","text":"<pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"ExampleOperation1\",\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"graphA\"\n}\n},\n{\n\"class\": \"ExampleOperation2\",\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"graphB\"\n}\n}\n]\n}\n</code></pre>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#new-federatedoperation-graphids-inside-an-operationchain","title":"New FederatedOperation graphIds inside an OperationChain","text":"<pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation1\"\n},\n\"graphIds\": [ \"graphA\" ]\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation2\"\n},\n\"graphIds\": [ \"graphB\" ]\n}\n]\n}\n</code></pre>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#breaking-change-removal-of-federatedoperationchain","title":"Breaking change: Removal of FederatedOperationChain","text":"<p>The FederatedOperationChain has been removed, and where you would have used it before you should instead use a FederatedOperation with an OperationChain inside.  </p> <p>This is useful if you have an OperationChain and want to send different parts of the chain to different subgraphs.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#individually-sending-a-sequence-of-operations-to-a-subgraph","title":"Individually sending a sequence of Operations to a subgraph","text":"<p>You could send a sequence of operations within one chain to the same subgraph using <code>graphIds</code>, however, this is not always efficient: <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation1\"\n},\n\"graphIds\": [ \"graphA\" ]\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation2\"\n},\n\"graphIds\": [ \"graphA\" ]\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation3\"\n},\n\"graphIds\": [ \"graphB\" ]\n}\n]\n}\n</code></pre></p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#removed-federatedoperationchain-sending-a-sequence-of-operations-to-a-subgraph","title":"Removed FederatedOperationChain sending a sequence of operations to a subgraph","text":"<p>It is more efficient to group together sequences of Operations that will go to the same subgraph. This used to be done with a FederatedOperationChain: <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperationChain\",\n\"operations\": {\n[\n\"class\": \"ExampleOperation1\",\n\"class\": \"ExampleOperation2\"\n]\n},\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"graphA\"\n}\n},\n{\n\"class\": \"ExampleOperation3\",\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"graphB\"\n}\n}\n]\n}\n</code></pre></p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#new-federatedoperation-sending-a-sequence-of-operations-to-a-subgraph","title":"New FederatedOperation sending a sequence of operations to a subgraph","text":"<p>Now you should instead wrap an OperationChain inside a FederatedOperation: <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": {\n[\n\"class\": \"ExampleOperation1\",\n\"class\": \"ExampleOperation2\"\n]\n}\n},\n\"graphIds\": [ \"graphA\" ]\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation3\"\n},\n\"graphIds\": [ \"graphB\" ]\n}\n]\n}\n</code></pre></p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#default-results-merging","title":"Default results merging","text":"<p>As described above, FederatedStores now have <code>storeConfiguredMergeFunctions</code> that dictate how the FederatedStore will merge results from different subgraphs dependent on the Operation.  </p> <p>In places, these new defaults do differ from previous behaviour, hence results will too. This can be overriden on a per Operation basis using the <code>mergeFunction</code> parameter described above, or a per store basis by overriding <code>storeConfiguredMergeFunctions</code>. The previous behaviour was that all Operation results were concatenated together, this is now a mergeFunction within Gaffer called <code>ConcatenateMergeFunction</code>. Therefore, if you wanted a FederatedOperation to use this old behaviour, you can set the <code>mergeFunction</code> to <code>ConcatenateMergeFunction</code> (as shown above).  </p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#new-merge-function-examples","title":"New Merge function examples","text":"<p>By default, <code>GetElements</code> results will be merged with <code>ApplyViewToElementsFunction</code>. This uses the View from the operation and applies it to all of the results, meaning the results are now re-aggregated and re-filtered using the Schema, locally in the FederatedStore. This makes the results look like they came from one graph, rather than getting back a list of Elements from different subgraphs.  </p> <p>By default, <code>GetTraits</code> results will be merged with <code>CollectionIntersect</code>. This returns the intersection of common store traits from the subgraphs. This behaviour is the same, but now it can be overriden.  </p> <p>By default, <code>GetSchema</code> results will be merged with <code>MergeSchema</code>. This returns an aggregated schema from the subgraphs, unless there is a conflict. This behaviour is the same, but now it can be overriden. For example, you may wish to use the <code>ConcatenateMergeFunction</code> if there is a schema conflict.  </p>"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#default-storeconfiguredmergefunctions","title":"Default storeConfiguredMergeFunctions","text":"Operation Merge function GetElements ApplyViewToElementsFunction GetAllElements ApplyViewToElementsFunction GetSchema MergeSchema GetTraits CollectionIntersect others ConcatenateMergeFunction"},{"location":"change-notes/migrating-from-v1-to-v2/federation-changes/#cache-name-suffixes","title":"Cache Name Suffixes","text":"<p>Gaffer Caches now include suffixes in the names of cache entries. This allows for multiple cache entries for different graphs to co-exist using the same cache implementation instance without any conflicts.</p> <p>These suffixes can be customised which allows for graphs to share the same cache entries if desired. This only applies if the relevant graphs are all configured to use the same cache instance. For example, load balancing Federated Store instances sharing same set of sub-graphs, or a shared cache entry for Named Operations allowing multiple graphs to use the same set of these operations.</p> <p>If you are upgrading from Gaffer 1.x, then you may need to examine how you currently use caches and whether any of your graphs rely on sharing the same cache (e.g. sharing Named Operations between Federated Store sub-graphs).</p> <p>For details on configuring cache suffixes, see the cache section of the Store Guide.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/log4j/","title":"Log4j in Gaffer","text":"<p>This page contains information on how logging is done in Gaffer and on previous use of Log4j in Gaffer.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/log4j/#log4j-version","title":"Log4j Version","text":"<p>Log4j version 1 (1.2.17), was used by Gaffer versions 1.21 and below. From Gaffer 1.22, Log4j was replaced with Reload4j. The newer version of Log4j, Log4j2 - which is susceptible to the major Log4Shell attack, has never been used by Gaffer or its dependencies. </p>"},{"location":"change-notes/migrating-from-v1-to-v2/log4j/#how-logging-is-done","title":"How Logging is done","text":"<p>Gaffer uses SLF4J (Simple Logging Facade for Java) for all logging. This is a framework/abstraction layer which allows for different loggers to be used (known as bindings). The binding used by Gaffer is <code>org.slf4j:slf4j-reload4j:jar:1.7.36</code>.</p>"},{"location":"change-notes/migrating-from-v1-to-v2/log4j/#impact-of-log4j-removal-on-projects-incorporating-gaffer","title":"Impact of Log4j removal on projects incorporating Gaffer","text":"<p>Gaffer now uses Reload4j via SLF4J. This may impact projects which are using Gaffer if they are using Log4j directly or through a transitive dependency. To help avoid dependency conflicts, we have configured <code>maven-enforcer-plugin</code> to block use of Log4j with Gaffer. If you are using Gaffer in your project and your build fails because of this plugin, you will need to add a dependency exclusion to any dependencies which depend transitively on Log4j. These can be found by using the Maven dependency tree (ideally in verbose mode).</p>"},{"location":"change-notes/migrating-from-v1-to-v2/log4j/#dependencies-of-gaffer-using-log4j-1217","title":"Dependencies of Gaffer using Log4j 1.2.17","text":"<p>Some major Gaffer dependencies (listed below) use Log4j internally (either directly or through SLF4J). From Gaffer version 1.22 these transitive dependencies are excluded and replaced with Reload4j, such that Log4j does not appear on the classpath at all.</p> <ul> <li>GCHQ Koryphe 1.14.0 - Uses SLF4J with Log4j.</li> <li>Apache HBase 1.3.0 - Multiple artefacts used from the group <code>org.apache.hbase</code>. All depend directly on Log4j.</li> <li>Apache Hadoop 2.6.5 - Multiple artefacts used from the group <code>org.apache.hadoop</code>. All depend directly on Log4j.</li> <li>Apache Accumulo 1.9.3 - Multiple artefacts used from the group <code>org.apache.accumulo</code>. All depend directly on Log4j.</li> <li>Apache Kafka 0.10.0.0 - Artefact depends indirectly on Log4j through a sub dependency (<code>com.101tec:zkclient</code>).</li> <li>Apache Spark 2.3.2 - Artefact depends directly on Log4j.</li> </ul>"},{"location":"change-notes/migrating-from-v1-to-v2/log4j/#log4j-vulnerabilities","title":"Log4j Vulnerabilities","text":"<p>Current vulnerabilities in Log4j 1.12.17 relate to the JDBC, SMTP and JMS appenders, the JMS Sink and the Socket Server. Gaffer never used any of this. In its default configuration, we don't believe Gaffer is vulnerable to any of these problems. If the Log4j configuration is altered, changes could be made which may cause Gaffer to be vulnerable to one or more of the above vulnerabilities. Standard security processes to prevent unauthorised access and modification of configuration files should preclude this possibility.</p>"},{"location":"development-guide/introduction/","title":"Developer Guide","text":"<p>This development guide will take you through the steps required to start development work with Gaffer. This guide is not for end users of Gaffer and is instead targeted at those who wish to develop Gaffer or build Gaffer extensions.</p>"},{"location":"development-guide/introduction/#source-control","title":"Source Control","text":"<p>Development of Gaffer is done on the GCHQ/Gaffer GitHub repository, or other Gaffer GitHub repositories under the GCHQ Organization.</p>"},{"location":"development-guide/introduction/#repositories","title":"Repositories","text":"<p>The core Java Gaffer repo contains the main Gaffer product. If you are completely new to Gaffer you can try out our Road Traffic Demo or look at our example deployment guide.</p> <p>The gafferpy repo contains a python shell that can execute operations.</p> <p>The gaffer-docker repo contains the code needed to run Gaffer using Docker or Kubernetes. More information about running a containerised instance of Gaffer can be found in our adminstration guide.</p> <p>It is also worth noting the koryphe repo as this is a key dependency for Gaffer. It contains an extensible functions library for filtering, aggregating and transforming data based on the Java Function API.</p>"},{"location":"development-guide/introduction/#building-gaffer","title":"Building Gaffer","text":""},{"location":"development-guide/introduction/#build-instructions","title":"Build Instructions","text":"<p>The latest instructions for building Gaffer are in our README.</p>"},{"location":"development-guide/introduction/#supported-platforms","title":"Supported Platforms","text":"<p>A recent Linux distribution is recommended, although it should be possible to build Gaffer on any system which has the latest version of Java 8 or 11 (the Gaffer codebase uses Java 8). Running tests on Windows is not recommended due to complexities with native libraries.</p>"},{"location":"development-guide/introduction/#contributing","title":"Contributing","text":"<p>We welcome contributions to the project. See our ways of working for more detail. All contributors must sign the GCHQ Contributor Licence Agreement.</p> <p>You can quickly and easily contribute towards Gaffer using a remote coding environment such as GitHub Codespaces or Gitpod.</p>"},{"location":"development-guide/remote-coding-environments/","title":"Remote Coding Environments For Gaffer","text":"<p>Gaffer is now configured for remote coding environemnts such as GitHub Codespaces and Gitpod. This addition allows for an easier and faster way to contribute to Gaffer with no manual setup or need to download dependencies to a local machine.</p>"},{"location":"development-guide/remote-coding-environments/#github-codespaces","title":"GitHub Codespaces","text":"<p>To use GitHub Codespaces simply open the Gaffer repository, click the \"Code\" button drop down, and then the option labeled \"Create codespace on develop\".</p> <p>This will launch a Codespaces environment with all the configuration needed to contribute to Gaffer. See the [GitHub documentation for more information on Codespaces] (https://github.com/features/codespaces).</p>"},{"location":"development-guide/remote-coding-environments/#gitpod","title":"Gitpod","text":"<p>To use Gitpod you can simply prefix any GitHub URL with <code>gitpod.io/#</code> and follow the steps from there. You can also install the extension on your web browser. This adds a button to GitHub that does the prefixing for you.</p> <p>Our custom GitPod configuration removes your Git commit email so you will need to re-configure your Git commit email. You can also configure your Git commit email to be a private GitHub email or a custom email too.. Once done your environment will be all set to contribute to the Gaffer repository.</p> <p>See the Gitpod documentation for more information..</p>"},{"location":"development-guide/rest-api-sketches/","title":"Using Sketches with the REST API","text":"<p>This page explains some nuances and special steps required when using classes from the Sketches library with the REST API. If you just want to know how to use the sketches libraries to use cardinality, see the cardinality docs page.</p>"},{"location":"development-guide/rest-api-sketches/#sketches-library","title":"Sketches Library","text":"<p>To learn more about the Sketches library see advanced properties reference page.  The sketches library is included by default with the Map and Accumulo stores. This is because the <code>sketches-library</code> is a dependency in each of the respective store modules' poms. As well as this, the serialisation is handled by the fact the  SketchesJsonModules  is returned by the <code>getJsonSerialiserModules</code> method in both the  Map  and Accumulo  property classes. The modules are then loaded by the JSONSerialiser  and used during the deserialisation of the REST JSON queries.</p>"},{"location":"development-guide/rest-api-sketches/#hyperloglog-sketches","title":"HyperLogLog sketches","text":"<p>Gaffer currently supports the Datasketches HllSketch and Clearspring HyperLogLogPlus algorithms. The Clearspring HyperLogLogPlus has been deprecated in Gaffer and we recommend the Datasketches HllSketch to users for the reasons described in the advanced properties guide.  </p> <p>The <code>HllSketch</code> and <code>HyperLogLogPlus</code> sketches can be used to store an approximation of  cardinality of an element. The JSON of the query is converted to Java  objects during deserialisation using the <code>JSONSerialiser</code>. During the  deserialisation, the sketch's JSON representation is converted to a Java  object using the <code>ObjectMapper</code> module which uses the relevant deserialiser ( HyperLogLogPlusJsonDeserialiser or HllSketchJsonDeserialiser).</p>"},{"location":"development-guide/rest-api-sketches/#creating-cardinality-values-over-json","title":"Creating cardinality values over JSON","text":"<p>When adding or updating a cardinality object over the rest api, you specify the vertex values to add to the sketch.  This is done by either using the <code>offers</code> field with <code>HyperLogLogPlus</code>, or the <code>values</code> field with <code>HllSketch</code>.  The HyperLogLog object is then instantiated and updated with the values. The object can then be serialised and stored in the datastore.  The vertex object is serialised using the <code>toString</code> representation of the object.</p> Note <p>As the algorithms use the <code>toString</code> method, any user defined type  introduced must override the <code>toString</code> method returning meaningful string  value representing the object rather than the default class instance  identifier. User defined types can be introduced by either adding further  types  to Gaffer or by adding a jar with the extra type(s) to the Gaffer  classpath on startup.</p> <p>Depending on whether you are using <code>HyperLogLogPlus</code> or <code>HllSketch</code>, either the  <code>HyperLogLogPlusWithOffers</code> or the  <code>HllSketchWithValues</code>  respectively is responsible for the JSON deserialisation. The helper classes wrap the underlying sketch and includes the following annotation on  the <code>offers</code>/<code>values</code> field:</p> <pre><code>@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = \"class\")\n</code></pre> <p>This signals to the Jackson <code>ObjectMapper</code> that it needs to look for the  <code>class</code> field in each object and translate to the correct object type.</p>"},{"location":"development-guide/rest-api-sketches/#primitive-data-types-over-json","title":"Primitive data types over JSON","text":"<p>Primitive types are converted to the correct format by Jackson  <code>ObjectMapper</code> automatically. Here are some examples of the values:</p> StringLongDouble <p><code>\"values\": [\"valueA\", \"value2\",...]</code></p> <p><code>\"values\": [1, 2,...]</code></p> <p><code>\"values\": [1.1, 2.2,...]</code></p>"},{"location":"development-guide/rest-api-sketches/#non-primitive-data-types-over-json","title":"Non-primitive data types over JSON","text":"<p>In order to convert non-primitive vertex values (like <code>TypeSubTypeValue</code>) to Java objects, the JSON values need to contain the special field class  containing the class name of the object. The <code>deserialiser</code> uses this <code>class</code>  field when deserialising using the JSONSerialiser <code>deserialise</code> method. </p> <p>Here are the Gaffer user defined types:</p> FreqMapCustomMapTypeValueTypeSubTypeValue <pre><code>\"values\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.types.FreqMap\",\n\"test\": 1\n},\n...\n]\n</code></pre> <pre><code>\"values\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.types.CustomMap\",\n\"keySerialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.serialisation.implementation.BooleanSerialiser\"\n},\n\"valueSerialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.serialisation.implementation.BooleanSerialiser\"\n},\n\"jsonStorage\": []\n},\n...\n]\n</code></pre> <pre><code>\"values\": [\n{\n\"class\" : \"uk.gov.gchq.gaffer.types.TypeValue\",\n\"type\" : \"type\",\n\"value\" : \"value\"\n},\n...\n]\n</code></pre> <pre><code>\"values\": [\n{\n\"class\" : \"uk.gov.gchq.gaffer.types.TypeSubTypeValue\",\n\"type\" : \"type\",\n\"subType\" : \"subType\",\n\"value\" : \"value\"\n},\n...\n]\n</code></pre> Note <p>The subclass fields must also have the <code>class</code> field set (for  example, the <code>keySerialiser</code> in the <code>CustomMap</code> type) if not a standard Java Object  so that the Jackson <code>ObjectMapper</code> knows how to convert the correct values  to Java objects.</p>"},{"location":"development-guide/rest-api-sketches/#composing-using-java","title":"Composing using Java","text":"<p>If you are composing the <code>HllSketch</code> with values using Java, before  converting to JSON and sending via REST, you need ensure that the <code>values</code>  objects are translated to JSON with the correct <code>class</code> field added.  To make sure of this, you could add the <code>sketches-library</code> JAR and use the  HllSketchWithValues  object to construct your query (or the equivalent for HyperLogLogPlus).  This way you know that all the objects have the  correct field added. You can then convert the <code>HllSketchWithValues</code> to  JSON using the  JSONSerialiser <code>serialisation</code> method: <pre><code>final HllSketchWithValues hllSketchWithValues = JSONSerialiser.deserialise(treeNode.toString(), HllSketchWithValues.class);\n</code></pre> If you want to create your own class instead, rather than using  <code>HllSketchWithValues</code>, ensure  that the <code>values</code> list has the correct annotation so the <code>class</code> is added on  conversion using by the Jackson <code>ObjectMapper</code>:</p> <pre><code>@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = \"class\")\nprivate List&lt;Object&gt; values = new ArrayList&lt;&gt;();\n</code></pre>"},{"location":"development-guide/rest-api-sketches/#composing-using-python","title":"Composing using Python","text":"<p>An example of using Python to add a <code>HyperLogLogPlus</code> property with a <code>TypeSubTypeValue</code> offer: <pre><code>g.AddElements(\ninput=[\ng.Entity(\nvertex=\"A\",\ngroup=\"cardinality\",\nproperties={\n\"hllp\": g.hyper_log_log_plus([\n{\n\"class\" : \"uk.gov.gchq.gaffer.types.TypeSubTypeValue\",\n\"type\" : \"t\",\n\"subType\" : \"st\",\n\"value\" : \"B\"\n}\n])\n}\n)\n]\n)\n</code></pre></p> <p>An example of using Python to add a <code>HllSketch</code> property with a <code>TypeSubTypeValue</code> offer: <pre><code>g.AddElements(\ninput=[\ng.Entity(\nvertex=\"A\",\ngroup=\"cardinality\",\nproperties={\n\"hllSketch\": g.hll_sketch([\n{\n\"class\" : \"uk.gov.gchq.gaffer.types.TypeSubTypeValue\",\n\"type\" : \"t\",\n\"subType\" : \"st\",\n\"value\" : \"B\"\n}\n])\n}\n)\n]\n)\n</code></pre></p>"},{"location":"development-guide/rest-api-sketches/#adding-user-defined-vertex-types-into-offers","title":"Adding user defined vertex types into offers","text":"<p>To add a user defined type you must ensure that:</p> <ul> <li>the type is on the Gaffer classpath</li> <li>the type must override the <code>toString</code> method</li> <li>the type contains the correct annotations if you are converting from Java to   JSON before sending via REST</li> </ul> <p>The following user defined type example features the annotation required as  well as the <code>@Override</code> of the <code>toString</code> method:</p> <pre><code>@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = \"class\")\npublic class ExampleType implements Comparable&lt;ExampleType&gt;, Serializable {\nprivate String value...;\n// getters and setters\n@Override\npublic String toString() {\nreturn ...;\n}\n}\n</code></pre>"},{"location":"development-guide/ways-of-working/","title":"Ways of Working","text":""},{"location":"development-guide/ways-of-working/#git-branching-model","title":"Git branching model","text":"<p>We have adopted the GitFlow Branching Model in order to support both Gaffer v1 and v2: </p>"},{"location":"development-guide/ways-of-working/#issues","title":"Issues","text":"<p>Where possible a pull request should correlate to a single GitHub issue. An issue should relate to a single functional or non-functional change - changes to alter/improve other pieces of functionality should be addressed in a separate issue in order to keep reviews atomic. The reasoning behind code changes should be documented in the GitHub issue. All resolved issues should be included in the next GitHub milestone, this enables releases to be linked to the included issues. If a code change requires users of Gaffer to make changes in order for them to adopt it then the issue should be labelled 'migration-required' and a comment should be added similar to:</p> <pre><code>### Migration Steps\n\n[Description of what needs to be done to adopt the code change with examples]\n</code></pre>"},{"location":"development-guide/ways-of-working/#workflow","title":"Workflow","text":"<ul> <li>Assign yourself to the issue</li> <li>Create a new branch off develop using pattern: <code>gh-[issue number]-[issue-title]</code></li> <li>Commit your changes using descriptive commit titles</li> <li>Check and push your changes</li> <li>Create a pull request (PR) to merge your branch into develop, prefixing the PR title with \"Gh-[issue number]: \"</li> <li>If you named the branch and PR correctly, the PR should have \"Resolve #[issue-number]\" automatically added to the description after it is made. If it doesn't, then please add the issue it will resolve as a \"Linked issue\"</li> <li>If there is a significant change, please follow the same process to document the change in gaffer-doc</li> <li>The pull request will be reviewed and following any changes and approval your branch will be squashed and merged into develop</li> <li>Delete the branch</li> <li>The issue will be closed automatically</li> </ul>"},{"location":"development-guide/ways-of-working/#pull-requests","title":"Pull Requests","text":"<p>Pull requests will undergo a review by a Gaffer committer to check the code changes are compliant with our coding style. This is a community so please be respectful of other members - offer encouragement, support and suggestions. </p> <p>As described in our git branching model - please raise pull requests to merge your changes in our develop branch.</p> <p>When pull requests are accepted, the reviewer should squash and merge them. This is because it keeps the develop branch clean and populated with only merge commits, rather than intermediate ones. As well as this, it makes everyone's job reviewing pull requests easier as any insecure and unreviewed intermediate commits are not included into the develop branch.</p> <p>Please agree to the GCHQ OSS Contributor License Agreement before submitting a pull request. Signing the CLA is enforced by the cla-assistant.</p>"},{"location":"development-guide/ways-of-working/#documentation","title":"Documentation","text":"<p>As mentioned before, any significant changes in a PR should be accompanied with an addition to Gaffer's documentation: gaffer-doc. Smaller changes should be self documented in the tests. With this approach, any large feature or change has user friendly documentation, whereas technical or implementation details are documented for developers by the tests.</p>"},{"location":"development-guide/ways-of-working/#coding-style","title":"Coding style","text":""},{"location":"development-guide/ways-of-working/#java","title":"Java","text":"<p>Please ensure your coding style is consistent with the rest of the Gaffer project and the Google Java Style Guide. Your changes should pass the checkstyle and spotless plugins that are part of the continuous integration pipeline and check for code formatting and licenses. Before you push your changes you can check the checkstyle plugin passes with <code>mvn checkstyle:check</code> and check the spotless plugin passes with <code>mvn spotless:check</code>.</p>"},{"location":"development-guide/ways-of-working/#python","title":"Python","text":"<p>Please ensure your coding style is consistent with the rest of the Gaffer project and the PEP 8 Style Guide. However, there are a few exceptions to the standards set by PEP8: * Module level imports at the top of the file - this will not be enforced but is recommended where it does not cause issues with the code generated by Fishbowl. * Max line length of 79 characters - the max line length that will be enforced in this project has been increased to 100 characters.</p> <p>Before you create a PR for your changes you can use autopep8 to check and fix any styling issues. The following can be run which will take into account the rule exceptions mentioned above. <code>autopep8 --exit-code -r -i -a -a --max-line-length 100 --ignore E402 .</code></p>"},{"location":"development-guide/ways-of-working/#javadoc","title":"Javadoc","text":"<p>Ensure your java code has sufficient javadocs explaining what the section of code does and the intended use of it. Javadocs should be used in addition to clean readable code.</p> <p>In particular: * All public classes (not required for test classes unless an explanation of the testing is required) * public methods (not required if the functionality is obvious from the method name) * public constants (not required if the constant is obvious from the name)</p>"},{"location":"development-guide/ways-of-working/#tests","title":"Tests","text":"<ul> <li>All new code should be unit tested. Where this is not possible the code should be invoked and the functionality should be tested in an integration test. In a small number of cases this will not be possible - instead steps to verify the code should be thoroughly documented.</li> <li>Tests should cover edge cases and exception cases as well as normal expected behavior.</li> <li>Keep each test decoupled and don't rely on tests running in a given order - don't save state between tests.</li> <li>For a given code change, aim to improve the code coverage.</li> <li>Unit test classes should test a single class and be named [testClass]Test.</li> <li>Integration test classes should be named [functionalityUnderTest]IT.</li> <li>Tests should be readable and self documenting.</li> <li>Each test should focus on testing one small piece of functionality invoked from a single method call.</li> <li>Tests should use JUnit 5 and assertJ.</li> <li>We suggest the following pattern:</li> </ul> <pre><code>@Test\npublic void should[DoSomething|ReturnSomething] {\n// Given\n[Setup your test here]\n// When\n[Invoke the test method]\n// Then\n[assertThat the method did what was expected]\n}\n</code></pre>"},{"location":"development-guide/ways-of-working/#gaffer-2","title":"Gaffer 2","text":"<p>During the Gaffer 2 development process there was a v2-alpha branch, which acted as the develop branch for changes staged for Gaffer 2. This branch is no longer in use and can be ignored.</p>"},{"location":"development-guide/example-deployment/project-setup/","title":"Example Deployment","text":"<p>This guide will run through the start up and deployment of a basic Gaffer instance. It will cover how to write a basic Gaffer Schema from scratch along with using the pre-made containers to run the Gaffer rest API and Accumulo based data store.</p> <p>Warning</p> <p>Please be aware that the example is only intended to demonstrate the core Gaffer concepts it is not a production example. Various additional configuration to Accumulo and the HDFS set up would be required to make this production ready and likely be specific to your infrastructure.</p>"},{"location":"development-guide/example-deployment/project-setup/#the-example-graph","title":"The Example Graph","text":"<p>For this basic example we will attempt to recreate the graph in the following diagram consisting of two nodes (vertexes) with one directed edge between them.</p> <pre><code>graph LR\n    A([\"Person\n\n        name: marko\n        age: 29\"])\n    --\n    \"Created\n     weight: 0.4\"\n    --&gt;\n    B([\"Software\n\n        name: lop\n        lang: java\"])</code></pre> <p>This data describes one individual and a single piece of software that has been created by that individual. The data will be loaded into the graph from a CSV file that follows the Neo4j export syntax, this demonstrates how Gaffer can be used and how it can interact, model and query data from other popular graph databases. Even with this basic graph we should be able to start building queries to ask questions like \"Who created the software called 'lop'?\" and \"How much did 'marko' contribute to the software called 'lop'?\" etc.</p> <p>To go with the diagram above the following CSV file (both raw and rendered are provided) represents the graph in Neo4j syntax.</p> <p>Please note that Gaffer often requires additional information about the data such as, <code>:String</code> on the column headers to help with typing of the values. This is demonstrated below in the raw file. There's more detail on this in the OpenCypher documentation.</p> TableCSV _id name age lang _labels _start _end _type weight v1 marko 29 Person v2 lop java Software e1 v1 v2 Created 0.4 <pre><code>_id,name:String,age:Int,lang:String,_labels,_start,_end,_type,weight:Float\nv1,marko,29,,Person,,,,\nv2,lop,,java,Software,,,,\ne1,,,,,v1,v2,Created,0.4\n</code></pre>"},{"location":"development-guide/example-deployment/project-setup/#project-setup","title":"Project Setup","text":"<p>First you must set up the files and directories you will need for the instance. As it stands there are a couple of different ways to run a Gaffer project this example will use a logical structure that suites a stand alone deployment consisting of the following file structure:</p> <p>Example Gaffer project structure</p> <p>Click the plus symbols for a brief description of each file</p> <pre><code>\u251c\u2500\u2500 config\n\u2502   \u251c\u2500\u2500 accumulo\n\u2502   \u2502   \u251c\u2500\u2500 accumulo-client.properties\n\u2502   \u2502   \u251c\u2500\u2500 accumulo-env.sh\n\u2502   \u2502   \u251c\u2500\u2500 accumulo.properties\n\u2502   \u2502   \u251c\u2500\u2500 core-site.xml\n\u2502   \u2502   \u2514\u2500\u2500 log4j.properties\n\u2502   \u251c\u2500\u2500 gaffer\n\u2502   \u2502   \u251c\u2500\u2500 application.properties #(1)!\n\u2502   \u2502   \u251c\u2500\u2500 data                   #(2)!\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 neo4jExport.csv\n\u2502   \u2502   \u251c\u2500\u2500 graph\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 graphConfig.json #(3)!\n\u2502   \u2502   \u251c\u2500\u2500 schema\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 elements.json #(4)!\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 types.json    #(5)!\n\u2502   \u2502   \u2514\u2500\u2500 store\n\u2502   \u2502       \u251c\u2500\u2500 operationsDeclarations.json #(6)!\n\u2502   \u2502       \u2514\u2500\u2500 store.properties            #(7)!\n\u2502   \u2514\u2500\u2500 hdfs\n\u2502       \u251c\u2500\u2500 core-site.xml\n\u2502       \u251c\u2500\u2500 hdfs-site.xml\n\u2502       \u2514\u2500\u2500 log4j.properties\n\u2514\u2500\u2500 docker-compose.yaml #(8)!\n</code></pre> <ol> <li>Properties file that generally sets the file locations of other Gaffer     configs e.g. schemas (note these are the absolute paths inside the     container).</li> <li>Any data files, e.g. CSV, to be made available to the Gaffer container.</li> <li>The main graph config file to set various properties of the overall graph.</li> <li>This file holds the schema outlining the elements in the graph, e.g. the nodes (aka entities) and edges.</li> <li>This file defines the different data types in the graph and how they are serialised to Java classes.</li> <li>Config file for additional Gaffer operations and set the class to handle them on the store.</li> <li>The General store properties, sets up what store to use and any additional configuration.</li> <li>This file controls which containers will be started up and the configuration of them to ensure correct ports and files are available.</li> </ol> <p>All the files in the <code>config/accumulo/</code> and <code>config/hdfs/</code> directories will be copied directly from the two locations in the Gaffer docker repo, here and here. The configuration of these are out of scope of this example but are covered in other sections of the documentation. The main focus of this guide will be on the configuration files under the <code>config/gaffer/</code> directory.</p>"},{"location":"development-guide/example-deployment/project-setup/#configuration-files","title":"Configuration Files","text":"<p>There's a full break down of Gaffer schema files on the next page, this section will instead cover the smaller additional config files that go along side the main Gaffer schema to tweak other aspects of the graph. The location of these files will need to be volume mounted into the container for them to be included in the deployment which is covered in more detail later in the guide.</p> <p>Note</p> <p>Many of these files have defaults already in the standard <code>gaffer-rest</code> container image, but its useful to still include them in the project to allow easy configuration.</p>"},{"location":"development-guide/example-deployment/project-setup/#application-properties","title":"Application Properties","text":"<p>This is probably the simplest configuration file in the Gaffer deployment. In general it borrows a concept from Spring Boot to allow changing the context root and any properties related to Gaffer. In the example that follows we use it to set the file location properties of where the other config files are (inside the container).</p> application.properties<pre><code>gaffer.schemas=/gaffer/schema\ngaffer.storeProperties=/gaffer/store/store.properties\ngaffer.graph.config=/gaffer/graph/graphConfig.json\n</code></pre>"},{"location":"development-guide/example-deployment/project-setup/#graph-configuration","title":"Graph Configuration","text":"<p>The graph configuration file is a JSON file that configures few bits of the Gaffer graph. Primarily it is used to set the name and description along with any additional hooks to run before an operation chain e.g. to impose limits on max results etc. For the example as, it is a very basic graph we just set the name and short description.</p> graphConfig.json<pre><code>{\n\"graphId\": \"ExampleGraph\",\n\"description\": \"An example graph\"\n}\n</code></pre>"},{"location":"development-guide/example-deployment/project-setup/#store-properties","title":"Store Properties","text":"<p>The store properties file is used to configure how Gaffer will store its data. There are a few different stores available for Gaffer, these are explained in more detail in the reference documentation, but by default you must provide a store class and a store properties class. For this example we are using an Accumulo store as it is recommended for efficient storage and retrieval of large data volumes. It's set up requires a few custom properties which are outlined in the following file.</p> store.properties<pre><code>gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.AccumuloStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\n# Accumulo specific config\naccumulo.instance=accumulo\naccumulo.zookeepers=zookeeper\naccumulo.user=root\naccumulo.password=secret\n# General store config\ngaffer.cache.service.class=uk.gov.gchq.gaffer.cache.impl.HashMapCacheService\ngaffer.store.job.tracker.enabled=true\ngaffer.store.operation.declarations=/gaffer/store/operationsDeclarations.json\n</code></pre>"},{"location":"development-guide/example-deployment/project-setup/#operations-declarations","title":"Operations Declarations","text":"<p>The operation declarations file is a way of enabling additional operations in Gaffer. By default there are some built in operations already available (the rest API has a get all operations request to see a list), but its likely you might want to enable others or add your own custom ones. As the example will load its data from a local CSV file we can activate a couple of additional operations using the following file.</p> operationsDeclarations.json<pre><code>{\n\"operations\": [\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ImportFromLocalFile\",\n\"handler\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ImportFromLocalFileHandler\"\n}\n},\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ExportToLocalFile\",\n\"handler\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ExportToLocalFileHandler\"\n}\n}\n]\n}\n</code></pre> <p>The two additional operations already exist in Gaffer (in the code base: ImportFromLocalFile and ExportToLocalFile), what this file is doing is essentially activating them and setting the handler class for them. The <code>ImportFromLocalFile</code> usage is demonstrated in the using the API section to load some data.</p> <p>This operation allows us to pass a local CSV file (in the container) which will be read line by line and get a stream of the line strings. This is very useful when we start using Operation Chains as we can pass this stream of data as the input to the next operation in the chain similar to shell pipes.</p> <p>Note</p> <p>The location of the file needs to be set via the store properties file using the <code>gaffer.store.operation.declarations</code> property (see previous section).</p>"},{"location":"development-guide/example-deployment/running-the-deployment/","title":"Running the Deployment","text":"<p>To run the containers there are a couple of options but primarily the two main ways are with either Docker Compose or Kubernetes (via Helm), the gaffer-docker repository has some examples of how to run both.</p>"},{"location":"development-guide/example-deployment/running-the-deployment/#docker-compose","title":"Docker Compose","text":"<p>For this example we will use a slightly modified version of the docker compose config file used in the repository.</p> docker-compose.yaml <pre><code>version: \"3.7\"\nservices:\nzookeeper:\nimage: zookeeper:${ZOOKEEPER_VERSION}\nhealthcheck:\ntest: echo ruok | nc 127.0.0.1 2181 | grep imok\ninterval: 30s\ntimeout: 5s\nretries: 3\ncontainer_name: zookeeper\nhostname: zookeeper\nenvironment:\n- ZOO_SERVERS=server.1=zookeeper:2888:3888;2181\n- ZOO_4LW_COMMANDS_WHITELIST=*\nvolumes:\n- /data\n- /datalog\nhdfs-namenode:\nimage: gchq/hdfs:${HADOOP_VERSION}\ndepends_on:\nzookeeper:\ncondition: service_healthy\nhealthcheck:\ntest: curl -f http://localhost:9870 || exit 1\ninterval: 30s\ntimeout: 10s\nretries: 3\ncommand: namenode\ncontainer_name: hdfs-namenode\nhostname: hdfs-namenode\nenvironment:\n- HADOOP_CONF_DIR=${HADOOP_CONF_DIR}\nports:\n- 9870:9870\nvolumes:\n- ./configs/hdfs:${HADOOP_CONF_DIR}:ro\n- /var/log/hadoop\n- /data1\n- /data2\nhdfs-datanode:\nimage: gchq/hdfs:${HADOOP_VERSION}\ndepends_on:\nhdfs-namenode:\ncondition: service_healthy\ncommand: datanode\ncontainer_name: hdfs-datanode\nhostname: hdfs-datanode\nenvironment:\n- HADOOP_CONF_DIR=${HADOOP_CONF_DIR}\nvolumes:\n- ./configs/hdfs:${HADOOP_CONF_DIR}:ro\n- /var/log/hadoop\n- /data1\n- /data2\naccumulo-master:\nimage: gchq/gaffer:${GAFFER_VERSION}-accumulo-${ACCUMULO_VERSION}\ndepends_on:\nhdfs-namenode:\ncondition: service_healthy\nhealthcheck:\ntest: cat /proc/net/tcp | grep 270F\ninterval: 30s\ntimeout: 5s\nretries: 3\nstart_period: 10s\nbuild:\ncontext: .\nargs:\nGAFFER_VERSION: ${GAFFER_VERSION}\nBASE_IMAGE_NAME: gchq/accumulo\nBASE_IMAGE_TAG: ${ACCUMULO_VERSION}\ncommand: master\ncontainer_name: accumulo-master\nhostname: accumulo-master\nenvironment:\n- ACCUMULO_CONF_DIR=${ACCUMULO_CONF_DIR}\n- HADOOP_USER_NAME=hadoop\nvolumes:\n- ./configs/accumulo:${ACCUMULO_CONF_DIR}:ro\n- /var/log/accumulo\naccumulo-tserver:\nimage: gchq/gaffer:${GAFFER_VERSION}-accumulo-${ACCUMULO_VERSION}\ndepends_on:\naccumulo-master:\ncondition: service_healthy\nhealthcheck:\ntest: cat /proc/net/tcp | grep 270D\ninterval: 30s\ntimeout: 5s\nretries: 3\ncommand: tserver\ncontainer_name: accumulo-tserver\nhostname: accumulo-tserver\nenvironment:\n- ACCUMULO_CONF_DIR=${ACCUMULO_CONF_DIR}\n- HADOOP_USER_NAME=hadoop\nvolumes:\n- ./configs/accumulo:${ACCUMULO_CONF_DIR}:ro\n- /var/log/accumulo\naccumulo-monitor:\nimage: gchq/gaffer:${GAFFER_VERSION}-accumulo-${ACCUMULO_VERSION}\ndepends_on:\naccumulo-master:\ncondition: service_healthy\ncommand: monitor\ncontainer_name: accumulo-monitor\nhostname: accumulo-monitor\nenvironment:\n- ACCUMULO_CONF_DIR=${ACCUMULO_CONF_DIR}\n- HADOOP_USER_NAME=hadoop\nports:\n- 9995:9995\nvolumes:\n- ./configs/accumulo:${ACCUMULO_CONF_DIR}:ro\n- /var/log/accumulo\naccumulo-gc:\nimage: gchq/gaffer:${GAFFER_VERSION}-accumulo-${ACCUMULO_VERSION}\ndepends_on:\naccumulo-master:\ncondition: service_healthy\ncommand: gc\ncontainer_name: accumulo-gc\nhostname: accumulo-gc\nenvironment:\n- ACCUMULO_CONF_DIR=${ACCUMULO_CONF_DIR}\n- HADOOP_USER_NAME=hadoop\nvolumes:\n- ./configs/accumulo:${ACCUMULO_CONF_DIR}:ro\n- /var/log/accumulo\ngaffer-rest:\nimage: gchq/gaffer-rest:${GAFFER_VERSION}-accumulo-${ACCUMULO_VERSION}\ndepends_on:\naccumulo-tserver:\ncondition: service_healthy\nports:\n- 8080:8080\nvolumes:\n- ./configs/gaffer/application.properties:/gaffer/config/application.properties:ro\n- ./configs/gaffer/data:/gaffer/data:ro\n- ./configs/gaffer/graph:/gaffer/graph:ro\n- ./configs/gaffer/schema:/gaffer/schema:ro\n- ./configs/gaffer/store:/gaffer/store:ro\n</code></pre> <p>If you are not familiar with docker or docker compose there are plenty of resources online to get up to speed but essentially, it is a config file that will run up multiple containers with various bits of configuration which is a lot easier than typing out multiple docker commands!</p> <p>Some key bits you may want to configure in the file are the shared volumes (under the <code>volumes</code> section). The locations in the example file assume you use the project structure from the example setup but if you change any of the locations then they will need updating.</p> <p>To run up the cluster its as easy as running the following from the root of the project.</p> <pre><code>docker compose up\n</code></pre> <p>The above configuration will start the following containers:</p> <ul> <li>Zookeeper</li> <li>HDFS<ul> <li>Datanode</li> <li>Namenode</li> </ul> </li> <li>Accumulo<ul> <li>Monitor</li> <li>GC</li> <li>tServer</li> <li>Master</li> </ul> </li> <li>Gaffer Rest API</li> </ul> <p>The web UIs for nodes in cluster can then be accessed at the following addresses:</p> <ul> <li>Access the HDFS NameNode web UI at: http://localhost:9870</li> <li>Access the Accumulo Monitor UI at: http://localhost:9995</li> <li>Access the Gaffer REST API at: http://localhost:8080/rest/</li> </ul>"},{"location":"development-guide/example-deployment/running-the-deployment/#environment-variables","title":"Environment Variables","text":"<p>As you can probably see the example is using a few environment variables in the <code>docker-compose.yaml</code> file, these set things such as the container versions and a couple of file locations. The use of these variables are recommended as it can make it easier to update container versions and other aspects of the containers.</p> <p>A basic set of these environment variables are shown below which can be saved in a <code>.env</code> file and sourced before running the containers.</p> <pre><code>ZOOKEEPER_VERSION=\"3.7.1\"\nGAFFER_VERSION=\"2.0.0\"\nACCUMULO_VERSION=\"2.0.1\"\nHADOOP_VERSION=\"3.3.3\"\nACCUMULO_CONF_DIR=\"/etc/accumulo/conf\"\nHADOOP_CONF_DIR=\"/etc/hadoop/conf\"\n</code></pre>"},{"location":"development-guide/example-deployment/using-the-api/","title":"Using the API","text":"<p>As covered in the Getting Started API page the main POST request used in the API is <code>/graph/operations/execute</code>. This part of the guide will cover the general usage of this part of the API and walk through some general operations you might want to use to load data or query.</p> <p>Note</p> <p>The Gaffer operations reference guide has more detail on available operations.</p>"},{"location":"development-guide/example-deployment/using-the-api/#loading-data","title":"Loading Data","text":"<p>Gaffer supports various methods of loading data and depending on your use case you can even bypass it all together to load directly into Accumulo.</p> <p>This example will focus on using the rest API to add the graph elements. In production this method would not be recommended for large volumes of data. However, it is fine for smaller data sets and generally can be done in a few stages outlined in the following diagram.</p> <pre><code>flowchart LR\n    A(Raw Data) --&gt; B(GenerateElements)\n    B --&gt; C(AddElements)</code></pre> <p>The first stage is taking the raw input data and converting it into Gaffer elements via an element generator class. Gaffer includes a few built in generators but you can use a custom class or pre-process the data before passing to Gaffer so that you're able to use a default generator. Once the data has been converted to elements it needs to be added into the graph. To load elements there is a standard <code>AddElements</code> operation which takes raw elements JSON as input and adds them into the graph.</p> <p>Info</p> <p>This is where the schema is used here to validate the elements are correct and conform before adding.</p> <p>Using the example again we will demonstrate how we could write an operation chain to load the data from the neo4j formatted CSV file.</p> <pre><code>{\n\"class\": \"OperationChain\",\n\"operations\": [\n{\n\"class\": \"ImportFromLocalFile\",\n\"filePath\": \"/gaffer/data/neo4jExport.csv\"\n},\n{\n\"class\": \"GenerateElements\",\n\"elementGenerator\": {\n\"class\": \"Neo4jCsvElementGenerator\"\n}\n},\n{\n\"class\": \"AddElements\"\n}\n]\n}\n</code></pre> <p>The operation chain above essentially mirrors the stages in the previous diagram. In the example chain we first ingest the data via the <code>ImportFromLocalFile</code> class (an additional operation we added via the <code>operationsDeclarations.json</code>), which streams the data from the CSV file into the next <code>GenerateElements</code> operation.</p> <p>For the generator we have selected the built in <code>Neo4jCsvElementGenerator</code> class, this is already set up to be able to parse a correctly formatted neo4j exported CSV into Gaffer elements via the schema. If you are curious as to what the output of each operation is you can try run a subset of this chain to see how the data changes on each one, the output should be returned back to you in the server response section of the Swagger API.</p>"},{"location":"development-guide/example-deployment/using-the-api/#querying-data","title":"Querying Data","text":"<p>Once data is loaded in the graph its now possible to start querying the data to gain insight and perform analytics. Querying in Gaffer can get fairly complex but generally simple queries are made up of two parts; a <code>Get</code> Operation and a <code>View</code>.</p> <p>Starting with the <code>Get</code> operation, say we want to get all nodes and edges based on their ID. To do this we can use the <code>GetElements</code> operation and set the <code>Seed</code> to the entity (e.g. node) or edge where we want to start the search. To demonstrate this on the example graph we can attempt to get all entities and edges associated with the <code>Person</code> node with ID <code>v1</code>.</p> <p>The result from this query should return the node associated with the <code>v1</code> id along with any edges on this node, which in this case is just one</p> Input QueryExample Result <pre><code>{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"v1\"\n}\n]\n}\n</code></pre> <pre><code>[\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Person\",\n\"vertex\": \"v1\",\n\"properties\": {\n\"name\": \"marko\",\n\"age\": 29\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"Created\",\n\"source\": \"v1\",\n\"destination\": \"v2\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {\n\"weight\": {\n\"java.lang.Float\": 0.4\n}\n}\n}\n]\n</code></pre>"},{"location":"development-guide/example-deployment/using-the-api/#filtering-data","title":"Filtering Data","text":"<p>The final bit of querying this guide will go into is how to apply a <code>View</code> to a returned set of elements. A <code>View</code> in Gaffer allows you to filter, aggregate, transform and just generally manipulate the results. In general a <code>View</code> has the following possible use cases:</p> <ul> <li> <p>Filtering - General filtering on elements based on predicates. Filtering can be applied     pre-aggregation, post aggregation and post transformation.</p> </li> <li> <p>Aggregation - This is to control how similar elements are aggregated together. You can provide     a subset of the schema <code>groupBy</code> properties and override the aggregation functions.</p> </li> <li> <p>Transformation - Transformations can be applied by providing Functions to transform properties     and vertex values. This is a powerful feature, you can override the existing values or you can     transform and save the new value into a new transient property.</p> </li> <li> <p>Property Removal - The relevant properties you want to be returned can be controlled. You can     use either <code>properties</code> or <code>excludeProperties</code> to define the list of properties to be included     or excluded.</p> </li> </ul> <p>Taking the example from the previous section we will demonstrate general filtering on a query. As before, the query returns the node <code>v1</code> and any edges associated with it. We will now filter it to include only edges where the weight is over a certain value. In this scenario it is analogous to asking, \"get all the <code>Created</code> edges on node <code>v1</code> that have a <code>weight</code> greater than 0.3\".</p> Filter Query <pre><code>{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"v1\"\n}\n],\n\"view\": {\n\"edges\": {\n\"Created\": {\n\"preAggregationFilterFunctions\": [\n{\n\"selection\": [\n\"weight\"\n],\n\"predicate\": {\n\"class\": \"IsMoreThan\",\n\"orEqualTo\": false,\n\"value\": {\n\"Float\": 0.3\n}\n}\n}\n]\n}\n}\n}\n}\n</code></pre> <p>Tip</p> <p>As you can see filtering is based around predicates which are similar to if else statements in traditional programming. For a full list of available predicates refer to the reference documentation.</p>"},{"location":"development-guide/example-deployment/writing-the-schema/","title":"Writing the Schema","text":"<p>In Gaffer JSON based schemas need to be written upfront to model and understand how to load and treat the data in the graph. These schemas define all aspects of the nodes and edges in the graph, and can even be used to automatically do basic analysis or aggregation on queries and ingested data.</p> <p>For reference, this guide will use the same CSV data set from the project setup page.</p> TableCSV _id name age lang _labels _start _end _type weight v1 marko 29 Person v2 lop java Software e1 v1 v2 Created 0.4 <pre><code>_id,name:String,age:Int,lang:String,_labels,_start,_end,_type,weight:Float\nv1,marko,29,,Person,,,,\nv2,lop,,java,Software,,,,\ne1,,,,,v1,v2,Created,0.4\n</code></pre>"},{"location":"development-guide/example-deployment/writing-the-schema/#elements-schema","title":"Elements Schema","text":"<p>In Gaffer an element refers to any object in the graph, i.e. your nodes (vertexes) and edges. To set up a graph we need to tell Gaffer what objects are in the graph and the properties they have. The standard way to do this is a JSON config file in the schema directory. The filename can just be called something like <code>elements.json</code>, the name is not special as all files under the <code>schema</code> directory will be merged into a master schema, but we recommended using an appropriate name.</p> <p>As covered in the Getting Started Schema page, to write a schema you can see that there are some required fields, but largely a schema is highly specific to your input data.</p> <p>Starting with the <code>entities</code> from the example, we can see there will be two distinct types of nodes in the graph; one representing a <code>Person</code> and another for <code>Software</code>. These can be added into the schema to give something like the following:</p> <p>The types here such as <code>id.person.string</code> are covered in the next section.</p> <pre><code>{\n\"entities\": {\n\"Person\": {\n\"description\": \"Entity representing a person vertex\",\n\"vertex\": \"id.person.string\"\n},\n\"Software\": {\n\"description\": \"Entity representing a software vertex\",\n\"vertex\": \"id.software.string\"\n}\n}\n}\n</code></pre> <p>From the basic schema you can see that we have added two entity types for the graph. For now, each <code>entity</code> just contains a short description and a type associated to the <code>vertex</code> key. The type here is just a placeholder, but it has been named appropriately as it's assumed that we will just use the string representation of the node's id (this will be defined in the <code>types.json</code> later in the guide).</p> <p>Expanding on the basic schema we will now add the <code>edges</code> to the graph. As the example graph is small we only need to add one edge - the <code>Created</code> edge. This is a directed edge that connects a <code>Person</code> to a <code>Software</code> and can be defined as the following.</p> <pre><code>{\n\"edges\": {\n\"Created\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.software.string\",\n\"directed\": \"true\"\n}\n},\n\"entities\": {\n\"Person\": {\n\"description\": \"Entity representing a person vertex\",\n\"vertex\": \"id.person.string\"\n},\n\"Software\": {\n\"description\": \"Entity representing a software vertex\",\n\"vertex\": \"id.software.string\"\n}\n}\n}\n</code></pre> <p>As discussed in the user schema guide, edges have some mandatory fields. Starting with the <code>source</code> and <code>destination</code> fields, these must match the types associated with the vertex field in the relevant entities. From the example, we can see that the source of a <code>Created</code> edge is a <code>Person</code> so we will use the placeholder type we set as the <code>vertex</code> field which is <code>id.person.string</code>. Similarly the destination is a <code>Software</code> node so we will use its placeholder of <code>id.software.string</code>.</p> <p>We must also set whether an edge is directed or not, in this case it is as only a person can create software not the other way around. To set this we will use the <code>true</code> type, but note that this is a placeholder and must still be defined in the types.json.</p> <p>Continuing with the example, the nodes and edges also have some properties associated with each such as name, age etc. These can also be added to the schema using a properties map to result in the extended schema below.</p> <pre><code>{\n\"edges\": {\n\"Created\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.software.string\",\n\"directed\": \"true\",\n\"aggregate\": \"false\",\n\"properties\": {\n\"weight\": \"property.float\"\n}\n}\n},\n\"entities\": {\n\"Person\": {\n\"description\": \"Entity representing a person vertex\",\n\"vertex\": \"id.person.string\",\n\"aggregate\": \"false\",\n\"properties\": {\n\"name\": \"property.string\",\n\"age\": \"property.integer\"\n}\n},\n\"Software\": {\n\"description\": \"Entity representing a software vertex\",\n\"vertex\": \"id.software.string\",\n\"aggregate\": \"false\",\n\"properties\": {\n\"name\": \"property.string\",\n\"lang\": \"property.string\"\n}\n}\n}\n}\n</code></pre> <p>Note</p> <p>Take note of the <code>\"aggregate\": \"false\"</code> setting, this skips any ingest aggregation as it is not required and out of scope of this example. All entity property types must have an aggregation function in Gaffer unless this option is added. Aggregation is fairly advanced topic in Gaffer but very powerful it is covered in more depth later in the documentation.</p>"},{"location":"development-guide/example-deployment/writing-the-schema/#types-schema","title":"Types Schema","text":"<p>The other schema that now needs to be written is the types schema. As you have seen in the elements schema there are some placeholder types added as the values for many of the keys. These types work similarly to if you have ever programmed in a strongly typed language, they are essentially the wrapper for the value to encapsulate it.</p> <p>Now starting with the types for the nodes/vertexes, we used two placeholder types, one for the <code>Person</code> entity and one for the <code>Software</code> entity. From the example CSV you can see there is a <code>_id</code> column that uses a string identifier that is used for the ID of the node (this will also be used by the <code>edge</code> to identify the source and destination). We will define a type for each node ID using the standard java <code>String</code> class to encapsulate it, this leads to a basic <code>type.json</code> like the following.</p> <pre><code>{\n\"types\": {\n\"id.person.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.software.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n}\n}\n}\n</code></pre> <p>The next set of types that need defining are, the ones used for the properties that are attached to the nodes/entities. Again we need to take a look back at what our input data looks like, in the CSV file we can see there are three different types that are used for the properties which are analogous to a <code>String</code>, an <code>Integer</code> and a <code>Float</code>.</p> <p>Tip</p> <p>Of course technically, all of these properties could be encapsulated in a string but, assigning a relevant type allows some additional type specific features when doing things like grouping and aggregation as it would in traditional programming.</p> <p>If we make a type for each of the possible properties using the standard Java classes we end up with the following.</p> <pre><code>{\n\"types\": {\n\"id.person.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.software.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"property.string\": {\n\"description\": \"A type to hold string properties of entities\",\n\"class\": \"java.lang.String\"\n},\n\"property.integer\": {\n\"description\": \"A basic type to hold integer properties of entities\",\n\"class\": \"java.lang.Integer\"\n},\n\"property.float\": {\n\"description\": \"A basic type to hold float properties of entities\",\n\"class\": \"java.lang.Float\"\n}\n}\n}\n</code></pre> <p>The final thing that we need to add to the schema is a type for the <code>true</code> Boolean value that's used by the directed field of the edge element. This leaves us with the complete list of types for this example.</p> <pre><code>{\n\"types\": {\n\"id.person.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.software.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"property.string\": {\n\"description\": \"A type to hold string properties of entities\",\n\"class\": \"java.lang.String\"\n},\n\"property.integer\": {\n\"description\": \"A basic type to hold integer properties of entities\",\n\"class\": \"java.lang.Integer\"\n},\n\"property.float\": {\n\"description\": \"A basic type to hold float properties of entities\",\n\"class\": \"java.lang.Float\"\n},\n\"true\": {\n\"description\": \"A simple boolean that must always be true.\",\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n}\n]\n}\n}\n}\n</code></pre> <p>As you can see the Boolean value also demonstrates the validation feature which allows for validation of any values using the type. In this example it verifies its true but you could also check it exists, see if its less than another value etc. or even run your own custom validator class.</p> <p>Tip</p> <p>The Koryphe module provides lots of default functions that can be used to validate and aggregate data, see the predicate reference guide for more information.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/","title":"Accumulo Store Implementation","text":"<p>The accumulo-store module is an implementation of the Store API which uses Apache Accumulo.</p> <p>This page contains brief details on the internal implementation of the <code>AccumuloStore</code>. For information on configuring and using this store, see the Accumulo Store reference page.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#introduction","title":"Introduction","text":"<p>It is assumed that the reader has some familiarity with the design of Accumulo (see the Design page in Accumulo's Docs).</p> <p>The important features for Gaffer are:</p> <ul> <li>Accumulo stores data in key-value pairs. A key has multiple parts, namely a row ID, a column family, a column qualifier, a column visibility, and a timestamp. Each of these is simply a byte array, with the exception of the timestamp which is a long. A value is simply a byte array.</li> <li>Data in Accumulo is stored ordered by key. Keys are stored sorted by increasing row ID, then column family, then column qualifier, then column visibility, then by decreasing timestamp.</li> <li>Accumulo allows locality groups to be set which group together column families. This means that scans that only need to read certain column families can skip families they do not need to read.</li> <li>Accumulo allows data to be tagged with a visibility which restricts which users can view it.</li> <li>Accumulo allows the user to configure iterators that run at scan time, at compaction time or both. Gaffer adds iterators to scans to filter data. It uses compaction time iterators to persistently aggregate the properties of elements together, and to continually validate data.</li> <li>Accumulo provides an <code>InputFormat</code> that allows data to be retrieved via MapReduce jobs.</li> </ul> <p>The core of the functionality is implemented in the key-packages, the iterators and the retrievers. Each of these is described in some detail below.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#key-packages","title":"Key-packages","text":"<p>As noted in the Key-packages section of the Accumulo Store reference, key-packages are responsible for converting <code>Element</code>s to and from key-value pairs, for creating ranges of keys containing all data relevant to a particular query, and for configuring the Iterators. Gaffer provides two key-packages: <code>ByteEntityKeyPackage</code> and <code>ClassicKeyPackage</code>. Advanced users are able to create their own key-packages if they wish - see options for future key-packages for some ideas.</p> <p>Before these key-packages are described, we review the main design goals:</p> <ul> <li>To be able to retrieve all <code>Edge</code>s for a vertex by seeking to a single point in the table and scanning forwards.</li> <li>To be able to retrieve all <code>Entity</code>s for a vertex by seeking to a single point in the table, and reading only relevant key-value pairs, i.e. not reading any of the <code>Edge</code>s associated to the vertex.</li> <li>A vertex should be uniquely identified by its serialised value. It should not be necessary to consult an external source to find the value that identifies a vertex. In particular unlike most graph databases we do not use longs to identify vertices.</li> <li>To ensure that there are no \"fat\" rows, i.e. that there are not very large numbers of key-value pairs with the same row-key.</li> <li>To allow efficient aggregation of properties.</li> </ul> <p>Both key-packages convert an <code>Entity</code> into a single Accumulo key-value pair and an <code>Edge</code> into two key-value pairs. The row ID (also known as the row-key) of the key-value formed from the <code>Entity</code> is the vertex serialised to a byte array, followed by a flag to indicate that this is an <code>Entity</code>. This allows the <code>Entity</code>s associated to a vertex to be quickly retrieved. It is necessary to store each <code>Edge</code> as two key-values so that it can found from both the source vertex and the destination vertex: one key-value has a row ID consisting of the source vertex serialised to a byte array, followed by a delimiter, followed by the destination vertex serialised to a byte array; the other key-value has the opposite, with the destination vertex followed by the source vertex. A flag is also stored to indicate which of these two versions the key is so that the original <code>Edge</code> can be recreated.</p> <p>An important feature of the row IDs created by both key-packages is that it is possible to create ranges of keys that either only contain the <code>Entity</code>s or only contain the <code>Edge</code>s or contain both. This means that if, for example, a user states that they only want to retrieve the <code>Entity</code>s for a particular vertex then only relevant key-value pairs need to be read. In the case of a high-degree vertex, this means that queries for just the <code>Entity</code>s will still be very quick.</p> <p>The two key-packages differ in subtle details of how the row ID is created. In the following descriptions the notation \"(serialised_vertex)\" refers to the vertex serialised to a byte array with any occurrences of the zero byte removed. This is necessary so that the zero byte delimiter can be used to separate different parts of the row-key. The zero bytes are removed in such a way that the original byte array can be recreated, and so that ordering is preserved.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#classickeypackage-details","title":"<code>ClassicKeyPackage</code> details","text":"<p>The <code>ClassicKeyPackage</code> constructs the following Accumulo key-value pair for an <code>Entity</code>:</p> Row ID Column Family Column Qualifier Visibility Timestamp Value (serialised_vertex) group group by properties visibility property timestamp all other properties <p>The following Accumulo key-value pairs are created for an <code>Edge</code>:</p> Row ID Column Family Column Qualifier Visibility Timestamp Value (serialised_source_vertex)0(serialised_destination_vertex)0x group group by properties visibility property timestamp all other properties (serialised_destination_vertex)0(serialised_source_vertex)0y group group by properties visibility property timestamp all other properties <p>If the <code>Edge</code> is undirected then <code>x</code> and <code>y</code> are both 1 for both key-values. If the <code>Edge</code> is directed then <code>x</code> is 2 and <code>y</code> is 3.</p> <p>This is very similar to the design of the key-value pairs in version 1 of Gaffer, with the exception that version 1 did not store a delimiter or flag at the end of the row-key for an <code>Entity</code>. This necessitated a scan of the row-key counting the number of delimiters to determine whether it was an <code>Entity</code> or <code>Edge</code>. If it is an <code>Entity</code> the vertex could be created directly from the row-key. For the <code>ClassicKeyPackage</code>, this scan is not needed but an array copy of the row-key minus the delimiter and flag is needed. In practice, the difference in performance between the two is likely to be negligible.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#byteentitykeypackage-details","title":"<code>ByteEntityKeyPackage</code> details","text":"<p>The ByteEntity key-package constructs the following Accumulo key-value pair for an <code>Entity</code>:</p> Row ID Column Family Column Qualifier Visibility Timestamp Value (serialised_vertex)01 group group by properties visibility property timestamp all other properties <p>In the row ID the 0 is a delimiter to split the serialised vertex from the 1. The 1 indicates that this is an <code>Entity</code>. By having this flag at the end of the row id it is easy to determine if the key relates to an <code>Entity</code> or an <code>Edge</code>.</p> <p>The following Accumulo key-value pairs are created for an <code>Edge</code>:</p> Row ID Column Family Column Qualifier Visibility Timestamp Value (serialised_source_vertex)0x0(serialised_destination_vertex)0x group group by properties visibility property timestamp all other properties (serialised_destination_vertex)0y0(serialised_source_vertex)0y group group by properties visibility property timestamp all other properties <p>If the <code>Edge</code> is undirected then both <code>x</code> and <code>y</code> are 4. If the <code>Edge</code> is directed then <code>x</code> is 2 and <code>y</code> is 3.</p> <p>The flag is repeated twice to allow filters that need to know whether the key corresponds to a <code>Entity</code> or an <code>Edge</code> to avoid having to fully deserialise the row ID. For a query such as find all out-going edges from this vertex, the flag that is directly after the source vertex can be used to restrict the range of row IDs queried for.</p> <p>Note that in a range query filtering to restrict the results to say only out-going edges happens in an iterator.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#options-for-future-key-packages","title":"Options for future key-packages","text":"<p>Numerous variations on the above key-packages could be implemented. These would generally improve the performance for some types of query, at the expense of decreasing the performance for other types of query. Some examples are:</p> <ul> <li>The row-keys could be sharded. The current design is optimised for retrieving all <code>Edge</code>s for a given vertex, when there are relatively few such <code>Edge</code>s. If there are a million edges for a vertex then all of these have to be read by a small number of tablet servers (typically one, unless the range spans multiple tablets). This limits the query performance. An alternative approach is to introduce a shard key at the start of the row-key to cause different edges for the same vertex to be spread uniformly across the table. This would increase the parallelism for queries which would lead to better performance when large numbers of edges need to be retrieved for a vertex. The trade-off is that all queries would need to query all shards which would reduce the performance when a vertex has only a small number of edges.</li> <li>If there are a very large number of <code>Edge</code>s with the same source, destination and group-by properties then this could cause unbalanced tablets. A sharding scheme similar to the above would deal with this.</li> <li>Remove the flag at the end of the row-key that indicates whether it corresponds to an <code>Entity</code> or an <code>Edge</code>. This is used to quickly determine whether it is an <code>Entity</code> or an <code>Edge</code>. This is actually superfluous information as the group is stored in the column family and that indicates whether the key-value is an <code>Entity</code> or an <code>Edge</code>. Storing the flag there creates the need for an array copy when an <code>Entity</code> is created from the key-value. Instead of storing the group string in the column family, two bytes could be stored. The first would indicate whether this is an <code>Entity</code> or an <code>Edge</code>, and if an <code>Edge</code> whether it needs reversing or not; the second would indicate what group it is.</li> <li>Store each group in a separate table. This should slightly improve the performance of queries that only require a subset of the groups, especially if the query scans lots of data (as Accumulo's locality groups are set in the above key-packages the performance improvement will probably be minor). It would worsen the query performance when multiple groups are being retrieved.</li> <li>If the vertices serialise to a fixed length, or if a maximum length is known, then the row-keys could be of fixed length. This would eliminate the need for the use of delimiters which forces the escaping of the zero byte inside the serialised value. This would potentially provide a small increase in ingest and query speed.</li> </ul>"},{"location":"development-guide/project-structure/components/accumulo-store/#iterators","title":"Iterators","text":"<p>Gaffer makes substantial use of Accumulo's iterator functionality to perform permanent aggregation and validation of data at compaction time, and filtering and aggregation at query time. See the Iterators section of Accumulo's Docs for more information on iterators.</p> <p>The following subsections describes the iterators that are used in Gaffer. They are listed in decreasing order of priority, i.e. the first iterator runs first. The text in brackets after the name of the iterator gives the scopes that the iterator is applied in. Some iterators that are only used for very specific operations are not listed here.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#aggregatoriterator-compaction-scan","title":"<code>AggregatorIterator</code> (compaction, scan)","text":"<p>This iterator aggregates together all properties that are not group-by properties for <code>Element</code>s that are otherwise identical. As the non-group-by properties are stored in the <code>Value</code> this means that all <code>Value</code>s for identical keys are merged together.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#validatorfilter-compaction-scan","title":"<code>ValidatorFilter</code> (compaction, scan)","text":"<p>The <code>ValidatorFilter</code> iterator validates every <code>Element</code> using the validation logic defined in the schema. When this is run during a compaction it causes invalid data to be deleted. This is typically used to delete data that is older than a certain date.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#classicedgedirectedundirectedfilteriterator-scan","title":"<code>ClassicEdgeDirectedUndirectedFilterIterator</code> (scan)","text":"<p>Note</p> <p>This is only used in the <code>ClassicKeyPackage</code>.</p> <p>This is used to filter out edges that are not required because the user has specified filters relating to edge direction (outgoing or incoming) and edge \"directedness\" (directed or undirected) in their query. Note that it is possible to ask for various combinations of these, e.g.:</p> <ul> <li>Directed edges only: if the seed is A then directed edges A-&gt;B and B-&gt;A would be returned, but an undirected edge A-B wouldn't be.</li> <li>Directed outgoing edges only: if the seed is A then a directed edge A-&gt;B would be returned, but a directed edge B-&gt;A wouldn't be, nor would an undirected edge A-B.</li> <li>Directed incoming edges only: if the seed is A then a directed edge B-&gt;A would be returned, but a directed edge A-&gt;B wouldn't be, nor would an undirected edge A-B.</li> <li>Undirected edges only: if the seed is A then an undirected edge A-B would be returned, but directed edges A-&gt;B and B-&gt;A wouldn't be.</li> <li>Undirected outgoing edges only: if the seed is A then an undirected edge A-B would be returned, but directed edges A-&gt;B and B-&gt;A wouldn't be.</li> <li>Undirected incoming edges only: if the seed is A then an undirected edge A-B would be returned, but directed edges A-&gt;B and B-&gt;A wouldn't be.</li> </ul> <p>In the latter two examples, note that an undirected edge A-B is defined to be both outgoing from, and incoming to, both A and B.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#elementpreaggregationfilter-scan","title":"<code>ElementPreAggregationFilter</code> (scan)","text":"<p>This iterator filters out <code>Element</code>s that are not valid according to the <code>View</code>. This filtering happens before the aggregation.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#corekeygroupbyaggregatoriterator-scan","title":"<code>CoreKeyGroupByAggregatorIterator</code> (scan)","text":"<p>This iterator aggregates together all properties according to the group-by in the view.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#elementpostaggregationfilter-scan","title":"<code>ElementPostAggregationFilter</code> (scan)","text":"<p>This iterator filters out <code>Element</code>s that are not valid according to the <code>View</code>. This filtering happens after the aggregation.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#locality-groups","title":"Locality groups","text":"<p>Accumulo's ability to have a large number of different column families allows Gaffer to store lots of different types of data in the same table. Specifying the locality groups means that when a query for a particular group is made, graph elements from other groups do not need to be read.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#tests","title":"Tests","text":"<p>Warning</p> <p>This section might not be fully up to date for Gaffer 2.0.0. To easily run integration tests against a cluster, you can now use docker compose.</p> <p>For the purposes of unit testing and small-scale examples, Gaffer offers the Store subclass MiniAccumuloStore and the <code>MiniAccumuloCluster</code>.</p> <p>By default all our tests use the MiniAccumuloStore. The MiniAccumuloStore automatically sets up or uses an existing MiniAccumuloCluster according to your store properties.</p> <p>Alongside the standard Accumulo properties, you also have the opportunity to add some extra ones for a MiniAccumuloStore:</p> <p><pre><code>accumulo.mini.directory=/path/to/directory\naccumulo.mini.root.password=password\naccumulo.mini.visibilities=vis1,vis2,publicVisibility,privateVisibility,public,private\n</code></pre> These properties are optional. By default the MiniAccumuloStore creates the cluster in a temporary directory, uses \"password\" as the root password and adds no extra visibilities to a user.</p> <p>Because the MiniAccumulo re-uses clusters to be efficient, if two tests use the same user with different visibilities, the second one will overwrite the first. Therefore it's advisable to use different users if you want a user with different visibilities.</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#running-the-integration-tests","title":"Running the integration tests","text":""},{"location":"development-guide/project-structure/components/accumulo-store/#running-a-mini-accumulo-cluster-manually","title":"Running a Mini Accumulo Cluster manually","text":"<p>Follow this README.md in gaffer-tools on how to run a Mini Accumulo Cluster (with a shell) on your local machine.</p> <p>Note</p> <p>When running a Mini Accumulo Cluster locally a <code>store.properties</code> file is generated, this can help identify the values you need to replace in the store.properties used for the integration tests below (such as the username, password, instance name and Zookeeper location).</p>"},{"location":"development-guide/project-structure/components/accumulo-store/#setting-up-accumulo-store-integration-tests","title":"Setting up accumulo-store integration tests","text":"<p>Update the following store properties files in src/test/resources/ to point to the location of the Accumulo store to test against:</p> <ul> <li>src/test/resources/store.properties</li> <li>src/test/resources/store2.properties</li> <li>src/test/resources/accumuloStoreClassicKeys.properties</li> </ul> <p>If you are running an Accumulo cluster locally, here is what an example test store.properties file should look like:</p> <pre><code>gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.SingleUseAccumuloStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\naccumulo.instance=instance\naccumulo.user=root\naccumulo.password=password\naccumulo.zookeepers=localhost:58630\n\ngaffer.cache.service.class=uk.gov.gchq.gaffer.cache.impl.HashMapCacheService\ngaffer.store.job.tracker.enabled=true\ngaffer.store.operation.declarations=ExportToOtherAuthorisedGraphOperationDeclarations.json,ExportToOtherGraphOperationDeclarations.json,ResultCacheExportOperations.json\n</code></pre> <p>Ensure that when running an Accumulo instance, the user specified by the <code>accumulo.user</code> property has the <code>System.CREATE_TABLE</code> and <code>System.CREATE_NAMESPACE</code> permissions ('root' user has these set by default) and the following scan authorisations:</p> Authorisation Required by vis1 VisibilityIT vis2 VisibilityIT public SchemaHidingIT private ParameterizedLoaderIT publicVisibility AccumuloAggregationIT privateVisibility AccumuloAggregationIT <p>You can set these scan authorisations via the Accumulo shell:</p> <p>e.g. if your store.properties have: <code>accumulo.user=root</code>, <code>accumulo.instance=instance</code></p> <pre><code>root@instance&gt; setauths -u root -s vis1,vis2,publicVisibility,privateVisibility,public,private\n</code></pre> <p>Run the integration tests:</p> <pre><code>mvn verify\n</code></pre>"},{"location":"development-guide/project-structure/components/cache/","title":"Cache","text":"<p>The cache module contains the <code>CacheServiceLoader</code> which is started when the store is initialised. The cache service loader can be called when a component needs access to short term data storage. To get access to the cache service you need to call: <pre><code>CacheServiceLoader.getService();\n</code></pre></p> <p>By default, there is no service loaded so if you're using a component that makes use of the <code>CacheServiceLoader</code>, be sure to specify the service class in the <code>store.properties</code> file. See the Stores reference guide for configuration info.</p> <p>If using an external cache service (anything found in the cache library) be sure to include the library as a dependency: <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;uk.gov.gchq.gaffer&lt;/groupId&gt;\n&lt;artifactId&gt;jcs-cache-service&lt;/artifactId&gt;\n&lt;version&gt;${gaffer.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>When run in a servlet context, the <code>CacheServiceLoader</code> should be shutdown gracefully by the <code>ServletLifecycleListener</code> found in the REST package. Do not trust the shutdown hook in a servlet context. If running outside a servlet environment, you can either call shutdown on the cache service manually or use the shutdown hook upon initialisation of the cache service loader.</p> <p>For information on Gaffer caches and cache configuration, see the cache section of the Stores Guide.</p>"},{"location":"development-guide/project-structure/components/components/","title":"Components/Maven Modules","text":"<p>Gaffer has lots of components, which can be split into different categories. This section of the developer doc provides more detail on the most important components.</p>"},{"location":"development-guide/project-structure/components/components/#key-components","title":"Key components","text":"<p>For more developer information on these key components, see their associated page.</p> <ul> <li>Operation: Classes for the Operation interfaces and core operation implementations.</li> <li>Cache: Classes for the Gaffer cache service.</li> <li>Graph: Contains the Gaffer <code>Graph</code> object and related utilities.</li> <li>Data: Classes defining Gaffer's data objects: <code>Element</code>, <code>Edge</code> and <code>Entity</code>.</li> <li>Store: Contains the Gaffer <code>Store</code> object and related classes.</li> <li>Serialisation: Contains classes for Serialisation in Gaffer. </li> <li>Accumulo Store: A store implemented using Apache Accumulo.</li> <li>Core REST: Classes which provide a Gaffer REST API using Jersey/JAX-RS.</li> <li>Spring REST: Implementation of the Gaffer REST API deployed in a Spring Boot container.</li> </ul>"},{"location":"development-guide/project-structure/components/components/#project-structure-maven","title":"Project Structure (Maven)","text":"<p>Gaffer uses Maven and from this perspective the project is made up of multiple Maven modules. All components are Maven modules, but not all modules are components as some are just parent or aggregator POMs (see below). Maven modules are not the same as Java modules (Java 9+), which Gaffer doesn't use or support. See here for more info on multi-module builds and the Maven reactor.</p> <p>Gaffer's project structure involves three kinds of module/POM, mostly based on the Maven packaging type. We can call these:</p> <ul> <li>Parent/Aggregator modules (<code>pom</code>)</li> <li>JAR modules (<code>jar</code>)</li> <li>WAR only/Demo modules (<code>war</code>).</li> </ul> <p>Parent modules consist of a single POM file (parent POM) which can define various properties, dependencies and settings to be inherited by JAR modules or other parent modules. These also specify the modules below the parent (Maven aggregation).</p> <p>JAR modules are not inherited by other modules, and in addition to the POM they contain code which is compiled into artifacts (always <code>jar</code> and sometimes also <code>war</code>). Some contain only code used for demos.</p> <p>WAR only/Demo modules are not inherited by other modules, they contain only a POM and potentially config files and are used for either creating WAR archives for the REST API or are used for running demos using Maven plugins and other modules.</p> <p>Gaffer has 47 modules in total. When building the complete project, Maven automatically runs the build in a specific order because of dependencies between modules.</p> Finding and displaying POM structure <p>The paths for all POMs in the Gaffer project can be seen by running <code>find . -name pom.xml</code> from the project/repository root.</p> <p>A simple text-based diagram of the Maven project structure can be generated and printed using <code>mvn org.qunix:structure-maven-plugin:modules -pl :gaffer2</code>.</p> <p>The diagram below shows all modules and their type (green diamond for Parent POM, blue for JAR and red for WAR/Demo):</p> <pre><code>graph LR\n    PP{uk.gov.gchq.gaffer:gaffer2} --&gt; C{core}\n    PP --&gt; I[integration-test]:::JAR\n    PP --&gt; SI{store-implementation}\n    PP --&gt; RI{rest-api}\n    PP --&gt; L{library}\n    PP --&gt; E{example}\n    C --&gt; operation:::JAR\n    C --&gt; cache:::JAR\n    C --&gt; access:::JAR\n    C --&gt; G[graph]:::JAR\n    C --&gt; type:::JAR\n    C --&gt; data:::JAR\n    C --&gt; exception:::JAR\n    C --&gt; store:::JAR\n    C --&gt; common-util:::JAR\n    C --&gt; serialisation:::JAR\n    SI --&gt; accumulo-store:::JAR\n    SI --&gt; map-store:::JAR\n    SI --&gt; proxy-store:::JAR\n    SI --&gt; federated-store:::JAR\n    RI --&gt; spring-rest:::JAR\n    RI --&gt; common-rest:::JAR\n    RI --&gt; map-rest:::WarDemo\n    RI --&gt; accumulo-rest:::WarDemo\n    RI --&gt; core-rest:::JAR\n    L --&gt; tinkerpop:::JAR\n    L --&gt; sketches-library:::JAR\n    L --&gt; CL{cache-library}\n    L --&gt; hdfs-library:::JAR\n    L --&gt; bitmap-library:::JAR\n    L --&gt; time-library:::JAR\n    L --&gt; flink-library:::JAR\n    L --&gt; S{spark}\n    CL --&gt; hazelcast-cache-service:::JAR\n    CL --&gt; jcs-cache-service:::JAR\n    S --&gt; spark-accumulo-library:::JAR\n    S --&gt; spark-library:::JAR\n    E --&gt; RT{road-traffic}\n    E --&gt; B{basic}\n    E --&gt; federated-demo:::JAR\n    RT --&gt; road-traffic-model:::JAR\n    RT --&gt; road-traffic-demo:::JAR\n    RT --&gt; road-traffic-generators:::JAR\n    B --&gt; basic-model:::JAR\n    B --&gt; basic-rest:::WarDemo\n\n    classDef parentPOM fill:lightgreen;\n    classDef JAR fill:lightblue;\n    classDef WarDemo fill:lightcoral;\n\n    class PP,C,SI,RI,L,E,CL,S,RT,B parentPOM</code></pre>"},{"location":"development-guide/project-structure/components/core-rest/","title":"Core REST API","text":"<p>The Core REST API module contains a Gaffer REST API.</p> <p>Gaffer Stores have modules extending the core-rest and adds in the dependency for the Gaffer Store. So if you want to use the Accumulo Store REST API, you can use the <code>accumulo-rest</code> <code>.war</code>, or <code>map-rest</code> for the Map Store.</p> <p>For an example of using the core REST API please see the example/road-traffic module.</p>"},{"location":"development-guide/project-structure/components/core-rest/#how-to-modify-the-core-rest-api-for-your-project","title":"How to modify the Core REST API for your project","text":"<p>You can easily make changes or additions to the core REST API for your project. You will need to create a new Maven module to build your core REST API. In your POM you should configure the <code>maven-dependency-plugin</code> to download the core Gaffer REST API <code>.war</code> and extract it. When Maven builds your module it will unpack the core war, add your files and repackage the war. If you wish to override a file in the core war then you can do this by including your own file with exactly the same name and path.</p> <p>Example <code>maven-dependency-plugin</code> configuration: <pre><code>&lt;build&gt;\n&lt;sourceDirectory&gt;src/main/java&lt;/sourceDirectory&gt;\n&lt;plugins&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n&lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n&lt;version&gt;3.5&lt;/version&gt;\n&lt;dependencies&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;uk.gov.gchq.gaffer&lt;/groupId&gt;\n&lt;artifactId&gt;core-rest&lt;/artifactId&gt; &lt;!-- Or your chosen store, e.g 'accumulo-rest' --&gt;\n&lt;version&gt;${gaffer.version}&lt;/version&gt;\n&lt;type&gt;war&lt;/type&gt;\n&lt;/dependency&gt;\n&lt;/dependencies&gt;\n&lt;executions&gt;\n&lt;execution&gt;\n&lt;id&gt;unpack&lt;/id&gt;\n&lt;phase&gt;compile&lt;/phase&gt;\n&lt;goals&gt;\n&lt;goal&gt;unpack&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;configuration&gt;\n&lt;artifactItems&gt;\n&lt;artifactItem&gt;\n&lt;groupId&gt;uk.gov.gchq.gaffer&lt;/groupId&gt;\n&lt;artifactId&gt;core-rest&lt;/artifactId&gt; &lt;!-- Or your chosen store, e.g 'accumulo-rest' --&gt;\n&lt;version&gt;${gaffer.version}&lt;/version&gt;\n&lt;type&gt;war&lt;/type&gt;\n&lt;overWrite&gt;false&lt;/overWrite&gt;\n&lt;outputDirectory&gt;\n${project.build.directory}/${project.artifactId}-${project.version}\n                                &lt;/outputDirectory&gt;\n&lt;/artifactItem&gt;\n&lt;/artifactItems&gt;\n&lt;/configuration&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n&lt;/plugin&gt;\n&lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre></p> <p>So, if you want to change the CSS for the core REST API you can override the custom.css file: <pre><code>&lt;module&gt;/src/main/webapp/css/custom.css\n</code></pre></p> <p>There are also various system properties you can use to configure to customise the Swagger UI. For example: <pre><code>gaffer.properties.app.title=Road Traffic Example\ngaffer.properties.app.description=Example using road traffic data\ngaffer.properties.app.banner.description=DEMO\ngaffer.properties.app.banner.colour=#1b75bb\ngaffer.properties.app.logo.link=https://github.com/gchq/Gaffer\ngaffer.properties.app.logo.src=images/iconCircle.png\n</code></pre></p>"},{"location":"development-guide/project-structure/components/data/","title":"Data","text":"<p>The data module contains Gaffer's data objects: <code>Element</code>, <code>Edge</code> and <code>Entity</code>.</p> <p>It also contains the logic for processing these <code>Element</code>s - <code>ElementAggregator</code>, <code>ElementFilter</code> and <code>ElementTransformer</code>.</p>"},{"location":"development-guide/project-structure/components/data/#functions-and-predicates","title":"Functions and Predicates","text":"<p>Gaffer makes use of Java 8's Function and Predicate interfaces to aggregate, transform and filter data. To allow these Function and Predicate classes to process tuples we make use of the Koryphe library. Koryphe allows us to wrap the Gaffer Elements in a tuple and pass it any Function or Predicate. </p> <p>You can use any of our implementations (see reference pages) or write your own.</p> <p>All the following classes will act on one or more Element identifiers (vertex/source/destination/directed) or properties. If you implement the Java 8 interfaces directly, you would need to add the following <code>JsonType</code> annotation to your class:</p> <pre><code>@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"class\")\n</code></pre> <p>Instead, we recommend you implement the Koryphe interfaces instead, which will add this annotation in for you.</p>"},{"location":"development-guide/project-structure/components/data/#aggregation","title":"Aggregation","text":"<p>Aggregation is done using a <code>KorypheBinaryOperator&lt;T&gt;</code> (or just <code>BinaryOperator&lt;T&gt;</code>), where T is the type of the property you are aggregating. For example: Max.</p>"},{"location":"development-guide/project-structure/components/data/#transforms","title":"Transforms","text":"<p>Transforms are applied using <code>KorypheFunction&lt;I, O&gt;</code> (or just <code>Function&lt;I, O&gt;</code>), where I is type of the input property and O is the type of the output value. If you want to transform multiple properties into a single new property then you can implement <code>KorypheFunction2&lt;T, U, R&gt;</code> or <code>KoryphePredicate3&lt;T, U, V, R&gt;</code>, etc. where R is the output value type.  For example: Concat.</p>"},{"location":"development-guide/project-structure/components/data/#filtering","title":"Filtering","text":"<p>Filtering is applied using <code>KoryphePredicate&lt;T&gt;</code> (or just <code>Predicate&lt;T&gt;</code>), where T is type of the property you want to filter on. If you want to filter on multiple properties then you can implement <code>KoryphePredicate2&lt;T, U&gt;</code> or <code>KoryphePredicate3&lt;T, U, V&gt;</code> etc. For example: Exists.</p>"},{"location":"development-guide/project-structure/components/graph/","title":"Graph","text":"<p>The graph module contains the Gaffer <code>Graph</code> object and related utilities. This is the entry point (or proxy) for your chosen Gaffer store.</p> <p>The <code>Graph</code> separates the user from the underlying store. It holds a connection which acts as a proxy, delegating operations to the store. It provides users with a single point of entry for executing operations on a store. This allows the underlying store to be swapped and the same operations can still be applied.</p> <p>When you instantiate a <code>Graph</code>, this doesn't mean you are creating an entirely new graph with its own data, you are simply creating a connection to a store where some data is held.</p> <p>See the Graph Javadoc for further documentation.</p>"},{"location":"development-guide/project-structure/components/graph/#creating-a-graph","title":"Creating a Graph","text":"<p>To create an instance of <code>Graph</code>, we recommend you use the <code>Graph.Builder</code> class. This has several helpful methods to create the graph from various different sources. Most of the time, a graph requires just 3 things: some store properties, a schema and some graph specific configuration.</p> <p>An example of creating a basic <code>Graph</code> object:</p> <pre><code>Graph graph = new Graph.Builder()\n.config(new GraphConfig.Builder()\n.graphId(\"uniqueNameOfYourGraph\")\n.build())\n.addSchemas(schemas)\n.storeProperties(storeProperties)\n.build();\n</code></pre> <p>Instead of a store properties, a store can be passed in directly. This is the easiest way to configure schema-less stores (Proxy and Federated Stores) using Java. See the Java section of the Proxy Store reference page for an example. Using a Proxy Store will allow for connecting to an existing remote graph through Java, without needing to use the REST API or JSON directly.</p>"},{"location":"development-guide/project-structure/components/graph/#store-properties","title":"Store Properties","text":"<p>The store properties tells the graph the type of store to connect to along with any required connection details. See the Stores reference page for more information on the different Stores for Gaffer.</p>"},{"location":"development-guide/project-structure/components/graph/#schema","title":"Schema","text":"<p>The schema is passed to the store to instruct the store how to store and process the data. See Schemas for detailed information on schemas and the Java API section of that page for lower level info.</p>"},{"location":"development-guide/project-structure/components/graph/#graph-configuration","title":"Graph Configuration","text":"<p>The graph configuration allows you to apply special customisations to the Graph instance. The only required field is the <code>graphId</code>.</p> <p>To create an instance of <code>GraphConfig</code> you can use the <code>GraphConfig.Builder</code> class, or create it using a json file.</p> <p>The <code>GraphConfig</code> can be configured with the following:</p> <ul> <li><code>graphId</code> - The <code>graphId</code> is a String field that uniquely identifies a <code>Graph</code>. When backed by a Store like Accumulo, this <code>graphId</code> is used as the name of the Accumulo table for the <code>Graph</code>.</li> <li><code>description</code> - a string describing the <code>Graph</code>.</li> <li><code>view</code> - The <code>Graph View</code> allows a graph to be configured to only returned a subset of Elements when any Operation is executed. For example if you want your <code>Graph</code> to only show data that has a count more than 10 you could add a View to every operation you execute, or you can use this <code>Graph View</code> to apply the filter once and it would be merged into to all Operation Views so users only ever see this particular view of the data.</li> <li><code>library</code> - This contains information about the <code>Schema</code> and <code>StoreProperties</code> to be used.</li> <li><code>hooks</code> - A list of <code>GraphHook</code>s that will be triggered before, after and on failure when operations are executed on the <code>Graph</code>. See GraphHooks for more information.</li> </ul> <p>Here is an example of a <code>GraphConfig</code>:</p> <pre><code>new GraphConfig.Builder()\n.config(new GraphConfig.Builder()\n.graphId(\"exampleGraphId\")\n.build())\n.description(\"Example Graph description\")\n.view(new View.Builder()\n.globalElements(new GlobalViewElementDefinition.Builder()\n.postAggregationFilter(new ElementFilter.Builder()\n.select(\"ExamplePropertyName\")\n.execute(new IsLessThan(\"10\"))\n.build())\n.build())\n.build())\n.library(new FileGraphLibrary())\n.addHook(new Log4jLogger())\n.build();\n</code></pre> <p>and in json:</p> <pre><code>{\n\"graphId\": \"exampleGraphId\",\n\"description\": \"Example Graph description\",\n\"view\": {\n\"globalElements\": [\n{\n\"postAggregationFilterFunctions\": [\n{\n\"predicate\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsLessThan\",\n\"orEqualTo\": false,\n\"value\": \"10\"\n},\n\"selection\": [\"ExamplePropertyName\"]\n}\n]\n}\n]\n},\n\"library\": {\n\"class\": \"uk.gov.gchq.gaffer.store.library.FileGraphLibrary\"\n},\n\"hooks\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.graph.hook.Log4jLogger\"\n}\n]\n}\n</code></pre>"},{"location":"development-guide/project-structure/components/graph/#graph-hooks","title":"Graph Hooks","text":"<p>The <code>Graph</code> class is final and must be used when creating a new connection to a store. We want to ensure that all users have a common point of entry to Gaffer, so all users have to start by instantiating a <code>Graph</code>. Initially this seems quite limiting, but to allow custom logic for different types of graphs we have added graph hooks. These graph hooks allow custom code to be run before and after an operation chain is executed.</p> <p>You can use hooks to do things like custom logging or special operation chain authorisation. To implement your own hook, just implement the <code>GraphHook</code> interface and register it with the graph when you build a <code>Graph</code> instance. GraphHooks should be json serialisable and each hook should have a unit test that extends GraphHookTest.</p> <p>There are some graph hooks which are added by default if they aren't already present in the configuration. The NamedViewResolver and NamedOperationResolver (providing that NamedOperations are supported by the store) are added at the start of the list of hooks. The third hook added is the FunctionAuthoriser, which is added at the end of the list - again assuming no hook is not present in the configuration. This hook stops users from using potentially dangerous functions in their operation chain. If you want to disable this hook, you should overwrite it by adding an empty FunctionAuthoriser to your list of hooks. For example:</p> <pre><code>{\n\"graphId\": \"example\",\n\"hooks\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.graph.hook.FunctionAuthoriser\"\n}\n]\n}\n</code></pre>"},{"location":"development-guide/project-structure/components/integration-test/","title":"Integration Tests","text":"<p>The integration-test module contains Gaffer's Integration Test suite for testing Store implementations.</p> <p>Note</p> <p>This test framework is not a representative example of how to use the Gaffer framework. For an example of how the Gaffer framework can be used, please see the example road-traffic module.</p>"},{"location":"development-guide/project-structure/components/operation/","title":"Operation","text":"<p>The operation module contains the <code>Operation</code> interfaces and core operation implementations.</p> <p>It is assumed that all Gaffer graphs will be able to handle these core operations.</p> <p>An <code>Operation</code> implementation defines an operation to be processed on a graph, or on a set of results which are returned by another operation. An <code>Operation</code> class contains the configuration required to tell Gaffer how to carry out the operation. For example, the <code>AddElements</code> operation contains the elements to be added. The <code>GetElements</code> operation contains the seeds to use to find elements in the graph and the filters to apply to the query. The operation classes themselves should not contain the logic to carry out the operation (as this may vary between the different supported store types), just the configuration.</p> <p>For each operation, each Gaffer store will have an <code>OperationHandler</code>, where the processing logic is contained. This enables operations to be handled differently in each store.</p> <p>Operations can be chained together to form an <code>OperationChain</code>. When an operation chain is executed on a Gaffer graph the output of one operation is passed to the input of the next.</p> <p>An <code>OperationChain.Builder</code> is provided to help with constructing a valid operation chain - it ensures the output type of an operation matches the input type of the next.</p>"},{"location":"development-guide/project-structure/components/operation/#how-to-write-an-operation","title":"How to write an Operation","text":"<p>Operations should be written to be as generic as possible to allow them to be applied to different graphs/stores.</p> <p>Operations must be JSON serialisable in order to be used via the REST API - i.e. there must be a public constructor and all the fields should have getters and setters.</p> <p>Operation implementations need to implement the <code>Operation</code> interface and the extra interfaces they wish to make use of. For example an operation that takes a single input value should implement the <code>Input</code> interface.</p> <p>Here is a list of some of the common interfaces:</p> <ul> <li><code>uk.gov.gchq.gaffer.operation.io.Input</code></li> <li><code>uk.gov.gchq.gaffer.operation.io.Output</code></li> <li><code>uk.gov.gchq.gaffer.operation.io.InputOutput</code> - Use this instead of Input and Output if your operation takes both input and output.</li> <li><code>uk.gov.gchq.gaffer.operation.io.MultiInput</code> - Use this in addition if your operation takes multiple inputs. This will help with JSON serialisation.</li> <li><code>uk.gov.gchq.gaffer.operation.Validatable</code></li> <li><code>uk.gov.gchq.gaffer.operation.graph.OperationView</code></li> <li><code>uk.gov.gchq.gaffer.operation.graph.GraphFilters</code></li> <li><code>uk.gov.gchq.gaffer.operation.graph.SeededGraphFilters</code></li> </ul> <p>Each operation implementation should have a corresponding unit test class that extends the <code>OperationTest</code> class.</p> <p>Operation implementations should override the close method and ensure all closeable fields are closed.</p> <p>The core Gaffer operations need to be registered in the <code>Store</code> class, with their respective handlers. The <code>StoreTest</code> unit test also needs similar information.</p>"},{"location":"development-guide/project-structure/components/operation/#annotations","title":"Annotations","text":"<p>Any fields that are required should be annotated with the Required annotation. As well, each <code>Operation</code> class now also requires the Since annotation, detailing to which version of Gaffer it was introduced. To demonstrate: <pre><code>@Since(\"1.4.0\")\npublic class NewOperation extends Operation {\n@Required\nprivate String requiredField;\n...\n}\n</code></pre></p>"},{"location":"development-guide/project-structure/components/operation/#builder","title":"Builder","text":"<p>All implementations should also have a static inner <code>Builder</code> class that implements the required builders. For example:</p> <pre><code>public static class Builder extends Operation.BaseBuilder&lt;GetElements, Builder&gt;\nimplements InputOutput.Builder&lt;GetElements, Iterable&lt;? extends ElementId&gt;, CloseableIterable&lt;? extends Element&gt;, Builder&gt;,\nMultiInput.Builder&lt;GetElements, ElementId, Builder&gt;,\nSeededGraphFilters.Builder&lt;GetElements, Builder&gt;,\nOptions.Builder&lt;GetElements, Builder&gt; {\npublic Builder() {\nsuper(new GetElements());\n}\n}\n</code></pre>"},{"location":"development-guide/project-structure/components/operation/#operation-scores","title":"Operation Scores","text":"<p>For use with a <code>ScoreOperationChain</code>, some <code>Operation</code>s may require a custom way of calculating an associated score, therefore an implementation of the <code>ScoreResolver</code> interface may be required. There is a <code>DefaultScoreResolver</code> to which the custom implementation should delegate, in a manner specific to the new Operation. For more info, see ScoreOperationChain and ScoreOperationChainExample.</p>"},{"location":"development-guide/project-structure/components/operation/#documentation","title":"Documentation","text":"<p>Class-level Javadoc should be provided for each <code>Operation</code>, giving a description of the functionality, and any configuration information that may not immediately be obvious. Member-level Javadoc is not strictly necessary, but good practice for explanations/clarifications of complex methods.</p> <p>To assist users of the new Operation, it is best practice to provide documentation, and simple usage examples in gaffer-doc.</p>"},{"location":"development-guide/project-structure/components/serialisation/","title":"Serialisation","text":"<p>The serialisation module contains the logic for converting an Object into serialised objects (normally a byte array).</p> <p>The main interface is Serialisation. We have provided a small set of serialisers for commonly used objects. The serialisers we have been designed to optimise speed and size. Serialisers can take arguments which may be mandatory depending on the serialiser used.</p> <p>It is important to choose your serialisers wisely as once your data is persisted using a chosen serialiser, there is no easy way of migrating your data into a different format.</p>"},{"location":"development-guide/project-structure/components/spring-rest/","title":"Spring REST API","text":"<p>The Spring REST API module is an implementation of the Gaffer REST API deployed in a Spring Boot container. It is relatively new compared to the core REST war which uses Jersey/JAX-RS.</p> <p>The Spring REST should provide the following benefits:</p> <ul> <li>Easier to extend through Spring Boot plugins</li> <li>Easier to add dependencies at deployment time (no need to re-build a <code>.war</code> file)</li> <li>Easier to deploy (you only need Java)</li> </ul> <p>However, going forward into Gaffer v2.0 we hope this to become the standard for how we build and deploy REST APIs.</p>"},{"location":"development-guide/project-structure/components/spring-rest/#implemented-features","title":"Implemented Features","text":"<ul> <li>Operations endpoint</li> <li>Graph configuration endpoint</li> <li>Properties endpoint</li> <li>Status endpoint</li> </ul>"},{"location":"development-guide/project-structure/components/spring-rest/#features-were-yet-to-implement","title":"Features we're yet to implement","text":"<ul> <li>Chunked endpoint</li> </ul>"},{"location":"development-guide/project-structure/components/spring-rest/#features-we-dont-plan-to-implement","title":"Features we don't plan to implement","text":"<ul> <li>Custom Swagger UI with operation chain builder</li> <li>Supporting older versions of the API</li> </ul>"},{"location":"development-guide/project-structure/components/spring-rest/#how-to-run","title":"How to run","text":"<p>With Maven from the root of the project: <pre><code>mvn spring-boot:run -pl :spring-rest -Pdemo\n</code></pre></p> <p>With Java using the 'exec' <code>.jar</code> directly: <pre><code>java \\\n-Dgaffer.schemas=/path/to/schemas \\\n-Dgaffer.storeProperties=/path/to/store.properties \\\n-Dgaffer.graph.config=/path/to/graphConfig.json \\\n-jar spring-rest-2.0.0-exec.jar\n</code></pre></p> <p>You can alternatively add the Gaffer system properties to your <code>application.properties</code> file.</p> <p>Once running, open the browser to <code>http://localhost:8080/rest</code>.</p> <p>You can change the context root by changing the <code>server.servlet.context-path</code> value in <code>application.properties</code>.</p>"},{"location":"development-guide/project-structure/components/store/","title":"Store","text":"<p>The store module defines the API for Store implementations. The abstract Store class handles Operations by delegating the Operations to their registered handlers.</p> <p>See the Store Javadoc for further documentation.</p>"},{"location":"development-guide/project-structure/components/store/#writing-a-store","title":"Writing a Store","text":"<p>When implementing a Store, the main task is to write handlers for the operations your Store chooses to support. This can be tricky, but the Store Integration test suite should be used by all Store implementations to validate these operation handlers. When writing these handlers you should implement <code>OperationHandler</code> or <code>OutputOperationHandler</code> depending on whether the operation has an output.</p> <p>Store implementations need to define a set of <code>StoreTraits</code>. These traits tell Gaffer the abilities the Store has. For example the ability to aggregate or filter elements.</p>"},{"location":"development-guide/project-structure/components/store/#schema","title":"Schema","text":"<p>In addition to <code>OperationHandlers</code> the other large part of the store module is the Schema. The Schema is what defines what is in the Graph and how it should be persisted, compacted (summarised) and validated.</p>"},{"location":"development-guide/project-structure/components/libraries/bitmap/","title":"Bitmap Library","text":"<p>The bitmap library module contains various libraries for Bitmaps.</p> <p>In order to make use of the bitmap libraries you will need to include this library as a dependency: <pre><code> &lt;dependency&gt;\n&lt;groupId&gt;uk.gov.gchq.gaffer&lt;/groupId&gt;\n&lt;artifactId&gt;bitmap-library&lt;/artifactId&gt;\n&lt;version&gt;${gaffer.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p>"},{"location":"development-guide/project-structure/components/libraries/bitmap/#registering","title":"Registering","text":"<p>You can register the BitmapJsonModules using the store or system property: <code>gaffer.serialiser.json.modules</code>. This property takes a CSV of classes, so you can use multiple json modules.</p> <pre><code>gaffer.serialiser.json.modules=uk.gov.gchq.gaffer.bitmap.serialisation.json.BitmapJsonModules\n</code></pre>"},{"location":"development-guide/project-structure/components/libraries/flink/","title":"Flink Library","text":"<p>The flink library module contains various libraries for using Apache Flink with Gaffer.</p> <p>In order to make use of the flink libraries you will need to include this library as a dependency: <pre><code> &lt;dependency&gt;\n&lt;groupId&gt;uk.gov.gchq.gaffer&lt;/groupId&gt;\n&lt;artifactId&gt;flink-library&lt;/artifactId&gt;\n&lt;version&gt;${gaffer.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>For information on registering and using flink operations, see the Flink Operations guide.</p>"},{"location":"development-guide/project-structure/components/libraries/flink/#i-am-getting-errors-when-running-the-flink-operations-on-a-cluster","title":"I am getting errors when running the Flink operations on a cluster","text":"<p>This could be to do with the way the Gaffer Store class is serialised and distributed around the cluster. To distribute the job, Flink requires all of the components of the job to be Serializable. The Gaffer Store class is not Serializable so instead we just Serialialize the graphId, Schema and Properties. Then when we require an instance of the Store class again we recreate it again with these parts. This means that any files that are referenced in your StoreProperties must be available on all your nodes in your cluster.</p>"},{"location":"development-guide/project-structure/components/libraries/sketches/","title":"Sketches Library","text":"<p>The sketches library module contains various libraries for sketches.</p> <p>In order to make use of the sketches libraries you will need to include this library as a dependency: <pre><code> &lt;dependency&gt;\n&lt;groupId&gt;uk.gov.gchq.gaffer&lt;/groupId&gt;\n&lt;artifactId&gt;sketches-library&lt;/artifactId&gt;\n&lt;version&gt;${gaffer.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>For information on configuring and using sketches, see the Cardinality guide (for configuring <code>SketchesJsonModules</code> expand \"Additional config\").</p>"},{"location":"development-guide/project-structure/components/libraries/spark/","title":"Spark Library","text":"<p>The spark library contains various libraries for using Apache Spark with Gaffer.</p> <p>In order to make use of the spark libraries you will need to include this library as a dependency: <pre><code> &lt;dependency&gt;\n&lt;groupId&gt;uk.gov.gchq.gaffer&lt;/groupId&gt;\n&lt;artifactId&gt;spark-library&lt;/artifactId&gt;\n&lt;version&gt;${gaffer.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>To use spark with Accumulo you will need to include this dependency: <pre><code> &lt;dependency&gt;\n&lt;groupId&gt;uk.gov.gchq.gaffer&lt;/groupId&gt;\n&lt;artifactId&gt;spark-accumulo-library&lt;/artifactId&gt;\n&lt;version&gt;${gaffer.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>For information on registering and using spark operations, see the Spark Operations guide.</p>"},{"location":"development-guide/project-structure/components/libraries/time/","title":"Time Library","text":"<p>The time library module contains classes that represent concepts relating to time.</p> <p>For example, there is a class (<code>RBMBackedTimestampSet</code>) that can be used to represent a set of timestamps. Internally this stores its state in a Roaring Bitmap for efficiency reasons. There is also a class that stores up to a maximum number N of timestamps. If more than N timestamps are added then a uniform random sample of the timestamps, of size at most N, is stored. Serialisers and aggregators for the above classes are provided.</p> <p>To use this library, you will need to include the following dependency:</p> <pre><code> &lt;dependency&gt;\n&lt;groupId&gt;uk.gov.gchq.gaffer&lt;/groupId&gt;\n&lt;artifactId&gt;time-library&lt;/artifactId&gt;\n&lt;version&gt;${gaffer.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"development-guide/project-structure/maven-dependencies/spring/","title":"Managing dependencies in Gaffer","text":"<p>Gaffer is a large project with a lot of dependency and transitive dependency management required. This page covers some ways to get information about and more easily visualise and understand the dependencies for given Maven modules (or even the whole project).</p> <p>For more information on how Maven handles dependencies, see this Maven guide.</p>"},{"location":"development-guide/project-structure/maven-dependencies/spring/#get-a-simple-list-of-direct-dependencies","title":"Get a simple list of direct dependencies","text":"<p>This outputs the direct (non-transitive) dependencies for all Maven modules in the project. For specific modules append <code>-pl :module-name</code> to the command. <pre><code>mvn dependency:list -DexcludeTransitive=true -Dsort=true\n</code></pre> If <code>-DexcludeTransitive=true</code> is not used it will also print transitive dependencies, but without showing where they come from. The tree option (explained below) is better for getting this kind of information.</p> <p>For more info, see the Maven dependency plugin documentation for the 'list' goal.</p>"},{"location":"development-guide/project-structure/maven-dependencies/spring/#output-to-file","title":"Output to File","text":"<p>The user property <code>-DoutputFile=deps.txt</code> can be used to place output for each module into the root directory of that module. It is also possible to aggregate all results into a single file using <code>mvn dependency:list -B -DappendOutput=true -DoutputFile=$(pwd)/mvn-dep-list.txt</code>.</p> <p>However, any files created contain terminal escape characters for adding colour (even when using <code>-B</code> - this is likely a bug). Another option is to use <code>-B</code> to turn off colour, piping the output through <code>sort --unique</code> (which also aggregates the dependencies) and appending that to a file - instead of using the plugin's file output option.</p>"},{"location":"development-guide/project-structure/maven-dependencies/spring/#get-a-tree-showing-dependencies","title":"Get a tree showing Dependencies","text":"<p>This produces a tree showing the resolved dependencies for all Maven modules in the project. For specific modules append <code>-pl :module-name</code> to the command (as before). <pre><code>mvn dependency:tree\n</code></pre></p> <p>To include all dependencies (resolved, transitive and duplicate) in the tree and to see information on versions which have been managed (via <code>dependencyManagement</code>), append <code>-Dverbose</code>.</p> <p>This verbose flag is very useful for finding out which dependencies are affected by version management and version conflicts.</p> <p>Here's a simplified tree output with the verbose output explained (expand the  symbols): <pre><code>uk.gov.gchq.gaffer:core:pom:2.0.0\n+- org.slf4j:slf4j-api:jar:1.7.36:compile\n+- org.slf4j:slf4j-reload4j:jar:1.7.36:compile\n|  +- (org.slf4j:slf4j-api:jar:1.7.36:compile - omitted for duplicate) // (1)!\n|  \\- ch.qos.reload4j:reload4j:jar:1.2.18.3:compile (version managed from 1.2.19) // (2)!\n+- org.junit.jupiter:junit-jupiter:jar:5.9.0:test\n|  +- org.junit.jupiter:junit-jupiter-api:jar:5.9.0:test\n\\- org.mockito:mockito-junit-jupiter:jar:4.6.1:test\n+- org.mockito:mockito-core:jar:4.6.1:test\n\\- (org.junit.jupiter:junit-jupiter-api:jar:5.8.2:test - omitted for conflict with 5.9.0) // (3)!\n</code></pre></p> <ol> <li>This dependency was omitted because it was already resolved (found) earlier. If a dependency with the same version is seen more than once, subsequent instances are ignored as duplicates.</li> <li>This dependency has had its version changed (managed) from the version defined in the parent transitive dependency's POM to the version for this dependency given in the <code>dependencyManagement</code> section of our POM. The \"version managed from\" in the brackets is the version which would have been used if it hadn't been overridden by specifying a managed version.</li> <li>This dependency was omitted because it was already resolved (found) earlier. If a dependency with different versions is seen more than once, subsequent instances are ignored as conflicts. In this case, the conflicting version is a transitive dependency and the resolved dependency is a direct dependency (declared in the module POM) which takes priority.</li> </ol> <p>This verbose output is also useful for discovering which dependencies need to have exclusions added when using Maven dependency exclusions. As an example, replacing Log4j with Reload4j can be done be excluding all Log4j dependencies and adding Reload4j as a project dependency (from a Java perspective this works because both use the same package name). This requires an exclusion section to be added for every dependency which includes Log4j as a transitive dependency.</p> <p>Without the verbose output, only a single resolved Log4j dependency is shown. In a project with 5 dependencies with Log4j as a sub-dependency, if only the resolved dependency were to be excluded, then another would become the resolved dependency. With this approach, the tree would need to be printed repeatedly until all these dependencies had been seen and excluded. With the verbose output these dependencies are all shown initially.</p> <p>For more info, see the Maven dependency plugin documentation for the 'tree' goal.</p>"},{"location":"development-guide/project-structure/maven-dependencies/spring/#output-to-file_1","title":"Output to File","text":"<p>Unlike <code>dependency:list</code>, the <code>tree</code> plugin goal does output to file correctly. This puts all tree output into a single file called <code>mvn-dep-tree.txt</code> in the current directory: <pre><code>mvn dependency:tree -DoutputFile=$(pwd)/mvn-dep-tree.txt -DappendOutput=true\n</code></pre></p>"},{"location":"development-guide/project-structure/maven-dependencies/spring/#plotting-graphs-of-dependencies","title":"Plotting graphs of dependencies","text":""},{"location":"development-guide/project-structure/maven-dependencies/spring/#using-the-built-in-maven-plugin","title":"Using the built-in Maven plugin","text":"<p>In addition to text output, this can also produce <code>.dot</code> files which can be used to create dependency graph visualisations (in combination with Graphviz). The resulting files are simple and lack positioning information. They only work well if the number of dependencies is low (e.g. <code>-Dverbose=true</code> not used).</p> <p>This visualisation was produced using the plugin and Graphviz <code>sfdp</code>.</p> <pre><code>mvn dependency:tree -DoutputType=dot -DoutputFile=$(pwd)/core.dot -pl :core # Create the .dot file\nsfdp -x -Goverlap=false -Gsplines=true -Tsvg core.dot -o core.svg # Create the SVG image\n</code></pre> <p>It has too much empty space to be very useful.</p> <p></p>"},{"location":"development-guide/project-structure/maven-dependencies/spring/#using-the-depgraph-maven-plugin","title":"Using the Depgraph Maven plugin","text":"<p>A much better tool for creating <code>.dot</code> files is the Depgraph Maven plugin. This creates graphs with optimised node positioning, better formatting and more options than the built-in plugin.</p> <p>The main options available are <code>showClassifiers</code>, <code>showDuplicates</code>, <code>showConflicts</code>, <code>showVersions</code>, <code>showGroupIds</code> &amp; <code>showTypes</code>. All of these options are disabled by default, but have been enabled in the Gaffer POM.</p> <p>It's important to note that this plugin does not have an equivalent to the verbose mode of <code>dependency:tree</code>, and it does not have a way to shown that a dependency's version has been changed using dependency management.</p> <p>For more info on the plugin, see the Depgraph GitHub and plugin docs.</p> <p>An example is shown below. The <code>dot</code> tool is also part of Graphviz.</p> <pre><code>mvn depgraph:graph -pl :map-store -Dscope=compile -DoutputDirectory=$(pwd)\ndot -Tsvg dependency-graph.dot -o filename.svg\n</code></pre> <p>The black dotted lines show duplicates and the red ones show conflicts which were ignored during dependency resolution.</p> <p></p> <p>It's also possible to create an aggregated graph of all dependencies in a project using <code>depgraph:aggregate</code> (which doesn't support showing duplicates or conflicts). For Gaffer this creates a very large image.</p>"},{"location":"reference/glossary/","title":"Glossary","text":"Term Description Node A node is an entity within a graph Edge An edge is a connection between two nodes Properties A property is a key/value pair that stores data on both edges and entities Python A programming language that is used to build applications. Gaffer uses python to interact with the API Java A object oriented programming language used to build software. Gaffer is primarily built in Java Database A database is a collection of organised structured information or data typically stored in a computer system API Application Programming Interface. An API is for one or more services / systems to communicate with each other JSON JavaScript Object Notation is a text based format for representing structure data based on JavaScript object syntax Element The word is used to describe the combination of both an edge and entity Entity An entity represents a point in a graph e.g. a person Stores A Gaffer store represents the backing database responsbile for storing or facilitating access to a graph Operations An operation is an instruction / function that you send to the API to manipulate and query a graph Vertex A vertex refers to the field in an entity that describes its type"},{"location":"reference/intro/","title":"Introduction","text":"<p>These Reference pages contain documentation for the Properties, Operations, Predicates, Functions and Binary Operators in Gaffer.</p> <p>There are also reference pages for the Map, Accumulo, Proxy and Federated Gaffer stores.</p> <p>Info</p> <p>In general, this documentation covers the most common use cases, it doesn't cover everything. The Javadocs for Gaffer and Koryphe have more specialised information.</p>"},{"location":"reference/javadoc/","title":"Gaffer Javadoc","text":"<p>Gaffer is primarily written in Java so all of the operations and functions available stem from a Java class. As such, there are extensive generated Javadocs to aid with the understanding and usage of these classes and their associated methods.</p> <p>The Javadocs can be browsed via the window below or via the hosted site.</p>"},{"location":"reference/binary-operators-guide/binary-operators/","title":"Binary Operators Guide","text":"<p>Binary Operators are aggregation functions. Basic operators come from the Koryphe library, the rest are part of Gaffer itself.</p>"},{"location":"reference/binary-operators-guide/binary-operators/#table-of-all-gaffer-binary-operators","title":"Table of all Gaffer Binary Operators","text":"<p>Note</p> <p>Binary Operators below which are missing a link have not been documented on this site yet.</p> <p>Some examples of Binary Operators in use can be found in the properties guide.</p> Binary Operator Origin <code>binaryoperator.AdaptedBinaryOperator</code> Koryphe <code>binaryoperator.BinaryOperatorComposite</code> Koryphe <code>binaryoperator.BinaryOperatorMap</code> Koryphe <code>impl.binaryoperator.And</code> Koryphe <code>impl.binaryoperator.CollectionConcat</code> Koryphe <code>impl.binaryoperator.CollectionIntersect</code> Koryphe <code>impl.binaryoperator.First</code> Koryphe <code>impl.binaryoperator.Last</code> Koryphe <code>impl.binaryoperator.Max</code> Koryphe <code>impl.binaryoperator.Min</code> Koryphe <code>impl.binaryoperator.Or</code> Koryphe <code>impl.binaryoperator.Product</code> Koryphe <code>impl.binaryoperator.StringConcat</code> Koryphe <code>impl.binaryoperator.StringDeduplicateConcat</code> Koryphe <code>impl.binaryoperator.Sum</code> Koryphe <code>tuple.binaryoperator.TupleAdaptedBinaryOperator</code> Koryphe <code>tuple.binaryoperator.TupleAdaptedBinaryOperatorComposite</code> Koryphe <code>data.element.function.ElementAggregator</code> Gaffer <code>types.function.FreqMapAggregator</code> Gaffer <code>bitmap.function.aggregate.RoaringBitmapAggregator</code> Gaffer <code>types.binaryoperator.CustomMapAggregator</code> Gaffer <code>time.binaryoperator.BoundedTimestampSetAggregator</code> Gaffer <code>time.binaryoperator.LongTimeSeriesAggregator</code> Gaffer <code>time.binaryoperator.RBMBackedTimestampSetAggregator</code> Gaffer <code>store.util.AggregatorUtil$IngestElementBinaryOperator</code> Gaffer <code>store.util.AggregatorUtil$IngestPropertiesBinaryOperator</code> Gaffer <code>store.util.AggregatorUtil$QueryElementBinaryOperator</code> Gaffer <code>store.util.AggregatorUtil$QueryPropertiesBinaryOperator</code> Gaffer <code>sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator</code> Gaffer <code>sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator</code> Gaffer <code>sketches.datasketches.cardinality.binaryoperator.HllUnionAggregator</code> Gaffer <code>sketches.datasketches.frequencies.binaryoperator.LongsSketchAggregator</code> Gaffer <code>sketches.datasketches.frequencies.binaryoperator.StringsSketchAggregator</code> Gaffer <code>sketches.datasketches.quantiles.binaryoperator.DoublesSketchAggregator</code> Gaffer <code>sketches.datasketches.quantiles.binaryoperator.DoublesUnionAggregator</code> Gaffer <code>sketches.datasketches.quantiles.binaryoperator.KllFloatsSketchAggregator</code> Gaffer <code>sketches.datasketches.quantiles.binaryoperator.StringsSketchAggregator</code> Gaffer <code>sketches.datasketches.quantiles.binaryoperator.StringsUnionAggregator</code> Gaffer <code>sketches.datasketches.sampling.binaryoperator.ReservoirItemsSketchAggregator</code> Gaffer <code>sketches.datasketches.sampling.binaryoperator.ReservoirItemsUnionAggregator</code> Gaffer <code>sketches.datasketches.sampling.binaryoperator.ReservoirLongsSketchAggregator</code> Gaffer <code>sketches.datasketches.sampling.binaryoperator.ReservoirLongsUnionAggregator</code> Gaffer <code>sketches.datasketches.theta.binaryoperator.SketchAggregator</code> Gaffer <code>sketches.datasketches.theta.binaryoperator.UnionAggregator</code> Gaffer"},{"location":"reference/binary-operators-guide/koryphe-operators/","title":"Koryphe Operators","text":"<p>Operators from the Koryphe library.</p>"},{"location":"reference/binary-operators-guide/koryphe-operators/#and","title":"And","text":"<p>Applies the logical AND operation to 2 booleans. Javadoc</p> <p>Input type: <code>java.lang.Boolean</code></p> Example And with Booleans or Nulls JavaJSON <pre><code>final And and = new And();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.And\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Boolean true and true java.lang.Boolean true java.lang.Boolean true and false java.lang.Boolean false java.lang.Boolean false and false java.lang.Boolean false java.lang.Boolean false and null java.lang.Boolean false java.lang.Boolean true and null java.lang.Boolean true null and null null"},{"location":"reference/binary-operators-guide/koryphe-operators/#or","title":"Or","text":"<p>Applies the logical OR operation to 2 booleans. Javadoc</p> <p>Input type: <code>java.lang.Boolean</code></p> Example Or with Booleans, Nulls or other JavaJSON <pre><code>final Or or = new Or();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Or\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Boolean true and true java.lang.Boolean true java.lang.Boolean true and false java.lang.Boolean true java.lang.Boolean false and false java.lang.Boolean false java.lang.Boolean false and null java.lang.Boolean false java.lang.Boolean true and null java.lang.Boolean true null and null null java.lang.String test and 3 ClassCastException: java.lang.String cannot be cast to java.lang.Boolean java.lang.Integer 0 and 0 ClassCastException: java.lang.Integer cannot be cast to java.lang.Boolean java.lang.Integer 1 and 0 ClassCastException: java.lang.Integer cannot be cast to java.lang.Boolean"},{"location":"reference/binary-operators-guide/koryphe-operators/#first","title":"First","text":"<p>Returns the first non-null value. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example First with String and Null JavaJSON <pre><code>final First first = new First();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.String first and second java.lang.String first java.lang.String first and null java.lang.String first null and second java.lang.String second null and null null"},{"location":"reference/binary-operators-guide/koryphe-operators/#min","title":"Min","text":"<p>Returns the min value. Javadoc</p> <p>Input type: <code>java.lang.Comparable</code></p> Example Min with String, Integer and Null JavaJSONPython <pre><code>final Min function = new Min();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n}\n</code></pre> <pre><code>g.Min()\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Integer 5 and 6 java.lang.Integer 5 java.lang.String inputString and anotherInputString java.lang.String anotherInputString null and 1 java.lang.Integer 1"},{"location":"reference/binary-operators-guide/koryphe-operators/#max","title":"Max","text":"<p>Returns the max value. Javadoc</p> <p>Input type: <code>java.lang.Comparable</code></p> Example Max with String, Integer and Null JavaJSONPython <pre><code>final Max function = new Max();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n}\n</code></pre> <pre><code>g.Max()\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Integer 5 and 6 java.lang.Integer 6 java.lang.String inputString and anotherInputString java.lang.String inputString null and 1 java.lang.Integer 1"},{"location":"reference/binary-operators-guide/koryphe-operators/#product","title":"Product","text":"<p>Calculates the product of 2 numbers. Javadoc</p> <p>Input type: <code>java.lang.Number</code></p> Example Product with Numbers JavaJSON <pre><code>final Product product = new Product();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Product\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Long 20 and 3 java.lang.Long 60 java.lang.Integer 300 and 400 java.lang.Integer 120000 java.lang.Double 0.0 and 3.0 java.lang.Double 0.0 java.lang.Short 50 and 50 java.lang.Short 2500 java.lang.Short 500 and 500 java.lang.Short 32767 java.lang.Integer -5 and 5 java.lang.Integer -25 java.lang.Long 20 and null java.lang.Long 20"},{"location":"reference/binary-operators-guide/koryphe-operators/#sum","title":"Sum","text":"<p>Calculates the sum of 2 numbers. Javadoc</p> <p>Input type: <code>java.lang.Number</code></p> Example Sum with Numbers JavaJSONPython <pre><code>final Sum sum = new Sum();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n</code></pre> <pre><code>g.Sum()\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Long 20 and 3 java.lang.Long 23 java.lang.Integer 300 and 400 java.lang.Integer 700 java.lang.Double 0.0 and 3.0 java.lang.Double 3.0 java.lang.Short 50 and 50 java.lang.Short 100 java.lang.Short 30000 and 10000 java.lang.Short 32767 java.lang.Integer -5 and 5 java.lang.Integer 0 java.lang.Long 20 and null java.lang.Long 20"},{"location":"reference/binary-operators-guide/koryphe-operators/#collectionconcat","title":"CollectionConcat","text":"<p>Concatenates two collections together. Javadoc</p> <p>Input type: <code>java.util.Collection</code></p> Example CollectionConcat JavaJSONPython <pre><code>final CollectionConcat collectionConcat = new CollectionConcat();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n}\n</code></pre> <pre><code>g.CollectionConcat()\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.util.ArrayList [test1] and [test2, test3] java.util.ArrayList [test1, test2, test3] java.util.ArrayList [1] and [test2, test3] java.util.ArrayList [1, test2, test3] java.util.ArrayList [] and [abc, cde] java.util.ArrayList [abc, cde] java.util.ArrayList [test1] and null java.util.ArrayList [test1] java.util.HashSet [a, b] and [b, c] java.util.HashSet [a, b, c]"},{"location":"reference/binary-operators-guide/koryphe-operators/#collectionintersect","title":"CollectionIntersect","text":"<p>Returns items common to two collections. Javadoc</p> <p>Input type: <code>java.util.Collection</code></p> Example CollectionIntersect JavaJSONPython <pre><code>final CollectionIntersect collectionIntersect = new CollectionIntersect();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionIntersect\"\n}\n</code></pre> <pre><code>g.CollectionIntersect()\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.util.ArrayList [test1] and [test2, test3] java.util.ArrayList [] java.util.ArrayList [1] and [1, 2] java.util.ArrayList [1] java.util.ArrayList [] and [abc, cde] java.util.ArrayList [] java.util.ArrayList [test1] and null java.util.ArrayList [test1] java.util.HashSet [a, b] and [b, c] java.util.HashSet [b]"},{"location":"reference/binary-operators-guide/koryphe-operators/#stringconcat","title":"StringConcat","text":"<p>Concatenates 2 strings. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringConcat with separator JavaJSON <pre><code>final StringConcat stringConcat = new StringConcat();\nstringConcat.setSeparator(\" \");\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringConcat\",\n\"separator\" : \" \"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.String hello and world java.lang.String hello world java.lang.String abc and null java.lang.String abc null and null null Example StringConcat with default separator JavaJSON <pre><code>final StringConcat stringConcat = new StringConcat();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringConcat\",\n\"separator\" : \",\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.String hello and world java.lang.String hello,world java.lang.String abc and null java.lang.String abc null and null null"},{"location":"reference/binary-operators-guide/koryphe-operators/#stringdeduplicateconcat","title":"StringDeduplicateConcat","text":"<p>Concatenates 2 strings and omits duplicates. Javadoc</p> <p>Input type: <code>type</code></p> Example StringDeduplicateConcat with separator JavaJSON <pre><code>final StringDeduplicateConcat stringDeduplicateConcat = new StringDeduplicateConcat();\nstringDeduplicateConcat.setSeparator(\" \");\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringDeduplicateConcat\",\n\"separator\" : \" \"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.String hello and world java.lang.String hello world java.lang.String abc and null java.lang.String abc null and null null java.lang.String abc, and abc java.lang.String abc, abc Example StringDeduplicateConcat with default separator JavaJSON <pre><code>final StringDeduplicateConcat stringDeduplicateConcat = new StringDeduplicateConcat();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringDeduplicateConcat\",\n\"separator\" : \",\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.String hello and world java.lang.String hello,world java.lang.String abc and null java.lang.String abc null and null null java.lang.String abc, and abc java.lang.String abc"},{"location":"reference/functions-guide/functions/","title":"Functions Guide","text":"<p>Functions. Basic functions come from the Koryphe library, the others are part of Gaffer itself.</p>"},{"location":"reference/functions-guide/functions/#table-of-all-gaffer-functions","title":"Table of all Gaffer Functions","text":"<p>Note</p> <p>Functions below which are missing a link have not been documented on this site yet.</p> Function Origin <code>impl.function.ApplyBiFunction</code> Koryphe <code>impl.function.Base64Decode</code> Koryphe <code>impl.function.CallMethod</code> Koryphe <code>impl.function.Cast</code> Koryphe <code>impl.function.Concat</code> Koryphe <code>impl.function.CreateObject</code> Koryphe <code>impl.function.CsvLinesToMaps</code> Koryphe <code>impl.function.CsvToMaps</code> Koryphe <code>impl.function.CurrentDate</code> Koryphe <code>impl.function.CurrentTime</code> Koryphe <code>impl.function.DefaultIfEmpty</code> Koryphe <code>impl.function.DefaultIfNull</code> Koryphe <code>impl.function.DeserialiseJson</code> Koryphe <code>impl.function.DeserialiseXml</code> Koryphe <code>impl.function.DictionaryLookup</code> Koryphe <code>impl.function.Divide</code> Koryphe <code>impl.function.DivideBy</code> Koryphe <code>impl.function.ExtractKeys</code> Koryphe <code>impl.function.ExtractValue</code> Koryphe <code>impl.function.ExtractValues</code> Koryphe <code>impl.function.FirstItem</code> Koryphe <code>impl.function.FirstValid</code> Koryphe <code>impl.function.FunctionChain</code> Koryphe <code>impl.function.Gunzip</code> Koryphe <code>impl.function.Identity</code> Koryphe <code>impl.function.If</code> Koryphe <code>impl.function.Increment</code> Koryphe <code>impl.function.IsEmpty</code> Koryphe <code>impl.function.IterableConcat</code> Koryphe <code>impl.function.IterableFilter</code> Koryphe <code>impl.function.IterableFlatten</code> Koryphe <code>impl.function.IterableFunction</code> Koryphe <code>impl.function.IterableLongest</code> Koryphe <code>impl.function.LastItem</code> Koryphe <code>impl.function.Length</code> Koryphe <code>impl.function.Longest</code> Koryphe <code>impl.function.MapFilter</code> Koryphe <code>impl.function.MapToTuple</code> Koryphe <code>impl.function.Multiply</code> Koryphe <code>impl.function.MultiplyBy</code> Koryphe <code>impl.function.MultiplyLongBy</code> Koryphe <code>impl.function.NthItem</code> Koryphe <code>impl.function.ParseDate</code> Koryphe <code>impl.function.ParseTime</code> Koryphe <code>impl.function.ReverseString</code> Koryphe <code>impl.function.SetValue</code> Koryphe <code>impl.function.Size</code> Koryphe <code>impl.function.StringAppend</code> Koryphe <code>impl.function.StringJoin</code> Koryphe <code>impl.function.StringPrepend</code> Koryphe <code>impl.function.StringRegexReplace</code> Koryphe <code>impl.function.StringRegexSplit</code> Koryphe <code>impl.function.StringReplace</code> Koryphe <code>impl.function.StringSplit</code> Koryphe <code>impl.function.StringTrim</code> Koryphe <code>impl.function.StringTruncate</code> Koryphe <code>impl.function.ToArray</code> Koryphe <code>impl.function.ToBoolean</code> Koryphe <code>impl.function.ToBytes</code> Koryphe <code>impl.function.ToDateString</code> Koryphe <code>impl.function.ToDouble</code> Koryphe <code>impl.function.ToFloat</code> Koryphe <code>impl.function.ToInteger</code> Koryphe <code>impl.function.ToList</code> Koryphe <code>impl.function.ToLong</code> Koryphe <code>impl.function.ToLowerCase</code> Koryphe <code>impl.function.ToNull</code> Koryphe <code>impl.function.ToSet</code> Koryphe <code>impl.function.ToString</code> Koryphe <code>impl.function.ToTuple</code> Koryphe <code>impl.function.ToUpperCase</code> Koryphe <code>tuple.TupleInputAdapter</code> Koryphe <code>tuple.function.TupleAdaptedFunction</code> Koryphe <code>tuple.function.TupleAdaptedFunctionComposite</code> Koryphe <code>function.FunctionComposite</code> Koryphe <code>function.FunctionMap</code> Koryphe <code>data.element.function.ElementTransformer</code> Gaffer <code>data.element.function.ExtractGroup</code> Gaffer <code>data.element.function.ExtractId</code> Gaffer <code>data.element.function.ExtractProperty</code> Gaffer <code>data.element.function.PropertiesTransformer</code> Gaffer <code>data.element.function.ReduceRelatedElements</code> Gaffer <code>data.element.function.ToElementTuple</code> Gaffer <code>data.element.function.ToPropertiesTuple</code> Gaffer <code>data.element.function.TupleToElements</code> Gaffer <code>data.element.function.TuplesToElements</code> Gaffer <code>data.element.function.TypeSubTypeValueToTuple</code> Gaffer <code>data.element.function.TypeValueToTuple</code> Gaffer <code>data.element.function.UnwrapEntityId</code> Gaffer <code>data.generator.CsvElementGenerator</code> Gaffer <code>data.generator.CsvGenerator</code> Gaffer <code>data.generator.JsonToElementGenerator</code> Gaffer <code>data.generator.MapGenerator</code> Gaffer <code>data.graph.function.walk.ExtractWalkEdges</code> Gaffer <code>data.graph.function.walk.ExtractWalkEdgesFromHop</code> Gaffer <code>data.graph.function.walk.ExtractWalkEntities</code> Gaffer <code>data.graph.function.walk.ExtractWalkEntitiesFromHop</code> Gaffer <code>data.graph.function.walk.ExtractWalkVertex</code> Gaffer <code>operation.data.generator.EdgeIdExtractor</code> Gaffer <code>operation.data.generator.EntityIdExtractor</code> Gaffer <code>operation.function.FromElementId</code> Gaffer <code>operation.function.FromEntityId</code> Gaffer <code>operation.function.ToElementId</code> Gaffer <code>operation.function.ToEntityId</code> Gaffer <code>operation.function.ToTrailingWildcardPair</code> Gaffer <code>rest.example.ExampleDomainObjectGenerator</code> Gaffer <code>rest.example.ExampleElementGenerator</code> Gaffer <code>rest.example.ExampleTransformFunction</code> Gaffer <code>sketches.clearspring.cardinality.HyperLogLogPlusEntityGenerator</code> Gaffer <code>sketches.clearspring.cardinality.function.IterableToHyperLogLogPlus</code> Gaffer <code>sketches.clearspring.cardinality.function.ToHyperLogLogPlus</code> Gaffer <code>sketches.datasketches.cardinality.HllSketchEntityGenerator</code> Gaffer <code>sketches.datasketches.cardinality.function.IterableToHllSketch</code> Gaffer <code>sketches.datasketches.cardinality.function.ToHllSketch</code> Gaffer <code>store.util.AggregatorUtil$ToElementKey</code> Gaffer <code>store.util.AggregatorUtil$ToIngestElementKey</code> Gaffer <code>store.util.AggregatorUtil$ToQueryElementKey</code> Gaffer <code>time.function.DateToTimeBucketEnd</code> Gaffer <code>time.function.DateToTimeBucketStart</code> Gaffer <code>time.function.MaskTimestampSetByTimeRange</code> Gaffer <code>time.function.ToSingletonTreeSet</code> Gaffer <code>time.function.ToTimeBucket</code> Gaffer <code>time.function.ToTimeBucketEnd</code> Gaffer <code>time.function.ToTimeBucketStart</code> Gaffer <code>time.function.ToTimestampSet</code> Gaffer <code>types.function.FreqMapExtractor</code> Gaffer <code>types.function.FreqMapPredicator</code> Gaffer <code>types.function.IterableToFreqMap</code> Gaffer <code>types.function.StringsToTypeSubTypeValue</code> Gaffer <code>types.function.StringsToTypeValue</code> Gaffer <code>types.function.ToFreqMap</code> Gaffer <code>types.function.ToTypeSubTypeValue</code> Gaffer <code>types.function.ToTypeValue</code> Gaffer"},{"location":"reference/functions-guide/gaffer-functions/","title":"Gaffer Functions","text":"<p>Functions which are part of Gaffer.</p>"},{"location":"reference/functions-guide/gaffer-functions/#csvgenerator","title":"CsvGenerator","text":"<p>Generates a CSV string for each Element, based on the fields and constants provided. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example Elements to CSV JavaJSONPython <pre><code>final CsvGenerator function = new CsvGenerator.Builder()\n.group(\"Group Label\")\n.vertex(\"Vertex Label\")\n.source(\"Source Label\")\n.property(\"count\", \"Count Label\")\n.constant(\"A Constant\", \"Some constant value\")\n.quoted(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"CsvGenerator\",\n\"fields\" : {\n\"GROUP\" : \"Group Label\",\n\"VERTEX\" : \"Vertex Label\",\n\"SOURCE\" : \"Source Label\",\n\"count\" : \"Count Label\"\n},\n\"constants\" : {\n\"A Constant\" : \"Some constant value\"\n},\n\"quoted\" : false,\n\"commaReplacement\" : \" \"\n}\n</code></pre> <pre><code>g.CsvGenerator( \nfields={'GROUP': 'Group Label', 'VERTEX': 'Vertex Label', 'SOURCE': 'Source Label', 'count': 'Count Label'}, \nconstants={'A Constant': 'Some constant value'}, \nquoted=False, \ncomma_replacement=\" \" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [Entity[vertex=vertex1,group=Foo,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Entity[vertex=vertex2,group=Foo,properties=Properties[]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[]]] uk.gov.gchq.gaffer.data.generator.OneToOneObjectGenerator$1 [Foo,vertex1,,1,A Constant, Foo,vertex2,,,A Constant, Bar,,dest1,1,A Constant, Bar,,dest1,,A Constant] Example Elements to quoted CSV JavaJSONPython <pre><code>final CsvGenerator function = new CsvGenerator.Builder()\n.group(\"Group Label\")\n.vertex(\"Vertex Label\")\n.source(\"Source Label\")\n.property(\"count\", \"Count Label\")\n.constant(\"A Constant\", \"Some constant value\")\n.quoted(true)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"CsvGenerator\",\n\"fields\" : {\n\"GROUP\" : \"Group Label\",\n\"VERTEX\" : \"Vertex Label\",\n\"SOURCE\" : \"Source Label\",\n\"count\" : \"Count Label\"\n},\n\"constants\" : {\n\"A Constant\" : \"Some constant value\"\n},\n\"quoted\" : true,\n\"commaReplacement\" : \" \"\n}\n</code></pre> <pre><code>g.CsvGenerator( \nfields={'GROUP': 'Group Label', 'VERTEX': 'Vertex Label', 'SOURCE': 'Source Label', 'count': 'Count Label'}, \nconstants={'A Constant': 'Some constant value'}, \nquoted=True, \ncomma_replacement=\" \" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [Entity[vertex=vertex1,group=Foo,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Entity[vertex=vertex2,group=Foo,properties=Properties[]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[]]] uk.gov.gchq.gaffer.data.generator.OneToOneObjectGenerator$1 [\"Foo\",\"vertex1\",,\"1\",\"A Constant\", \"Foo\",\"vertex2\",,,\"A Constant\", \"Bar\",,\"dest1\",\"1\",\"A Constant\", \"Bar\",,\"dest1\",,\"A Constant\"]"},{"location":"reference/functions-guide/gaffer-functions/#extractgroup","title":"ExtractGroup","text":"<p>Extracts a group from an element. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.element.Element</code></p> Example ExtractGroup <p>The function will simply extract the group from a given Element.</p> JavaJSONPython <pre><code>final ExtractGroup function = new ExtractGroup();\n</code></pre> <pre><code>{\n\"class\" : \"ExtractGroup\"\n}\n</code></pre> <pre><code>g.ExtractGroup()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.element.Edge Edge[source=src,destination=dest,directed=true,group=EdgeGroup,properties=Properties[]] java.lang.String EdgeGroup uk.gov.gchq.gaffer.data.element.Entity Entity[vertex=vertex,group=EntityGroup,properties=Properties[]] java.lang.String EntityGroup uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=vertex] ClassCastException: uk.gov.gchq.gaffer.operation.data.EntitySeed cannot be cast to uk.gov.gchq.gaffer.data.element.Element null null"},{"location":"reference/functions-guide/gaffer-functions/#extractid","title":"ExtractId","text":"<p>Extracts an identifier from an element. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.element.Element</code></p> Example ExtractId with Edge <p>The function will simply extract the value of the provided Id, for a given Element. This Id can either be an IdentifierType, or a String representation, eg \"SOURCE\".</p> JavaJSONPython <pre><code>final ExtractId function = new ExtractId(IdentifierType.SOURCE);\n</code></pre> <pre><code>{\n\"class\" : \"ExtractId\",\n\"id\" : \"SOURCE\"\n}\n</code></pre> <pre><code>g.ExtractId( \nid=\"SOURCE\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.element.Edge Edge[source=src,destination=dest,directed=true,group=edge,properties=Properties[]] java.lang.String src uk.gov.gchq.gaffer.data.element.Edge Edge[source=13.2,destination=15.642,directed=true,group=otherEdge,properties=Properties[]] java.lang.Double 13.2 Example ExtractId with Entity <p>This example simply demonstrates the same functionality but on an Entity.</p> JavaJSONPython <pre><code>final ExtractId function = new ExtractId(IdentifierType.VERTEX);\n</code></pre> <pre><code>{\n\"class\" : \"ExtractId\",\n\"id\" : \"VERTEX\"\n}\n</code></pre> <pre><code>g.ExtractId( \nid=\"VERTEX\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.element.Entity Entity[vertex=v1,group=entity,properties=Properties[]] java.lang.String v1"},{"location":"reference/functions-guide/gaffer-functions/#extractproperty","title":"ExtractProperty","text":"<p>Extracts a property from an element. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.element.Element</code></p> Example ExtractProperty from Element <p>If present, the function will extract the value of the specified property, otherwise returning null.</p> JavaJSONPython <pre><code>final ExtractProperty function = new ExtractProperty(\"prop1\");\n</code></pre> <pre><code>{\n\"class\" : \"ExtractProperty\",\n\"name\" : \"prop1\"\n}\n</code></pre> <pre><code>g.ExtractProperty( \nname=\"prop1\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.element.Edge Edge[source=dest,destination=src,directed=false,group=edge,properties=Properties[prop2=&lt;java.lang.String&gt;test,prop1=&lt;java.lang.Integer&gt;3]] java.lang.Integer 3 uk.gov.gchq.gaffer.data.element.Entity Entity[vertex=vertex,group=entity,properties=Properties[prop2=&lt;java.lang.Integer&gt;2,prop1=&lt;java.lang.Integer&gt;12,prop3=&lt;java.lang.String&gt;test]] java.lang.Integer 12 uk.gov.gchq.gaffer.data.element.Edge Edge[directed=false,group=UNKNOWN,properties=Properties[]] null"},{"location":"reference/functions-guide/gaffer-functions/#extractwalkedges","title":"ExtractWalkEdges","text":"<p>An ExtractWalkEdges will extract a List of ALL Sets of Edges, from a given Walk. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.graph.Walk</code></p> Example ExtractWalkEdges JavaJSONPython <pre><code>final ExtractWalkEdges function = new ExtractWalkEdges();\n</code></pre> <pre><code>{\n\"class\" : \"ExtractWalkEdges\"\n}\n</code></pre> <pre><code>g.ExtractWalkEdges()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.graph.Walk [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]]] java.util.LinkedList [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]]]"},{"location":"reference/functions-guide/gaffer-functions/#extractwalkedgesfromhop","title":"ExtractWalkEdgesFromHop","text":"<p>An ExtractWalkEdgesFromHop will extract the Set of Edges at a given hop, from a provided Walk. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.graph.Walk</code></p> Example ExtractWalkEdgesFromHop with single set of Edges JavaJSONPython <pre><code>final ExtractWalkEdgesFromHop function = new ExtractWalkEdgesFromHop(1);\n</code></pre> <pre><code>{\n\"class\" : \"ExtractWalkEdgesFromHop\",\n\"hop\" : 1\n}\n</code></pre> <pre><code>g.ExtractWalkEdgesFromHop( \nhop=1 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.graph.Walk [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]]] java.util.HashSet [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]]"},{"location":"reference/functions-guide/gaffer-functions/#extractwalkentitiesfromhop","title":"ExtractWalkEntitiesFromHop","text":"<p>Extracts the set of entities from a single hop in a Walk. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.graph.Walk</code></p> Example ExtractWalkEntitiesFromHop with single set of Entities JavaJSONPython <pre><code>final ExtractWalkEntitiesFromHop function = new ExtractWalkEntitiesFromHop(1);\n</code></pre> <pre><code>{\n\"class\" : \"ExtractWalkEntitiesFromHop\",\n\"hop\" : 1\n}\n</code></pre> <pre><code>g.ExtractWalkEntitiesFromHop( \nhop=1 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.graph.Walk [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]]] java.util.HashSet [Entity[vertex=B,group=BasicEntity,properties=Properties[]], Entity[vertex=B,group=EnhancedEntity,properties=Properties[]]]"},{"location":"reference/functions-guide/gaffer-functions/#extractwalkvertex","title":"ExtractWalkVertex","text":"<p>Extracts the source vertex from a Walk. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.graph.Walk</code></p> Example ExtractWalkVertex JavaJSONPython <pre><code>final ExtractWalkVertex function = new ExtractWalkVertex();\n</code></pre> <pre><code>{\n\"class\" : \"ExtractWalkVertex\"\n}\n</code></pre> <pre><code>g.ExtractWalkVertex()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.graph.Walk [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]]] java.lang.String A"},{"location":"reference/functions-guide/gaffer-functions/#freqmapextractor","title":"FreqMapExtractor","text":"<p>Extracts a count from a frequency map for a given key. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.types.FreqMap</code></p> Example FreqMapExtractor JavaJSONPython <pre><code>final FreqMapExtractor function = new FreqMapExtractor(\"key1\");\n</code></pre> <pre><code>{\n\"class\" : \"FreqMapExtractor\",\n\"key\" : \"key1\"\n}\n</code></pre> <pre><code>g.FreqMapExtractor( \nkey=\"key1\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.types.FreqMap {key1=1, key2=2, key3=3} java.lang.Long 1 uk.gov.gchq.gaffer.types.FreqMap {key2=2, key3=3} null java.util.HashMap {key1=1, key2=2, key3=3} ClassCastException: java.util.HashMap cannot be cast to uk.gov.gchq.gaffer.types.FreqMap null null"},{"location":"reference/functions-guide/gaffer-functions/#mapgenerator","title":"MapGenerator","text":"<p>Converts an iterable of elements into an Iterable of Maps. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example MapGenerator JavaJSONPython <pre><code>final MapGenerator function = new MapGenerator.Builder()\n.group(\"Group Label\")\n.vertex(\"Vertex Label\")\n.source(\"Source Label\")\n.property(\"count\", \"Count Label\")\n.constant(\"A Constant\", \"Some constant value\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"MapGenerator\",\n\"fields\" : {\n\"GROUP\" : \"Group Label\",\n\"VERTEX\" : \"Vertex Label\",\n\"SOURCE\" : \"Source Label\",\n\"count\" : \"Count Label\"\n},\n\"constants\" : {\n\"A Constant\" : \"Some constant value\"\n}\n}\n</code></pre> <pre><code>g.MapGenerator( \nfields={'GROUP': 'Group Label', 'VERTEX': 'Vertex Label', 'SOURCE': 'Source Label', 'count': 'Count Label'}, \nconstants={'A Constant': 'Some constant value'} \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [Entity[vertex=vertex1,group=Foo,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Entity[vertex=vertex2,group=Foo,properties=Properties[]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[]]] uk.gov.gchq.gaffer.data.generator.OneToOneObjectGenerator$1 [{Group Label=Foo, Vertex Label=vertex1, Count Label=1, A Constant=Some constant value}, {Group Label=Foo, Vertex Label=vertex2, A Constant=Some constant value}, {Group Label=Bar, Source Label=dest1, Count Label=1, A Constant=Some constant value}, {Group Label=Bar, Source Label=dest1, A Constant=Some constant value}]"},{"location":"reference/functions-guide/gaffer-functions/#masktimestampsetbytimerange","title":"MaskTimestampSetByTimeRange","text":"<p>Applies a mask to a timestamp set based on a start and end date. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.time.RBMBackedTimestampSet</code></p> Example MaskTimestampSetByTimeRange with start date JavaJSONPython <pre><code>MaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(10000L, null);\n</code></pre> <pre><code>{\n\"class\" : \"MaskTimestampSetByTimeRange\",\n\"startTime\" : 10000,\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.MaskTimestampSetByTimeRange( \nstart_time=10000, \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] Example MaskTimestampSetByTimeRange with end date JavaJSONPython <pre><code>MaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(null, 20000L);\n</code></pre> <pre><code>{\n\"class\" : \"MaskTimestampSetByTimeRange\",\n\"endTime\" : 20000,\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.MaskTimestampSetByTimeRange( \nend_time=20000, \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z] Example MaskTimestampSetByTimeRange with start and end date JavaJSONPython <pre><code>MaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(10000L, 20000L);\n</code></pre> <pre><code>{\n\"class\" : \"MaskTimestampSetByTimeRange\",\n\"startTime\" : 10000,\n\"endTime\" : 20000,\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.MaskTimestampSetByTimeRange( \nstart_time=10000, \nend_time=20000, \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:10Z,1970-01-01T00:00:20Z] Example MaskTimestampSetByTimeRange without start or end date JavaJSONPython <pre><code>MaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange();\n</code></pre> <pre><code>{\n\"class\" : \"MaskTimestampSetByTimeRange\",\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.MaskTimestampSetByTimeRange( \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] Example MaskTimestampSetByTimeRange with time unit JavaJSONPython <pre><code>MaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(10L, 25L, TimeUnit.SECOND);\n</code></pre> <pre><code>{\n\"class\" : \"MaskTimestampSetByTimeRange\",\n\"startTime\" : 10,\n\"endTime\" : 25,\n\"timeUnit\" : \"SECOND\"\n}\n</code></pre> <pre><code>g.MaskTimestampSetByTimeRange( \nstart_time=10, \nend_time=25, \ntime_unit=\"SECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:10Z,1970-01-01T00:00:20Z]"},{"location":"reference/functions-guide/gaffer-functions/#reducerelatedelements","title":"ReduceRelatedElements","text":"<p>This function takes an Iterable of Elements and combines all related elements using the provided aggregator and related group. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example ReduceRelatedElements - Basic <p>In this small example, vertex 1a is related to vertex 1b, and vertex 2a is related to vertex 2b. As well as this, vertex 1a is connected to vertex 2b with the basicEdge group. We setup the function to do a few things. Firstly, we set the visibility property name, then state we want to concatenate the visibility properties. Next we set the vertex aggregator to the Max Binary Operator. This will be used to compare and reduce vertices with. Finally, we assert the vertex groups that describe which vertices are related, in this case 'relatesTo'.  </p> <p>In our results we should expect to see that 1b and 2b are source and dest as they were aggregated with the Max operator. The other properties should be listed in the related properties. As well as this, the visiblities should be concatenated together.</p> JavaJSONPython <pre><code>final List&lt;Element&gt; elements = Arrays.asList(\nnew Edge.Builder()\n.source(\"1a\")\n.dest(\"2b\")\n.group(\"basicEdge\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"1a\")\n.dest(\"1b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"2a\")\n.dest(\"2b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"private\"))\n.build()\n);\nfinal ReduceRelatedElements function = new ReduceRelatedElements();\nfunction.setVisibilityProperty(\"visibility\");\nfunction.setVisibilityAggregator(new CollectionConcat&lt;&gt;());\nfunction.setVertexAggregator(new Max());\nfunction.setRelatedVertexGroups(Collections.singleton(\"relatesTo\"));\n</code></pre> <pre><code>{\n\"class\" : \"ReduceRelatedElements\",\n\"vertexAggregator\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n},\n\"visibilityAggregator\" : {\n\"class\" : \"CollectionConcat\"\n},\n\"visibilityProperty\" : \"visibility\",\n\"relatedVertexGroups\" : [ \"relatesTo\" ]\n}\n</code></pre> <pre><code>g.ReduceRelatedElements( \nvisibility_aggregator=g.CollectionConcat(), \nvertex_aggregator=g.Max(), \nrelated_vertex_groups=[ \n\"relatesTo\" \n], \nvisibility_property=\"visibility\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Arrays$ArrayList [Edge[source=1a,destination=2b,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=1a,destination=1b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=2a,destination=2b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[private]]]] uk.gov.gchq.koryphe.util.IterableUtil$ChainedIterable [Edge[source=1b,destination=2b,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public, private],sourceRelatedVertices=&lt;java.util.HashSet&gt;[1a],destinationRelatedVertices=&lt;java.util.HashSet&gt;[2a]]]] null null Example ReduceRelatedElements - Complex JavaJSONPython <pre><code>final List&lt;Element&gt; elements = Arrays.asList(\nnew Edge.Builder()\n.source(\"1b\")\n.dest(\"2a\")\n.group(\"basicEdge\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"1a\")\n.dest(\"3a\")\n.group(\"basicEdge\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Entity.Builder()\n.vertex(\"2a\")\n.group(\"basicEntity\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"1b\")\n.dest(\"1a\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"2a\")\n.dest(\"2b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"3a\")\n.dest(\"3b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"private\"))\n.build(),\nnew Edge.Builder()\n.source(\"2a\")\n.dest(\"3b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"private\"))\n.build(),\nnew Edge.Builder()\n.source(\"2b\")\n.dest(\"3a\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"3a\")\n.dest(\"4b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"private\"))\n.build(),\nnew Edge.Builder()\n.source(\"5b\")\n.dest(\"4a\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build()\n);\nfinal ReduceRelatedElements function = new ReduceRelatedElements();\nfunction.setVisibilityProperty(\"visibility\");\nfunction.setVisibilityAggregator(new CollectionConcat&lt;&gt;());\nfunction.setVertexAggregator(new Max());\nfunction.setRelatedVertexGroups(Collections.singleton(\"relatesTo\"));\n</code></pre> <pre><code>{\n\"class\" : \"ReduceRelatedElements\",\n\"vertexAggregator\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n},\n\"visibilityAggregator\" : {\n\"class\" : \"CollectionConcat\"\n},\n\"visibilityProperty\" : \"visibility\",\n\"relatedVertexGroups\" : [ \"relatesTo\" ]\n}\n</code></pre> <pre><code>g.ReduceRelatedElements( \nvisibility_aggregator=g.CollectionConcat(), \nvertex_aggregator=g.Max(), \nrelated_vertex_groups=[ \n\"relatesTo\" \n], \nvisibility_property=\"visibility\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Arrays$ArrayList [Edge[source=1b,destination=2a,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=1a,destination=3a,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Entity[vertex=2a,group=basicEntity,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=1a,destination=1b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=2a,destination=2b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=3a,destination=3b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[private]]], Edge[source=2a,destination=3b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[private]]], Edge[source=2b,destination=3a,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=3a,destination=4b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[private]]], Edge[source=4a,destination=5b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]]] uk.gov.gchq.koryphe.util.IterableUtil$ChainedIterable [Edge[source=1b,destination=4b,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public, private],sourceRelatedVertices=&lt;java.util.HashSet&gt;[1a],destinationRelatedVertices=&lt;java.util.HashSet&gt;[2b, 3a, 2a, 3b]]], Edge[source=1b,destination=4b,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public, private],sourceRelatedVertices=&lt;java.util.HashSet&gt;[1a],destinationRelatedVertices=&lt;java.util.HashSet&gt;[2b, 3a, 2a, 3b]]], Entity[vertex=4b,group=basicEntity,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public, private],relatedVertices=&lt;java.util.HashSet&gt;[2b, 3a, 2a, 3b]]]]"},{"location":"reference/functions-guide/gaffer-functions/#tofreqmap","title":"ToFreqMap","text":"<p>Creates a new FreqMap and upserts a given value. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToFreqMap JavaJSONPython <pre><code>Function toFreqMap = new ToFreqMap();\n</code></pre> <pre><code>{\n\"class\" : \"ToFreqMap\"\n}\n</code></pre> <pre><code>g.ToFreqMap()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String aString uk.gov.gchq.gaffer.types.FreqMap {aString=1} java.lang.Long 100 uk.gov.gchq.gaffer.types.FreqMap {100=1} java.lang.Integer 20 uk.gov.gchq.gaffer.types.FreqMap {20=1} uk.gov.gchq.gaffer.types.TypeValue TypeValue[type=type1,value=value1] uk.gov.gchq.gaffer.types.FreqMap {TypeValue[type=type1,value=value1]=1} null uk.gov.gchq.gaffer.types.FreqMap {null=1}"},{"location":"reference/functions-guide/gaffer-functions/#totypevalue","title":"ToTypeValue","text":"<p>Converts a value into a TypeValue. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToTypeValue JavaJSONPython <pre><code>Function toTypeValue = new ToTypeValue();\n</code></pre> <pre><code>{\n\"class\" : \"ToTypeValue\"\n}\n</code></pre> <pre><code>g.ToTypeValue()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String aString uk.gov.gchq.gaffer.types.TypeValue TypeValue[value=aString] java.lang.Long 100 uk.gov.gchq.gaffer.types.TypeValue TypeValue[value=100] java.lang.Integer 25 uk.gov.gchq.gaffer.types.TypeValue TypeValue[value=25] uk.gov.gchq.gaffer.types.TypeValue TypeValue[type=type1,value=value1] uk.gov.gchq.gaffer.types.TypeValue TypeValue[value=TypeValue[type=type1,value=value1]] null uk.gov.gchq.gaffer.types.TypeValue TypeValue[]"},{"location":"reference/functions-guide/gaffer-functions/#totypesubtypevalue","title":"ToTypeSubTypeValue","text":"<p>Converts a value into a TypeSubTypeValue. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToTypeSubTypeValue JavaJSONPython <pre><code>Function toTypeSubTypeValue = new ToTypeSubTypeValue();\n</code></pre> <pre><code>{\n\"class\" : \"ToTypeSubTypeValue\"\n}\n</code></pre> <pre><code>g.ToTypeSubTypeValue()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String aString uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[value=aString] java.lang.Long 100 uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[value=100] java.lang.Integer 25 uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[value=25] uk.gov.gchq.gaffer.types.TypeValue TypeValue[type=type1,value=value1] uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[value=TypeValue[type=type1,value=value1]] null uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[]"},{"location":"reference/functions-guide/gaffer-functions/#totrailingwildcardpair","title":"ToTrailingWildcardPair","text":"<p>Converts an input value into a pair of EntityIds representing a range. The end of range is customisable. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example ToTrailingWildcardPair with default end of range JavaJSONPython <pre><code>final ToTrailingWildcardPair function = new ToTrailingWildcardPair();\n</code></pre> <pre><code>{\n\"class\" : \"ToTrailingWildcardPair\",\n\"endOfRange\" : \"~\"\n}\n</code></pre> <pre><code>g.ToTrailingWildcardPair( \nend_of_range=\"~\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String value1 uk.gov.gchq.gaffer.commonutil.pair.Pair Pair[first=EntitySeed[vertex=value1],second=EntitySeed[vertex=value1~]] java.lang.String value2 uk.gov.gchq.gaffer.commonutil.pair.Pair Pair[first=EntitySeed[vertex=value2],second=EntitySeed[vertex=value2~]] null null Example ToTrailingWildcardPair with custom end of range JavaJSONPython <pre><code>final ToTrailingWildcardPair function = new ToTrailingWildcardPair();\nfunction.setEndOfRange(\"custom\");\n</code></pre> <pre><code>{\n\"class\" : \"ToTrailingWildcardPair\",\n\"endOfRange\" : \"custom\"\n}\n</code></pre> <pre><code>g.ToTrailingWildcardPair( \nend_of_range=\"custom\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String value1 uk.gov.gchq.gaffer.commonutil.pair.Pair Pair[first=EntitySeed[vertex=value1],second=EntitySeed[vertex=value1custom]] java.lang.String value2 uk.gov.gchq.gaffer.commonutil.pair.Pair Pair[first=EntitySeed[vertex=value2],second=EntitySeed[vertex=value2custom]] null null"},{"location":"reference/functions-guide/gaffer-functions/#typesubtypevaluetotuple","title":"TypeSubTypeValueToTuple","text":"<p>Converts an TypeSubTypeValue into a Tuple. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.types.TypeSubTypeValue</code></p> Example TypeSubTypeValueToTuple JavaJSONPython <pre><code>final TypeSubTypeValueToTuple function = new TypeSubTypeValueToTuple();\n</code></pre> <pre><code>{\n\"class\" : \"TypeSubTypeValueToTuple\"\n}\n</code></pre> <pre><code>g.TypeSubTypeValueToTuple()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[type=type,subType=subType,value=value] [java.lang.String, java.lang.String, java.lang.String] [type, subType, value] null null"},{"location":"reference/functions-guide/gaffer-functions/#typevaluetotuple","title":"TypeValueToTuple","text":"<p>Converts an TypeValue into a Tuple. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.types.TypeSubTypeValue</code></p> Example TypeValueToTuple JavaJSONPython <pre><code>final TypeValueToTuple function = new TypeValueToTuple();\n</code></pre> <pre><code>{\n\"class\" : \"TypeValueToTuple\"\n}\n</code></pre> <pre><code>g.TypeValueToTuple()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.types.TypeValue TypeValue[type=type,value=value] [java.lang.String, java.lang.String] [type, value] null null"},{"location":"reference/functions-guide/gaffer-functions/#unwrapentityid","title":"UnwrapEntityId","text":"<p>For input objects which are an EntityId, the vertex value will be unwrapped and returned, otherwise the original object will be returned. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example UnwrapEntityId JavaJSONPython <pre><code>final UnwrapEntityId function = new UnwrapEntityId();\n</code></pre> <pre><code>{\n\"class\" : \"UnwrapEntityId\"\n}\n</code></pre> <pre><code>g.UnwrapEntityId()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=vertex1] java.lang.String vertex1 uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=vertex2] java.lang.String vertex2 uk.gov.gchq.gaffer.data.element.Entity Entity[vertex=vertex2,group=group,properties=Properties[]] java.lang.String vertex2 java.lang.String a string java.lang.String a string java.lang.Integer 10 java.lang.Integer 10 null null"},{"location":"reference/functions-guide/koryphe-functions/","title":"Koryphe Functions","text":"<p>Functions from the Koryphe library.</p>"},{"location":"reference/functions-guide/koryphe-functions/#applybifunction","title":"ApplyBiFunction","text":"<p>Applies the given BiFunction. Javadoc</p> <p>Input type depends on the BiFunction given.</p> Example ApplyBiFunction using sum JavaJSONPython <pre><code>final ApplyBiFunction&lt;Number, Number, Number&gt; function = new ApplyBiFunction&lt;&gt;(new Sum());\n</code></pre> <pre><code>{\n\"class\" : \"ApplyBiFunction\",\n\"function\" : {\n\"class\" : \"Sum\"\n}\n}\n</code></pre> <pre><code>g.ApplyBiFunction( \nfunction=g.Sum() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.Integer, java.lang.Integer] [1, 2] java.lang.Integer 3 [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] [1, 2, 3, 4] java.lang.Integer 3 [java.lang.Double, java.lang.Double] [1.1, 2.2] java.lang.Double 3.3000000000000003 Example ApplyBiFunction using max JavaJSONPython <pre><code>final ApplyBiFunction&lt;Comparable, Comparable, Comparable&gt; function = new ApplyBiFunction&lt;&gt;(new Max());\n</code></pre> <pre><code>{\n\"class\" : \"ApplyBiFunction\",\n\"function\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n}\n}\n</code></pre> <pre><code>g.ApplyBiFunction( \nfunction=g.Max() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.Integer, java.lang.Integer] [1, 2] java.lang.Integer 2 [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] [1, 2, 3, 4] java.lang.Integer 2 [java.lang.Double, java.lang.Double] [1.1, 2.2] java.lang.Double 2.2 Example ApplyBiFunction using min JavaJSONPython <pre><code>final ApplyBiFunction&lt;Comparable, Comparable, Comparable&gt; function = new ApplyBiFunction&lt;&gt;(new Min());\n</code></pre> <pre><code>{\n\"class\" : \"ApplyBiFunction\",\n\"function\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n}\n}\n</code></pre> <pre><code>g.ApplyBiFunction( \nfunction=g.Min() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.Integer, java.lang.Integer] [1, 2] java.lang.Integer 1 [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] [1, 2, 3, 4] java.lang.Integer 1 [java.lang.Double, java.lang.Double] [1.1, 2.2] java.lang.Double 1.1"},{"location":"reference/functions-guide/koryphe-functions/#base64decode","title":"Base64Decode","text":"<p>Decodes a base64 encoded byte array. Javadoc</p> <p>Input type: <code>byte[]</code></p> Example Base64Decode JavaJSONPython <pre><code>final Base64Decode function = new Base64Decode();\n</code></pre> <pre><code>{\n\"class\" : \"Base64Decode\"\n}\n</code></pre> <pre><code>g.Base64Decode()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result byte[] dGVzdCBzdHJpbmc= byte[] test string null null"},{"location":"reference/functions-guide/koryphe-functions/#callmethod","title":"CallMethod","text":"<p>Allows you to call any public no-argument method on an object. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example CallMethod with <code>toString</code> JavaJSONPython <pre><code>final CallMethod function = new CallMethod(\"toString\");\n</code></pre> <pre><code>{\n\"class\" : \"CallMethod\",\n\"method\" : \"toString\"\n}\n</code></pre> <pre><code>g.CallMethod( \nmethod=\"toString\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String a string java.lang.String a string java.lang.Integer 1 java.lang.String 1 java.util.HashSet [item2, item1] java.lang.String [item2, item1] null null Example CallMethod with <code>toLowerCase</code> JavaJSONPython <pre><code>final CallMethod function = new CallMethod(\"toLowerCase\");\n</code></pre> <pre><code>{\n\"class\" : \"CallMethod\",\n\"method\" : \"toLowerCase\"\n}\n</code></pre> <pre><code>g.CallMethod( \nmethod=\"toLowerCase\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String STRING1 java.lang.String string1 java.lang.String String2 java.lang.String string2 java.lang.Integer 10 RuntimeException: Unable to invoke toLowerCase on object class class java.lang.Integer null null"},{"location":"reference/functions-guide/koryphe-functions/#cast","title":"Cast","text":"<p>Casts input to specified class. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example Cast JavaJSONPython <pre><code>final Cast function = new Cast(String.class);\n</code></pre> <pre><code>{\n\"class\" : \"Cast\",\n\"outputClass\" : \"String\"\n}\n</code></pre> <pre><code>g.Cast( \noutput_class=\"java.lang.String\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 5 ClassCastException: Cannot cast java.lang.Integer to java.lang.String java.lang.String inputString java.lang.String inputString null null"},{"location":"reference/functions-guide/koryphe-functions/#concat","title":"Concat","text":"<p>Objects are concatenated by concatenating the outputs from calling <code>toString</code> on each object. The default separator is a comma. Javadoc</p> <p>Input type: <code>java.lang.Object, java.lang.Object</code></p> Example Concat JavaJSONPython <pre><code>final Concat function = new Concat(\",\");\n</code></pre> <pre><code>{\n\"class\" : \"Concat\",\n\"separator\" : \",\"\n}\n</code></pre> <pre><code>g.Concat( \nseparator=\",\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.String, java.lang.String] [foo, bar] java.lang.String foo,bar [java.lang.String, ] [foo, null] java.lang.String foo [java.lang.String, java.lang.String] [foo, ] java.lang.String foo, [java.lang.String, java.lang.Double] [foo, 1.2] java.lang.String foo,1.2 [ ,java.lang.String] [null, bar] java.lang.String bar [java.lang.Integer, java.lang.Integer] [1, 2] java.lang.String 1,2"},{"location":"reference/functions-guide/koryphe-functions/#createobject","title":"CreateObject","text":"<p>Creates a new object of a given type. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example CreateObject with String JavaJSONPython <pre><code>final CreateObject createObject = new CreateObject(String.class);\n</code></pre> <pre><code>{\n\"class\" : \"CreateObject\",\n\"objectClass\" : \"String\"\n}\n</code></pre> <pre><code>g.CreateObject( \nobject_class=\"java.lang.String\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String a normal string java.lang.String a normal string byte[] some bytes java.lang.String some bytes null java.lang.String java.lang.Integer 123 RuntimeException: Unable to create a new instance of java.lang.String. No constructors were found that accept a java.lang.Integer [C [C@246c4b32 java.lang.String a char array Example CreateObject with List JavaJSONPython <pre><code>final CreateObject createObject = new CreateObject(ArrayList.class);\n</code></pre> <pre><code>{\n\"class\" : \"CreateObject\",\n\"objectClass\" : \"ArrayList\"\n}\n</code></pre> <pre><code>g.CreateObject( \nobject_class=\"java.util.ArrayList\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [list, example] java.util.ArrayList [list, example] java.util.HashSet [set, example] java.util.ArrayList [set, example] java.util.HashMap {} RuntimeException: Unable to create a new instance of java.util.ArrayList. No constructors were found that accept a java.util.HashMap null java.util.ArrayList []"},{"location":"reference/functions-guide/koryphe-functions/#csvlinestomaps","title":"CsvLinesToMaps","text":"<p>Parses CSV lines into Maps. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example CsvLinesToMaps with delimiter JavaJSONPython <pre><code>final CsvLinesToMaps function = new CsvLinesToMaps()\n.header(\"header1\", \"header2\", \"header3\")\n.firstRow(1)\n.delimiter('|');\n</code></pre> <pre><code>{\n\"class\" : \"CsvLinesToMaps\",\n\"header\" : [ \"header1\", \"header2\", \"header3\" ],\n\"firstRow\" : 1,\n\"delimiter\" : \"|\"\n}\n</code></pre> <pre><code>g.CsvLinesToMaps( \ndelimiter=\"|\", \nheader=[ \n\"header1\", \n\"header2\", \n\"header3\" \n], \nfirst_row=1 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Arrays$ArrayList <code>[header1|header2|header3, value1|value2|value3]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}]</code> java.util.Arrays$ArrayList <code>[header1|header2|header3, value1||value3]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=, header1=value1}]</code> java.util.Arrays$ArrayList <code>[header1|header2|header3, value1|value2]</code> IllegalArgumentException: CSV has 2 columns, but there are 3 provided column names java.util.Arrays$ArrayList <code>[header1||header3, value1|value2|value3]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}]</code> java.util.Arrays$ArrayList <code>[header1|header2, value1|value2|value3]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}]</code> java.util.Arrays$ArrayList <code>[header1|header2|header3, value1|value2|value3, value4|value5|value6]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}, {header3=value6, header2=value5, header1=value4}]</code> java.util.Arrays$ArrayList <code>[header1|header2|header3, , value4|value5|value6]</code> NoSuchElementException: No more CSV records available java.util.Arrays$ArrayList <code>[header1|header2|header3, null, value4|value5|value6]</code> NullPointerException: null java.util.Arrays$ArrayList <code>[value1|value2|value3, value4|value5|value6]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}, {header3=value6, header2=value5, header1=value4}]</code> java.util.Arrays$ArrayList <code>[null, value1|value2|value3, value4|value5|value6]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}, {header3=value6, header2=value5, header1=value4}]</code>"},{"location":"reference/functions-guide/koryphe-functions/#csvtomaps","title":"CsvToMaps","text":"<p>Parses CSVs into Maps. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example CsvToMaps JavaJSONPython <pre><code>final CsvToMaps function = new CsvToMaps().header(\"header1\", \"header2\", \"header3\").firstRow(1);\n</code></pre> <pre><code>{\n\"class\" : \"CsvToMaps\",\n\"header\" : [ \"header1\", \"header2\", \"header3\" ],\n\"firstRow\" : 1\n}\n</code></pre> <pre><code>g.CsvToMaps( \nheader=[ \n\"header1\", \n\"header2\", \n\"header3\" \n], \nfirst_row=1 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String header1,header2,header3 \\n value1,value2,value3 uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [{header3=value3, header2=value2, header1=value1}] java.lang.String header1,header2,header3 \\n value1,value2,value3 \\n value4,value5,value6 uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [{header3=value3, header2=value2, header1=value1}, {header3=value6\", header2=value5, header1=value4}] java.lang.String header1,header2,header3 \\n ,,value3 \\n value4,value5,value6 uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [{header3=value3, header2=, header1=}, {header3=value6\", header2=value5, header1=value4}] java.lang.String header1,header2,header3,header4 \\n value1,value2,value3,value4 \\n value5,value6,value7,value8 NoSuchElementException: null null null java.lang.String uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable []"},{"location":"reference/functions-guide/koryphe-functions/#currentdate","title":"CurrentDate","text":"<p>Returns the current date and time, input is ignored. Javadoc</p> <p>Input type (ignored): <code>java.lang.Object</code></p> Example getting CurrentDate JavaJSONPython <pre><code>final CurrentDate currentDate = new CurrentDate();\n</code></pre> <pre><code>{\n\"class\" : \"CurrentDate\"\n}\n</code></pre> <pre><code>g.CurrentDate()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result null java.util.Date Mon Nov 07 11:00:17 GMT 2022"},{"location":"reference/functions-guide/koryphe-functions/#currenttime","title":"CurrentTime","text":"<p>Returns the current time in milliseconds, input is ignored. Javadoc</p> <p>Input type (ignored): <code>java.lang.Object</code></p> Example getting CurrentTime JavaJSONPython <pre><code>final CurrentTime currentTime = new CurrentTime();\n</code></pre> <pre><code>{\n\"class\" : \"CurrentTime\"\n}\n</code></pre> <pre><code>g.CurrentTime()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result null java.lang.Long 1667818817897"},{"location":"reference/functions-guide/koryphe-functions/#defaultifempty","title":"DefaultIfEmpty","text":"<p>Provides a default value if the input is empty. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example DefaultIfEmpty JavaJSONPython <pre><code>final DefaultIfEmpty function = new DefaultIfEmpty();\n</code></pre> <pre><code>{\n\"class\" : \"DefaultIfEmpty\"\n}\n</code></pre> <pre><code>g.DefaultIfEmpty()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String String input java.lang.String String input java.lang.Long 5 IllegalArgumentException: Could not determine the size of the provided value null null java.lang.String null"},{"location":"reference/functions-guide/koryphe-functions/#defaultifnull","title":"DefaultIfNull","text":"<p>Provides a default value if the input is null. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example DefaultIfNull JavaJSONPython <pre><code>final DefaultIfNull function = new DefaultIfNull(\"DEFAULT\");\n</code></pre> <pre><code>{\n\"class\" : \"DefaultIfNull\",\n\"defaultValue\" : \"DEFAULT\"\n}\n</code></pre> <pre><code>g.DefaultIfNull( \ndefault_value=\"DEFAULT\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String String input java.lang.String String input java.lang.Long 5 java.lang.Long 5 null java.lang.String DEFAULT java.lang.String java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#deserialisejson","title":"DeserialiseJson","text":"<p>Parses a JSON string into Java objects. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example DeserialiseJson JavaJSONPython <pre><code>final DeserialiseJson function = new DeserialiseJson();\n</code></pre> <pre><code>{\n\"class\" : \"DeserialiseJson\"\n}\n</code></pre> <pre><code>g.DeserialiseJson()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String {\"elements\": [{\"value\": \"value1\"}, {\"value\": \"value2\"}]} java.util.LinkedHashMap {elements=[{value=value1}, {value=value2}]} java.lang.String [ \"ListValue1\", \"ListValue2\", \"ListValue3\" ] java.util.ArrayList [ListValue1, ListValue2, ListValue3] java.lang.String { \"number\":30 } java.util.LinkedHashMap {number=30} java.lang.String { \"false\":true } java.util.LinkedHashMap {false=true} java.lang.String { \"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\", \"vertex\" : 1 } java.util.LinkedHashMap {class=uk.gov.gchq.gaffer.operation.data.EntitySeed, vertex=1} java.lang.String [ \"listValue1\", \"listValue1\", \"listValue1\" ] java.util.ArrayList [listValue1, listValue1, listValue1] java.lang.String { \"key1\" : 1.0, \"key2\" : 2.2, \"key3\" : 3.3 } java.util.LinkedHashMap {key1=1.0, key2=2.2, key3=3.3}"},{"location":"reference/functions-guide/koryphe-functions/#deserialisexml","title":"DeserialiseXml","text":"<p>Parses an XML document into multiple Maps. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example DeserialiseXml JavaJSONPython <pre><code>final DeserialiseXml function = new DeserialiseXml();\n</code></pre> <pre><code>{\n\"class\" : \"DeserialiseXml\"\n}\n</code></pre> <pre><code>g.DeserialiseXml()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String &lt;element1&gt;value&lt;/element1&gt; java.util.HashMap {element1=value} java.lang.String &lt;root&gt;&lt;element1&gt;value1&lt;/element1&gt;&lt;element2&gt;value2&lt;/element2&gt;&lt;/root&gt; java.util.HashMap {root={element1=value1, element2=value2}} java.lang.String &lt;root&gt;&lt;element1&gt;&lt;element2&gt;value1&lt;/element2&gt;&lt;/element1&gt;&lt;element1&gt;&lt;element2&gt;value2&lt;/element2&gt;&lt;/element1&gt;&lt;/root&gt; java.util.HashMap {root={element1=[{element2=value1}, {element2=value2}]}}"},{"location":"reference/functions-guide/koryphe-functions/#dictionarylookup","title":"DictionaryLookup","text":"<p>Looks up a value in a Map. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example DictionaryLookup JavaJSONPython <pre><code>final DictionaryLookup&lt;Integer, String&gt; dictionaryLookup = new DictionaryLookup&lt;&gt;(map);\n</code></pre> <pre><code>{\n\"class\" : \"DictionaryLookup\",\n\"dictionary\" : {\n\"1\" : \"one\",\n\"2\" : \"two\",\n\"3\" : \"three\"\n}\n}\n</code></pre> <pre><code>g.DictionaryLookup( \ndictionary={'1': 'one', '2': 'two', '3': 'three'} \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 1 java.lang.String one null null java.lang.Integer 4 null java.lang.Long 2 null"},{"location":"reference/functions-guide/koryphe-functions/#divide","title":"Divide","text":"<p>Divides the input integers, the resulting object is a Tuple2 containing the quotient and remainder. [x, y] -&gt; [x/y, remainder]. Javadoc</p> <p>Input type: <code>java.lang.Integer, java.lang.Integer</code></p> Example Divide JavaJSONPython <pre><code>final Divide function = new Divide();\n</code></pre> <pre><code>{\n\"class\" : \"Divide\"\n}\n</code></pre> <pre><code>g.Divide()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.Integer, java.lang.Integer] [6, 2] [java.lang.Integer, java.lang.Integer] [3, 0] [java.lang.Integer, java.lang.Integer] [6, 4] [java.lang.Integer, java.lang.Integer] [1, 2] [java.lang.Integer, java.lang.Integer] [6, 8] [java.lang.Integer, java.lang.Integer] [0, 6] [ ,java.lang.Integer] [null, 2] null [java.lang.Integer, ] [6, null] [java.lang.Integer, java.lang.Integer] [6, 0] [java.lang.Double, java.lang.Double] [6.1, 2.1] IllegalArgumentException: Input tuple values do not match the required function input types"},{"location":"reference/functions-guide/koryphe-functions/#divideby","title":"DivideBy","text":"<p>Divide the input integer by the provided integer, the resulting object is a Tuple2 containing the quotient and remainder. x -&gt; [x/divideBy, remainder]. Javadoc</p> <p>Input type: <code>java.lang.Integer</code></p> Example DivideBy JavaJSONPython <pre><code>final DivideBy function = new DivideBy(2);\n</code></pre> <pre><code>{\n\"class\" : \"DivideBy\",\n\"by\" : 2\n}\n</code></pre> <pre><code>g.DivideBy( \nby=2 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 6 [java.lang.Integer, java.lang.Integer] [3, 0] java.lang.Integer 5 [java.lang.Integer, java.lang.Integer] [2, 1] null null java.lang.Double 6.1 ClassCastException: java.lang.Double cannot be cast to java.lang.Integer"},{"location":"reference/functions-guide/koryphe-functions/#extractkeys","title":"ExtractKeys","text":"<p>An ExtractKeys will return the Set of keys from the provided Java Map. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example ExtractKeys JavaJSONPython <pre><code>final ExtractKeys&lt;String, Integer&gt; function = new ExtractKeys&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"ExtractKeys\"\n}\n</code></pre> <pre><code>g.ExtractKeys()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {firstKey=2, thirdKey=9, secondKey=4} java.util.HashMap$KeySet [firstKey, thirdKey, secondKey]"},{"location":"reference/functions-guide/koryphe-functions/#extractvalue","title":"ExtractValue","text":"<p>An ExtractValue will return the value associated with the pre-configured key, from a supplied Java Map. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example ExtractValue JavaJSONPython <pre><code>final ExtractValue&lt;String, Integer&gt; function = new ExtractValue&lt;&gt;(\"blueKey\");\n</code></pre> <pre><code>{\n\"class\" : \"ExtractValue\",\n\"key\" : \"blueKey\"\n}\n</code></pre> <pre><code>g.ExtractValue( \nkey=\"blueKey\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {yellowKey=4, greenKey=9, redKey=5, blueKey=25} java.lang.Integer 25"},{"location":"reference/functions-guide/koryphe-functions/#extractvalues","title":"ExtractValues","text":"<p>An ExtractValues will return a Collection of the values from a provided Java Map. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example ExtractValues JavaJSONPython <pre><code>final ExtractValues&lt;String, Integer&gt; function = new ExtractValues&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"ExtractValues\"\n}\n</code></pre> <pre><code>g.ExtractValues()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {theKey=1, theWholeKey=2, nothingButTheKey=3} java.util.HashMap$Values [1, 2, 3]"},{"location":"reference/functions-guide/koryphe-functions/#firstitem","title":"FirstItem","text":"<p>For a given Iterable, a FirstItem will extract the first item. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example FirstItem JavaJSONPython <pre><code>final FirstItem&lt;Integer&gt; function = new FirstItem&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"FirstItem\"\n}\n</code></pre> <pre><code>g.FirstItem()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [2, 3, 5] java.lang.Integer 2 java.util.ArrayList [7, 11, 13] java.lang.Integer 7 java.util.ArrayList [17, 19, null] java.lang.Integer 17 java.util.ArrayList [null, 19, 27] null null IllegalArgumentException: Input cannot be null"},{"location":"reference/functions-guide/koryphe-functions/#firstvalid","title":"FirstValid","text":"<p>Provides the first valid item from an iterable based on a predicate. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example FirstValid with a predicate JavaJSONPython <pre><code>final FirstValid function = new FirstValid(new StringContains(\"my\"));\n</code></pre> <pre><code>{\n\"class\" : \"FirstValid\",\n\"predicate\" : {\n\"class\" : \"StringContains\",\n\"value\" : \"my\",\n\"ignoreCase\" : false\n}\n}\n</code></pre> <pre><code>g.FirstValid( \npredicate=g.StringContains( \nvalue=\"my\", \nignore_case=False \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3] ClassCastException: java.lang.Integer cannot be cast to java.lang.String java.util.ArrayList [Hello, my, value] java.lang.String my java.util.ArrayList [MY, tummy, my, My] java.lang.String tummy null null Example FirstValid without a predicate <p>FirstValid always returns null if no predicate is specified</p> JavaJSONPython <pre><code>final FirstValid function = new FirstValid(null);\n</code></pre> <pre><code>{\n\"class\" : \"FirstValid\"\n}\n</code></pre> <pre><code>g.FirstValid()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [a, b, c] null java.util.ArrayList [1, 2, 3] null java.util.ArrayList [] null"},{"location":"reference/functions-guide/koryphe-functions/#functionchain","title":"FunctionChain","text":"<p>Applies the given functions consecutively. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example FunctionChain using tuple adapted functions JavaJSONPython <pre><code>final FunctionChain function = new FunctionChain.Builder&lt;&gt;()\n.execute(new Integer[]{0}, new ToUpperCase(), new Integer[]{1})\n.execute(new Integer[]{1}, new ToSet(), new Integer[]{2})\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"FunctionChain\",\n\"functions\" : [ {\n\"class\" : \"TupleAdaptedFunction\",\n\"selection\" : [ 0 ],\n\"function\" : {\n\"class\" : \"ToUpperCase\"\n},\n\"projection\" : [ 1 ]\n}, {\n\"class\" : \"TupleAdaptedFunction\",\n\"selection\" : [ 1 ],\n\"function\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.ToSet\"\n},\n\"projection\" : [ 2 ]\n} ]\n}\n</code></pre> <pre><code>g.FunctionChain( \nfunctions=[ \ng.TupleAdaptedFunction( \nselection=[ \n0 \n], \nfunction=g.ToUpperCase(), \nprojection=[ \n1 \n] \n), \ng.TupleAdaptedFunction( \nselection=[ \n1 \n], \nfunction=g.ToSet(), \nprojection=[ \n2 \n] \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.String,  ,] [someString, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [someString, SOMESTRING, [SOMESTRING]] [java.lang.String,  ,] [SOMESTRING, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [SOMESTRING, SOMESTRING, [SOMESTRING]] [java.lang.String,  ,] [somestring, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [somestring, SOMESTRING, [SOMESTRING]] [java.lang.String,  ,] [@\u00a3$%, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [@\u00a3$%, @\u00a3$%, [@\u00a3$%]] [java.lang.String,  ,] [1234, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [1234, 1234, [1234]] [java.lang.String,  ,] [, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [, , []] [ , ,] [null, null, null] [ , ,java.util.HashSet] [null, null, [null]] [java.lang.Integer,  ,] [1234, null, null] [java.lang.Integer, java.lang.String, java.util.HashSet] [1234, 1234, [1234]] Example FunctionChain using standard functions JavaJSONPython <pre><code>final FunctionChain function = new FunctionChain.Builder&lt;&gt;()\n.execute(new ToLowerCase())\n.execute(new ToTypeSubTypeValue())\n.execute(new ToEntityId())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"FunctionChain\",\n\"functions\" : [ {\n\"class\" : \"ToLowerCase\"\n}, {\n\"class\" : \"ToTypeSubTypeValue\"\n}, {\n\"class\" : \"ToEntityId\"\n} ]\n}\n</code></pre> <pre><code>g.FunctionChain( \nfunctions=[ \ng.ToLowerCase(), \ng.ToTypeSubTypeValue(), \ng.ToEntityId() \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String a string uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=TypeSubTypeValue[value=a string]] java.lang.String UPPER uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=TypeSubTypeValue[value=upper]] null uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=TypeSubTypeValue[]] java.lang.Integer 12 uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=TypeSubTypeValue[value=12]]"},{"location":"reference/functions-guide/koryphe-functions/#functionmap","title":"FunctionMap","text":"<p>Applies a function to all values in a map. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example using FunctionMap to multiply all map values by 10 JavaJSONPython <pre><code>final FunctionMap&lt;String, Integer, Integer&gt; function = new FunctionMap&lt;&gt;(new MultiplyBy(10));\n</code></pre> <pre><code>{\n\"class\" : \"FunctionMap\",\n\"function\" : {\n\"class\" : \"MultiplyBy\",\n\"by\" : 10\n}\n}\n</code></pre> <pre><code>g.FunctionMap( \nfunction=g.MultiplyBy( \nby=10 \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {key1=1, key2=2, key3=3} java.util.HashMap {key1=10, key2=20, key3=30} java.util.HashMap {key1=null, key2=2, key3=3} java.util.HashMap {key1=null, key2=20, key3=30} null null"},{"location":"reference/functions-guide/koryphe-functions/#gunzip","title":"Gunzip","text":"<p>Decompresses gzipped data. Javadoc</p> <p>Input type: <code>byte[]</code></p> Example Gunzip JavaJSONPython <pre><code>final Gunzip gunzip = new Gunzip();\n</code></pre> <pre><code>{\n\"class\" : \"Gunzip\"\n}\n</code></pre> <pre><code>g.Gunzip()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result byte[] \u001f\ufffd\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000+I-.Q(.)\ufffd\ufffdK\u0007\u0000E\u0015G\u0013\u000b\u0000\u0000\u0000 byte[] test string"},{"location":"reference/functions-guide/koryphe-functions/#identity","title":"Identity","text":"<p>Just returns the input. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example Identity JavaJSONPython <pre><code>final Identity function = new Identity();\n</code></pre> <pre><code>{\n\"class\" : \"Identity\"\n}\n</code></pre> <pre><code>g.Identity()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 6 java.lang.Integer 6 java.lang.Double 6.1 java.lang.Double 6.1 java.lang.String input1 java.lang.String input1 java.util.ArrayList [1, 2, 3] java.util.ArrayList [1, 2, 3] null null"},{"location":"reference/functions-guide/koryphe-functions/#if","title":"If","text":"<p>Conditionally applies a function. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example If <p>This example tests first whether the input contains 'upper'. If so, then it is converted to upper case. Otherwise, it is converted to lower case.</p> JavaJSONPython <pre><code>final If&lt;String, String&gt; predicate = new If&lt;String, String&gt;()\n.predicate(new StringContains(\"upper\"))\n.then(new ToUpperCase())\n.otherwise(new ToLowerCase());\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.If\",\n\"predicate\" : {\n\"class\" : \"StringContains\",\n\"value\" : \"upper\",\n\"ignoreCase\" : false\n},\n\"then\" : {\n\"class\" : \"ToUpperCase\"\n},\n\"otherwise\" : {\n\"class\" : \"ToLowerCase\"\n}\n}\n</code></pre> <pre><code>g.If( \npredicate=g.StringContains( \nvalue=\"upper\", \nignore_case=False \n), \nthen=g.ToUpperCase(), \notherwise=g.ToLowerCase() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result null null java.lang.String Convert me to upper case java.lang.String CONVERT ME TO UPPER CASE java.lang.String Convert me to lower case java.lang.String convert me to lower case java.lang.String java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#increment","title":"Increment","text":"<p>Adds a given number to the input, returned value type will match the input type. Javadoc</p> <p>Input type: <code>java.lang.Number</code></p> Example Increment with Int JavaJSONPython <pre><code>final Increment increment = new Increment(3);\n</code></pre> <pre><code>{\n\"class\" : \"Increment\",\n\"increment\" : 3\n}\n</code></pre> <pre><code>g.Increment( \nincrement=3 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 2 java.lang.Integer 5 java.lang.Double 2.0 java.lang.Integer 5 java.lang.Float 2.0 java.lang.Integer 5 java.lang.Long 2 java.lang.Integer 5 Example Increment with Double JavaJSONPython <pre><code>final Increment increment = new Increment(3.0);\n</code></pre> <pre><code>{\n\"class\" : \"Increment\",\n\"increment\" : 3.0\n}\n</code></pre> <pre><code>g.Increment( \nincrement=3.0 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 2 java.lang.Double 5.0 java.lang.Double 2.0 java.lang.Double 5.0 java.lang.Float 2.0 java.lang.Double 5.0 java.lang.Long 2 java.lang.Double 5.0 java.lang.String 33 ClassCastException: java.lang.String cannot be cast to java.lang.Number java.lang.String three ClassCastException: java.lang.String cannot be cast to java.lang.Number null java.lang.Double 3.0 Example Increment with Float JavaJSONPython <pre><code>final Increment increment = new Increment(3.0f);\n</code></pre> <pre><code>{\n\"class\" : \"Increment\",\n\"increment\" : {\n\"Float\" : 3.0\n}\n}\n</code></pre> <pre><code>g.Increment( \nincrement={'java.lang.Float': 3.0} \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 2 java.lang.Float 5.0 java.lang.Double 2.0 java.lang.Float 5.0 java.lang.Float 2.0 java.lang.Float 5.0 java.lang.Long 2 java.lang.Float 5.0 java.lang.String 33 ClassCastException: java.lang.String cannot be cast to java.lang.Number java.lang.String three ClassCastException: java.lang.String cannot be cast to java.lang.Number null java.lang.Float 3.0"},{"location":"reference/functions-guide/koryphe-functions/#iterableconcat","title":"IterableConcat","text":"<p>For a given Iterable of Iterables, an IterableConcat will essentially perform a FlatMap on the input, by concatenating each of the nested iterables into a single flattened iterable. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example IterableConcat JavaJSONPython <pre><code>final IterableConcat&lt;Integer&gt; function = new IterableConcat&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"IterableConcat\"\n}\n</code></pre> <pre><code>g.IterableConcat()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [[2, 3, 5], [7, 11, 13], [17, 19, 23]] uk.gov.gchq.koryphe.util.IterableUtil$ChainedIterable [2, 3, 5, 7, 11, 13, 17, 19, 23] java.util.ArrayList [[29, 31, 37]] uk.gov.gchq.koryphe.util.IterableUtil$ChainedIterable [29, 31, 37] java.util.ArrayList [[2, 3, 5], [7, 11, 13], null] NullPointerException: null null IllegalArgumentException: iterables are required"},{"location":"reference/functions-guide/koryphe-functions/#iterablefilter","title":"IterableFilter","text":"<p>An IterableFilter applies a given predicate to each element in an Iterable and returns the filtered iterable. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example IterableFilter with IsMoreThan JavaJSONPython <pre><code>final IterableFilter&lt;Integer&gt; function = new IterableFilter&lt;&gt;(new IsMoreThan(5));\n</code></pre> <pre><code>{\n\"class\" : \"IterableFilter\",\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 5\n}\n}\n</code></pre> <pre><code>g.IterableFilter( \npredicate=g.IsMoreThan( \nvalue=5, \nor_equal_to=False \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3] uk.gov.gchq.koryphe.util.IterableUtil$FilteredIterable [] java.util.ArrayList [5, 10, 15] uk.gov.gchq.koryphe.util.IterableUtil$FilteredIterable [10, 15] java.util.ArrayList [7, 9, 11] uk.gov.gchq.koryphe.util.IterableUtil$FilteredIterable [7, 9, 11] java.util.ArrayList [1, null, 3] uk.gov.gchq.koryphe.util.IterableUtil$FilteredIterable [] null null"},{"location":"reference/functions-guide/koryphe-functions/#iterableflatten","title":"IterableFlatten","text":"<p>Combines the items in an iterable into a single item based on the supplied operator. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example IterableFlatten without Binary Operator JavaJSONPython <pre><code>final IterableFlatten function = new IterableFlatten(null);\n</code></pre> <pre><code>{\n\"class\" : \"IterableFlatten\"\n}\n</code></pre> <pre><code>g.IterableFlatten()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [a, b, c] null Example IterableFlatten with Binary Operator JavaJSONPython <pre><code>final IterableFlatten function = new IterableFlatten&lt;&gt;(new Max());\n</code></pre> <pre><code>{\n\"class\" : \"IterableFlatten\",\n\"operator\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n}\n}\n</code></pre> <pre><code>g.IterableFlatten( \noperator=g.Max() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3, 1] java.lang.Integer 3 java.util.ArrayList [1, null, 6] java.lang.Integer 6 java.util.ArrayList [] null null null"},{"location":"reference/functions-guide/koryphe-functions/#iterablefunction","title":"IterableFunction","text":"<p>An IterableFunction is useful for applying a provided function, or functions, to each entry of a supplied Iterable. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example IterableFunction with a single function JavaJSONPython <pre><code>final IterableFunction&lt;Integer, Integer&gt; function = new IterableFunction&lt;&gt;(new MultiplyBy(2));\n</code></pre> <pre><code>{\n\"class\" : \"IterableFunction\",\n\"functions\" : [ {\n\"class\" : \"MultiplyBy\",\n\"by\" : 2\n} ]\n}\n</code></pre> <pre><code>g.IterableFunction( \nfunctions=[ \ng.MultiplyBy( \nby=2 \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [2, 4, 6] java.util.ArrayList [5, 10, 15] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [10, 20, 30] java.util.ArrayList [7, 9, 11] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [14, 18, 22] java.util.ArrayList [1, null, 3] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [2, null, 6] null null Example IterableFunction with multiple functions <p>Here we build a chain of functions using the IterableFunction's Builder, whereby the output of one function is the input to the next.</p> JavaJSONPython <pre><code>final IterableFunction&lt;Integer, Integer&gt; function = new IterableFunction.Builder&lt;Integer&gt;()\n.first(new MultiplyBy(2))\n.then(new MultiplyBy(4))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"IterableFunction\",\n\"functions\" : [ {\n\"class\" : \"MultiplyBy\",\n\"by\" : 2\n}, {\n\"class\" : \"MultiplyBy\",\n\"by\" : 4\n} ]\n}\n</code></pre> <pre><code>g.IterableFunction( \nfunctions=[ \ng.MultiplyBy( \nby=2 \n), \ng.MultiplyBy( \nby=4 \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [2, 4, 10] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [16, 32, 80] java.util.ArrayList [3, 9, 11] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [24, 72, 88] java.util.ArrayList [1, null, 3] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [8, null, 24] null null"},{"location":"reference/functions-guide/koryphe-functions/#iterablelongest","title":"IterableLongest","text":"<p>Returns the longest item in the provided iterable. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example IterableLongest JavaJSONPython <pre><code>final IterableLongest function = new IterableLongest();\n</code></pre> <pre><code>{\n\"class\" : \"IterableLongest\"\n}\n</code></pre> <pre><code>g.IterableLongest()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [[1, 2], [1.5]] java.util.ArrayList [1, 2] java.util.ArrayList [which, is, the, longest, word] java.lang.String longest java.util.ArrayList [] null null null"},{"location":"reference/functions-guide/koryphe-functions/#lastitem","title":"LastItem","text":"<p>For a given Iterable, a LastItem will extract the last item. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example LastItem JavaJSONPython <pre><code>final LastItem&lt;Integer&gt; function = new LastItem&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"LastItem\"\n}\n</code></pre> <pre><code>g.LastItem()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3] java.lang.Integer 3 java.util.ArrayList [5, 8, 13] java.lang.Integer 13 java.util.ArrayList [21, 34, 55] java.lang.Integer 55 java.util.ArrayList [1, null, 3] java.lang.Integer 3 java.util.ArrayList [1, 2, null] null null IllegalArgumentException: Input cannot be null"},{"location":"reference/functions-guide/koryphe-functions/#length","title":"Length","text":"<p>Attempts to return the length of an object. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example Length JavaJSONPython <pre><code>final Length function = new Length();\n</code></pre> <pre><code>{\n\"class\" : \"Length\"\n}\n</code></pre> <pre><code>g.Length()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [Entity[vertex=1,group=entity,properties=Properties[]], Entity[vertex=2,group=entity,properties=Properties[]], Entity[vertex=3,group=entity,properties=Properties[]], Entity[vertex=4,group=entity,properties=Properties[]], Entity[vertex=5,group=entity,properties=Properties[]]] java.lang.Integer 5 java.util.HashMap {option3=value3, option1=value1, option2=value2} java.lang.Integer 3 uk.gov.gchq.gaffer.data.graph.Walk [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=A,destination=E,directed=true,group=BasicEdge,properties=Properties[]]]] java.lang.Integer 4 java.lang.Integer 5 IllegalArgumentException: Could not determine the size of the provided value java.lang.String some string java.lang.Integer 11 java.lang.String[] [1, 2] java.lang.Integer 2 null java.lang.Integer 0"},{"location":"reference/functions-guide/koryphe-functions/#longest","title":"Longest","text":"<p>Determines which of two input objects is the longest. Javadoc</p> <p>Input type: <code>java.lang.Object, java.lang.Object</code></p> Example Longest JavaJSONPython <pre><code>final Longest function = new Longest();\n</code></pre> <pre><code>{\n\"class\" : \"Longest\"\n}\n</code></pre> <pre><code>g.Longest()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.String, java.lang.String] [smaller, long string] java.lang.String long string [java.util.ArrayList, java.util.HashSet] [[1, 2], [1.5]] java.util.ArrayList [1, 2] [ ,java.lang.String] [null, value] java.lang.String value null IllegalArgumentException: Input tuple is required"},{"location":"reference/functions-guide/koryphe-functions/#mapfilter","title":"MapFilter","text":"<p>A Function which applies the given predicates to the keys and/or values. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example MapFilter on keys <p>MapFilter with key predicate.</p> JavaJSONPython <pre><code>final MapFilter keyFilter = new MapFilter().keyPredicate(\nnew StringContains(\"a\")\n);\n</code></pre> <pre><code>{\n\"class\" : \"MapFilter\",\n\"keyPredicate\" : {\n\"class\" : \"StringContains\",\n\"value\" : \"a\",\n\"ignoreCase\" : false\n}\n}\n</code></pre> <pre><code>g.MapFilter(\nkey_predicate=g.StringContains( \nvalue=\"a\", \nignore_case=False \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {giraffe=0, cat=3, dog=2} java.util.HashMap {giraffe=0, cat=3} Example MapFilter on values <p>MapFilter with value predicate.</p> JavaJSONPython <pre><code>final MapFilter valueFilter = new MapFilter().valuePredicate(\nnew IsMoreThan(10)\n);\n</code></pre> <pre><code>{\n\"class\" : \"MapFilter\",\n\"valuePredicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 10\n}\n}\n</code></pre> <pre><code>g.MapFilter( \nvalue_predicate=g.IsMoreThan( \nvalue=10, \nor_equal_to=False \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {Pizza=30, Casserole=4, Steak=12} java.util.HashMap {Pizza=30, Steak=12} Example MapFilter on keys and values <p>MapFilter with key-value Predicate.</p> JavaJSONPython <pre><code>final MapFilter keyValueFilter = new MapFilter()\n.keyValuePredicate(new AreEqual());\n</code></pre> <pre><code>{\n\"class\" : \"MapFilter\",\n\"keyValuePredicate\" : {\n\"class\" : \"AreEqual\"\n}\n}\n</code></pre> <pre><code>g.MapFilter( \nkey_value_predicate=g.AreEqual() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {1=2, 3=3, 6=4} java.util.HashMap {3=3}"},{"location":"reference/functions-guide/koryphe-functions/#maptotuple","title":"MapToTuple","text":"<p>Converts a Map to a Tuple. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example MapToTuple JavaJSONPython <pre><code>final MapToTuple&lt;String&gt; function = new MapToTuple&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"MapToTuple\"\n}\n</code></pre> <pre><code>g.MapToTuple()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {A=1, B=2, C=3} uk.gov.gchq.koryphe.tuple.MapTuple [1, 2, 3] uk.gov.gchq.gaffer.types.FreqMap {value2=1, value1=2} uk.gov.gchq.koryphe.tuple.MapTuple [1, 2]"},{"location":"reference/functions-guide/koryphe-functions/#multiply","title":"Multiply","text":"<p>The input integers are multiplied together. Javadoc</p> <p>Input type: <code>java.lang.Integer, java.lang.Integer</code></p> Example Multiply JavaJSONPython <pre><code>final Multiply function = new Multiply();\n</code></pre> <pre><code>{\n\"class\" : \"Multiply\"\n}\n</code></pre> <pre><code>g.Multiply()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.Integer, java.lang.Integer] [2, 3] java.lang.Integer 6 [ ,java.lang.Integer] [null, 3] null [java.lang.Integer, ] [2, null] java.lang.Integer 2 [java.lang.Double, java.lang.Double] [2.1, 3.1] IllegalArgumentException: Input tuple values do not match the required function input types"},{"location":"reference/functions-guide/koryphe-functions/#multiplyby","title":"MultiplyBy","text":"<p>Multiply the input integer by the provided number. Javadoc</p> <p>Input type: <code>java.lang.Integer</code></p> Example MultiplyBy JavaJSONPython <pre><code>final MultiplyBy function = new MultiplyBy(2);\n</code></pre> <pre><code>{\n\"class\" : \"MultiplyBy\",\n\"by\" : 2\n}\n</code></pre> <pre><code>g.MultiplyBy( \nby=2 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 6 java.lang.Integer 12 java.lang.Integer 5 java.lang.Integer 10 null null java.lang.Double 6.1 ClassCastException: java.lang.Double cannot be cast to java.lang.Integer"},{"location":"reference/functions-guide/koryphe-functions/#multiplylongby","title":"MultiplyLongBy","text":"<p>Multiply the input Long by the provided number. Javadoc</p> <p>Input type: <code>java.lang.Long</code></p> Example MultiplyLongBy JavaJSONPython <pre><code>final MultiplyLongBy function = new MultiplyLongBy(2L);\n</code></pre> <pre><code>{\n\"class\" : \"MultiplyLongBy\",\n\"by\" : 2\n}\n</code></pre> <pre><code>g.MultiplyLongBy( \nby=2 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Long 6 java.lang.Long 12 java.lang.Long 5 java.lang.Long 10 null null java.lang.Double 6.1 ClassCastException: java.lang.Double cannot be cast to java.lang.Long"},{"location":"reference/functions-guide/koryphe-functions/#nthitem","title":"NthItem","text":"<p>For a given Iterable, an NthItem will extract the item at the Nth index, where n is a user-provided selection. (Consider that this is array-backed, so a selection of \"1\" will extract the item at index 1, ie the 2nd item). Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example NthItem JavaJSONPython <pre><code>final NthItem&lt;Integer&gt; function = new NthItem&lt;&gt;(2);\n</code></pre> <pre><code>{\n\"class\" : \"NthItem\",\n\"selection\" : 2\n}\n</code></pre> <pre><code>g.NthItem( \nselection=2 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [3, 1, 4] java.lang.Integer 4 java.util.ArrayList [1, 5, 9] java.lang.Integer 9 java.util.ArrayList [2, 6, 5] java.lang.Integer 5 java.util.ArrayList [2, null, 5] java.lang.Integer 5 java.util.ArrayList [2, 6, null] null null IllegalArgumentException: Input cannot be null"},{"location":"reference/functions-guide/koryphe-functions/#parsedate","title":"ParseDate","text":"<p>Parses a date string. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example ParseDate with GMT+4 JavaJSONPython <pre><code>final ParseDate parseDate = new ParseDate();\nparseDate.setFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\nparseDate.setTimeZone(\"Etc/GMT+4\");\n</code></pre> <pre><code>{\n\"class\" : \"ParseDate\",\n\"format\" : \"yyyy-MM-dd HH:mm:ss.SSS\",\n\"timeZone\" : \"Etc/GMT+4\",\n\"microseconds\" : false\n}\n</code></pre> <pre><code>g.ParseDate( \ntime_zone=\"Etc/GMT+4\", \nformat=\"yyyy-MM-dd HH:mm:ss.SSS\", \nmicroseconds=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String 2015-10-21 16:29:00.000 java.util.Date Wed Oct 21 21:29:00 BST 2015 java.lang.String 1985-10-26 09:00:00.000 java.util.Date Sat Oct 26 14:00:00 BST 1985 java.lang.String 1885-01-01 12:00:00.000 java.util.Date Thu Jan 01 16:00:00 GMT 1885 Example ParseDate with GMT+0 JavaJSONPython <pre><code>final ParseDate parseDate = new ParseDate();\nparseDate.setFormat(\"yyyy-MM-dd HH:mm\");\nparseDate.setTimeZone(\"Etc/GMT+0\");\n</code></pre> <pre><code>{\n\"class\" : \"ParseDate\",\n\"format\" : \"yyyy-MM-dd HH:mm\",\n\"timeZone\" : \"Etc/GMT+0\",\n\"microseconds\" : false\n}\n</code></pre> <pre><code>g.ParseDate( \ntime_zone=\"Etc/GMT+0\", \nformat=\"yyyy-MM-dd HH:mm\", \nmicroseconds=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String 2015-10-21 16:29 java.util.Date Wed Oct 21 17:29:00 BST 2015 java.lang.String 1985-10-26 09:00 java.util.Date Sat Oct 26 10:00:00 BST 1985 java.lang.String 1885-01-01 12:00 java.util.Date Thu Jan 01 12:00:00 GMT 1885"},{"location":"reference/functions-guide/koryphe-functions/#parsetime","title":"ParseTime","text":"<p>Parses a date string into a timestamp. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example ParseTime JavaJSONPython <pre><code>final ParseTime parseTime = new ParseTime();\n</code></pre> <pre><code>{\n\"class\" : \"ParseTime\",\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.ParseTime( \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String 2015-10-21 16:29:00.000 java.lang.Long 1445441340000 java.lang.String 1985-10-26 09:00:00.000 java.lang.Long 499161600000 java.lang.String 1885-01-01 12:00:00.000 java.lang.Long -2682244800000 Example ParseTime with format JavaJSONPython <pre><code>final ParseTime parseTime = new ParseTime().format(\"yyyy-MM hh:mm\");\n</code></pre> <pre><code>{\n\"class\" : \"ParseTime\",\n\"format\" : \"yyyy-MM hh:mm\",\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.ParseTime( \nformat=\"yyyy-MM hh:mm\", \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String 2015-10 16:29 java.lang.Long 1443713340000 java.lang.String 1985-10 09:00 java.lang.Long 497001600000 java.lang.String 1885-01 12:00 java.lang.Long -2682288000000 java.lang.String 2015-10-21 16:29 IllegalArgumentException: Date string could not be parsed: 2015-10-21 16:29 Example ParseTime with format and GMT JavaJSONPython <pre><code>final ParseTime parseTime = new ParseTime()\n.format(\"yyyy-MM-dd\")\n.timeUnit(\"SECOND\")\n.timeZone(\"GMT\");\n</code></pre> <pre><code>{\n\"class\" : \"ParseTime\",\n\"format\" : \"yyyy-MM-dd\",\n\"timeZone\" : \"GMT\",\n\"timeUnit\" : \"SECOND\"\n}\n</code></pre> <pre><code>g.ParseTime( \ntime_zone=\"GMT\", \nformat=\"yyyy-MM-dd\", \ntime_unit=\"SECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String 2015-10-21 16:29:00.000 java.lang.Long 1445385600 java.lang.String 1985-10-26 09:00:00.000 java.lang.Long 499132800 java.lang.String 1885-01-01 12:00:00.000 java.lang.Long -2682288000"},{"location":"reference/functions-guide/koryphe-functions/#reversestring","title":"ReverseString","text":"<p>Reverse characters in string. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example ReverseString JavaJSONPython <pre><code>final ReverseString function = new ReverseString();\n</code></pre> <pre><code>{\n\"class\" : \"ReverseString\"\n}\n</code></pre> <pre><code>g.ReverseString()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String reverse java.lang.String esrever java.lang.String esrever java.lang.String reverse null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#setvalue","title":"SetValue","text":"<p>Returns a set value from any input. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example SetValue JavaJSONPython <pre><code>final SetValue function = new SetValue(5);\n</code></pre> <pre><code>{\n\"class\" : \"SetValue\",\n\"value\" : 5\n}\n</code></pre> <pre><code>g.SetValue(\nvalue=5 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 java.lang.Integer 5 java.lang.Integer 5 java.lang.Integer 5 java.lang.String aString java.lang.Integer 5 java.util.Arrays$ArrayList [4, 5] java.lang.Integer 5 null java.lang.Integer 5"},{"location":"reference/functions-guide/koryphe-functions/#stringappend","title":"StringAppend","text":"<p>Appends a provided suffix to a string. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringAppend JavaJSONPython <pre><code>final StringAppend function = new StringAppend(\"mySuffix\");\n</code></pre> <pre><code>{\n\"class\" : \"StringAppend\",\n\"suffix\" : \"mySuffix\"\n}\n</code></pre> <pre><code>g.StringAppend( \nsuffix=\"mySuffix\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String a string of some kind java.lang.String a string of some kindmySuffix java.lang.String java.lang.String mySuffix null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#stringjoin","title":"StringJoin","text":"<p>Joins together all strings in an iterable using the supplied delimiter. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example StringJoin without a delimiter JavaJSONPython <pre><code>final StringJoin function = new StringJoin();\n</code></pre> <pre><code>{\n\"class\" : \"StringJoin\"\n}\n</code></pre> <pre><code>g.StringJoin()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [here, are, my, strings] java.lang.String herearemystrings java.util.ArrayList [single] java.lang.String single java.util.ArrayList [] java.lang.String null null Example StringJoin with a delimiter JavaJSONPython <pre><code>final StringJoin function = new StringJoin(\"-\");\n</code></pre> <pre><code>{\n\"class\" : \"StringJoin\",\n\"delimiter\" : \"-\"\n}\n</code></pre> <pre><code>g.StringJoin( \ndelimiter=\"-\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [here, are, my, strings] java.lang.String here-are-my-strings java.util.ArrayList [single] java.lang.String single java.util.ArrayList [] java.lang.String null null"},{"location":"reference/functions-guide/koryphe-functions/#stringprepend","title":"StringPrepend","text":"<p>Prepends a string with the provided prefix. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringPrepend JavaJSONPython <pre><code>final StringPrepend function = new StringPrepend(\"myPrefix\");\n</code></pre> <pre><code>{\n\"class\" : \"StringPrepend\",\n\"prefix\" : \"myPrefix\"\n}\n</code></pre> <pre><code>g.StringPrepend( \nprefix=\"myPrefix\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String a string of some kind java.lang.String myPrefixa string of some kind java.lang.String java.lang.String myPrefix null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#stringregexreplace","title":"StringRegexReplace","text":"<p>Replace all portions of a string which match a regular expression. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringRegexReplace JavaJSONPython <pre><code>final StringRegexReplace function = new StringRegexReplace(\"[tT]ea\", \"cake\");\n</code></pre> <pre><code>{\n\"class\" : \"StringRegexReplace\",\n\"regex\" : \"[tT]ea\",\n\"replacement\" : \"cake\"\n}\n</code></pre> <pre><code>g.StringRegexReplace( \nregex=\"[tT]ea\", \nreplacement=\"cake\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String tea java.lang.String cake java.lang.String Tea java.lang.String cake java.lang.String TEA java.lang.String TEA java.lang.String brainteaser java.lang.String braincakeser null null java.lang.String coffee java.lang.String coffee java.lang.Long 5 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#stringregexsplit","title":"StringRegexSplit","text":"<p>Split a string using the provided regular expression. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringRegexSplit JavaJSONPython <pre><code>final StringRegexSplit function = new StringRegexSplit(\"[ \\\\t]+\");\n</code></pre> <pre><code>{\n\"class\" : \"StringRegexSplit\",\n\"regex\" : \"[ \\\\t]+\"\n}\n</code></pre> <pre><code>g.StringRegexSplit( \nregex=\"[ \\t]+\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String no-delimiters-in-this-string java.util.Arrays$ArrayList [no-delimiters-in-this-string] java.lang.String string  with  two  spaces java.util.Arrays$ArrayList [string, with, two, spaces] java.lang.String string with one space java.util.Arrays$ArrayList [string, with, one, space] java.lang.String tab  delimited   string java.util.Arrays$ArrayList [tab, delimited, string] java.lang.String java.util.Arrays$ArrayList [] null null"},{"location":"reference/functions-guide/koryphe-functions/#stringreplace","title":"StringReplace","text":"<p>Replace all portions of a string which match a regular expression. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringReplace JavaJSONPython <pre><code>final StringReplace function = new StringReplace(\"[tea\", \"cake\");\n</code></pre> <pre><code>{\n\"class\" : \"StringReplace\",\n\"replacement\" : \"cake\",\n\"searchString\" : \"[tea\"\n}\n</code></pre> <pre><code>g.StringReplace( \nsearch_string=\"[tea\", \nreplacement=\"cake\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String tea java.lang.String tea java.lang.String Tea java.lang.String Tea java.lang.String TEA java.lang.String TEA java.lang.String brainteaser java.lang.String brainteaser null null java.lang.String coffee java.lang.String coffee java.lang.Long 5 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#stringsplit","title":"StringSplit","text":"<p>Split a string using the provided regular expression. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringSplit JavaJSONPython <pre><code>final StringSplit function = new StringSplit(\" \");\n</code></pre> <pre><code>{\n\"class\" : \"StringSplit\",\n\"delimiter\" : \" \"\n}\n</code></pre> <pre><code>g.StringSplit( \ndelimiter=\" \" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String no-delimiters-in-this-string java.util.Arrays$ArrayList [no-delimiters-in-this-string] java.lang.String string  with  two  spaces java.util.Arrays$ArrayList [string, with, two, spaces] java.lang.String string with one space java.util.Arrays$ArrayList [string, with, one, space] java.lang.String tab  delimited   string java.util.Arrays$ArrayList [tab  delimited   string] java.lang.String java.util.Arrays$ArrayList [] null null"},{"location":"reference/functions-guide/koryphe-functions/#stringtrim","title":"StringTrim","text":"<p>Trims all whitespace around a string. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringTrim JavaJSONPython <pre><code>final StringTrim function = new StringTrim();\n</code></pre> <pre><code>{\n\"class\" : \"StringTrim\"\n}\n</code></pre> <pre><code>g.StringTrim()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String trailing spaces java.lang.String trailing spaces java.lang.String leading spaces java.lang.String leading spaces java.lang.String noSpaces java.lang.String noSpaces null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#stringtruncate","title":"StringTruncate","text":"<p>Truncates a string, with optional ellipses. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringTruncate without ellipses JavaJSONPython <pre><code>final StringTruncate function = new StringTruncate(5, false);\n</code></pre> <pre><code>{\n\"class\" : \"StringTruncate\",\n\"length\" : 5,\n\"ellipses\" : false\n}\n</code></pre> <pre><code>g.StringTruncate(\nlength=5, \nellipses=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String no more than five java.lang.String no mo java.lang.String four java.lang.String four java.lang.String java.lang.String null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String Example StringTruncate with ellipses JavaJSONPython <pre><code>final StringTruncate function = new StringTruncate(5, true);\n</code></pre> <pre><code>{\n\"class\" : \"StringTruncate\",\n\"length\" : 5,\n\"ellipses\" : true\n}\n</code></pre> <pre><code>g.StringTruncate(\nlength=5, \nellipses=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String no more than five java.lang.String no mo... java.lang.String four java.lang.String four java.lang.String java.lang.String null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#toarray","title":"ToArray","text":"<p>Converts an Object to an Array. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToArray JavaJSONPython <pre><code>final ToArray function = new ToArray();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.ToArray\"\n}\n</code></pre> <pre><code>g.ToArray()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String test java.lang.Object[] [test] null java.lang.Object[] [null] java.lang.Long 30 java.lang.Object[] [30] uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[type=t,subType=st,value=v] java.lang.Object[] [TypeSubTypeValue[type=t,subType=st,value=v]] java.util.Arrays$ArrayList [a, b, c] java.lang.Object[] [a, b, c] java.util.HashSet [1, 2] java.lang.Object[] [1, 2]"},{"location":"reference/functions-guide/koryphe-functions/#tobytes","title":"ToBytes","text":"<p>Extracts the bytes from a string. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example ToBytes JavaJSONPython <pre><code>final ToBytes toBytes = new ToBytes(StandardCharsets.UTF_16);\n</code></pre> <pre><code>{\n\"class\" : \"ToBytes\",\n\"charset\" : \"UTF-16\"\n}\n</code></pre> <pre><code>g.ToBytes( \ncharset=\"UTF-16\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String example String byte[] \ufffd\ufffd\u0000e\u0000x\u0000a\u0000m\u0000p\u0000l\u0000e\u0000 \u0000S\u0000t\u0000r\u0000i\u0000n\u0000g java.lang.String byte[] null null java.lang.Integer 1 ClassCastException: java.lang.Integer cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#todatestring","title":"ToDateString","text":"<p>Converts a date to a String. Javadoc</p> <p>Input type: <code>java.util.Date</code></p> Example ToDateString with microsecond JavaJSONPython <pre><code>final ToDateString function = new ToDateString(\"yyyy-MM-dd HH:mm:ss.SSS\");\n</code></pre> <pre><code>{\n\"class\" : \"ToDateString\",\n\"format\" : \"yyyy-MM-dd HH:mm:ss.SSS\"\n}\n</code></pre> <pre><code>g.ToDateString( \nformat=\"yyyy-MM-dd HH:mm:ss.SSS\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Date Tue Jan 06 19:39:25 GMT 1970 java.lang.String 1970-01-06 19:39:25.200 java.util.Date Thu Jan 01 01:00:00 GMT 1970 java.lang.String 1970-01-01 01:00:00.000 java.lang.Long 1667818823612 ClassCastException: java.lang.Long cannot be cast to java.util.Date java.util.Date Fri Dec 26 06:20:34 GMT 1969 java.lang.String 1969-12-26 06:20:34.800 Example ToDateString with minute JavaJSONPython <pre><code>final ToDateString function = new ToDateString(\"yy-MM-dd HH:mm\");\n</code></pre> <pre><code>{\n\"class\" : \"ToDateString\",\n\"format\" : \"yy-MM-dd HH:mm\"\n}\n</code></pre> <pre><code>g.ToDateString( \nformat=\"yy-MM-dd HH:mm\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Date Tue Jan 06 19:39:25 GMT 1970 java.lang.String 70-01-06 19:39 java.util.Date Thu Jan 01 01:00:00 GMT 1970 java.lang.String 70-01-01 01:00 java.lang.Long 1667818823683 ClassCastException: java.lang.Long cannot be cast to java.util.Date java.util.Date Fri Dec 26 06:20:34 GMT 1969 java.lang.String 69-12-26 06:20 null null Example ToDateString with date only JavaJSONPython <pre><code>final ToDateString function = new ToDateString(\"yy-MM-dd\");\n</code></pre> <pre><code>{\n\"class\" : \"ToDateString\",\n\"format\" : \"yy-MM-dd\"\n}\n</code></pre> <pre><code>g.ToDateString( \nformat=\"yy-MM-dd\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Date Tue Jan 06 19:39:25 GMT 1970 java.lang.String 70-01-06 java.util.Date Thu Jan 01 01:00:00 GMT 1970 java.lang.String 70-01-01 java.lang.Long 1667818823752 ClassCastException: java.lang.Long cannot be cast to java.util.Date java.util.Date Fri Dec 26 06:20:34 GMT 1969 java.lang.String 69-12-26 null null"},{"location":"reference/functions-guide/koryphe-functions/#tointeger","title":"ToInteger","text":"<p>Returns any input as Integer. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToInteger JavaJSONPython <pre><code>final ToInteger function = new ToInteger();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.ToInteger\"\n}\n</code></pre> <pre><code>g.ToInteger()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 java.lang.Integer 4 java.lang.Long 5 java.lang.Integer 5 java.lang.String 5 java.lang.Integer 5 java.lang.String aString NumberFormatException: For input string: \"aString\" java.util.Arrays$ArrayList [6, 3] IllegalArgumentException: Could not convert value to Integer: [6, 3] null null"},{"location":"reference/functions-guide/koryphe-functions/#tolist","title":"ToList","text":"<p>Converts an Object to a List. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToList JavaJSONPython <pre><code>final ToList function = new ToList();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.ToList\"\n}\n</code></pre> <pre><code>g.ToList()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String test java.util.ArrayList [test] null java.util.ArrayList [null] java.lang.Long 30 java.util.ArrayList [30] uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[type=t,subType=st,value=v] java.util.ArrayList [TypeSubTypeValue[type=t,subType=st,value=v]] java.lang.String[] [a, b, c] java.util.ArrayList [a, b, c] java.util.HashSet [1, 2] java.util.ArrayList [1, 2]"},{"location":"reference/functions-guide/koryphe-functions/#tolong","title":"ToLong","text":"<p>Returns any input as Long. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToLong JavaJSONPython <pre><code>final ToLong function = new ToLong();\n</code></pre> <pre><code>{\n\"class\" : \"ToLong\"\n}\n</code></pre> <pre><code>g.ToLong()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 java.lang.Long 4 java.lang.Long 5 java.lang.Long 5 java.lang.String 5 java.lang.Long 5 java.lang.String aString NumberFormatException: For input string: \"aString\" java.util.Arrays$ArrayList [6, 3] IllegalArgumentException: Could not convert value to Long: [6, 3] null null"},{"location":"reference/functions-guide/koryphe-functions/#tolowercase","title":"ToLowerCase","text":"<p>Performs toLowerCase on input object. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToLowerCase JavaJSONPython <pre><code>final ToLowerCase function = new ToLowerCase();\n</code></pre> <pre><code>{\n\"class\" : \"ToLowerCase\"\n}\n</code></pre> <pre><code>g.ToLowerCase()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 java.lang.String 4 java.lang.Long 5 java.lang.String 5 java.lang.String ACAPTIALISEDSTRING java.lang.String acaptialisedstring java.lang.String alowercasestring java.lang.String alowercasestring java.lang.String aString java.lang.String astring java.util.Arrays$ArrayList [6, 3] java.lang.String [6, 3] null null"},{"location":"reference/functions-guide/koryphe-functions/#tonull","title":"ToNull","text":"<p>Returns <code>null</code> on any input object. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToNull JavaJSONPython <pre><code>final ToNull function = new ToNull();\n</code></pre> <pre><code>{\n\"class\" : \"ToNull\"\n}\n</code></pre> <pre><code>g.ToNull()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 null java.lang.Long 5 null java.lang.String aString null java.util.Arrays$ArrayList [6, 3] null null null"},{"location":"reference/functions-guide/koryphe-functions/#toset","title":"ToSet","text":"<p>Converts an Object to a Set. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToSet JavaJSONPython <pre><code>final ToSet function = new ToSet();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.ToSet\"\n}\n</code></pre> <pre><code>g.ToSet()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String test java.util.HashSet [test] null java.util.HashSet [null] java.lang.Long 30 java.util.HashSet [30] uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[type=t,subType=st,value=v] java.util.HashSet [TypeSubTypeValue[type=t,subType=st,value=v]] java.lang.String[] [a, b, c] java.util.HashSet [a, b, c] java.util.Arrays$ArrayList [test1, test2] java.util.HashSet [test2, test1]"},{"location":"reference/functions-guide/koryphe-functions/#tostring","title":"ToString","text":"<p>Calls toString on each input. If the input is null, null is returned. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToString JavaJSONPython <pre><code>final ToString function = new ToString();\n</code></pre> <pre><code>{\n\"class\" : \"ToString\"\n}\n</code></pre> <pre><code>g.ToString()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 1 java.lang.String 1 java.lang.Double 2.5 java.lang.String 2.5 java.lang.String abc java.lang.String abc null null"},{"location":"reference/functions-guide/koryphe-functions/#totuple","title":"ToTuple","text":"<p>Converts an Object into a Tuple. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToTuple JavaJSONPython <pre><code>final ToTuple function = new ToTuple();\n</code></pre> <pre><code>{\n\"class\" : \"ToTuple\"\n}\n</code></pre> <pre><code>g.ToTuple()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3, 4] [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] [1, 2, 3, 4] java.lang.Integer[] [1, 2, 3, 4] [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] [1, 2, 3, 4] java.util.HashMap {A=1, B=2, C=3} uk.gov.gchq.koryphe.tuple.MapTuple [1, 2, 3]"},{"location":"reference/functions-guide/koryphe-functions/#touppercase","title":"ToUpperCase","text":"<p>Calls toString followed by toUpperCase on each input. If the input is null, null is returned. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToUpperCase JavaJSONPython <pre><code>final ToUpperCase function = new ToUpperCase();\n</code></pre> <pre><code>{\n\"class\" : \"ToUpperCase\"\n}\n</code></pre> <pre><code>g.ToUpperCase()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 java.lang.String 4 java.lang.Long 5 java.lang.String 5 java.lang.String ACAPTIALISEDSTRING java.lang.String ACAPTIALISEDSTRING java.lang.String alowercasestring java.lang.String ALOWERCASESTRING java.lang.String aString java.lang.String ASTRING java.util.Arrays$ArrayList [6, 3] java.lang.String [6, 3] null null"},{"location":"reference/operations-guide/accumulo/","title":"HDFS Operations","text":"<p>These are special Operations for use with Accumulo Stores and will not work with other stores.</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/accumulo/#getelementsbetweensets","title":"GetElementsBetweenSets","text":"<p>Deprecated</p> <p>Operation has been deprecated in favour of <code>GetElementsBetweenSetPairs</code></p> <p>Gets edges that exist between 2 sets and entities in the first set. Javadoc</p> Example getting elements within set of vertices 1 and 2 and 4 JavaJSONPython <pre><code>final GetElementsBetweenSets operation = new GetElementsBetweenSets.Builder()\n.input(new EntitySeed(1))\n.inputB(new EntitySeed(2), new EntitySeed(4))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsBetweenSets\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"inputB\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 4\n} ]\n}\n</code></pre> <pre><code>g.GetElementsBetweenSets(\ninput=[\ng.EntitySeed(\nvertex=1\n)\n],\ninput_b=[\ng.EntitySeed(\nvertex=2\n),\ng.EntitySeed(\nvertex=4\n)\n]\n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> Example getting elements within set of vertices 1 and 2 and 4 with count greater than 2 JavaJSONPython <pre><code>final GetElementsBetweenSets operation = new GetElementsBetweenSets.Builder()\n.input(new EntitySeed(1))\n.inputB(new EntitySeed(2), new EntitySeed(4))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsBetweenSets\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"inputB\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 4\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElementsBetweenSets(\nview=g.View(\nentities=[\ng.ElementDefinition(\ngroup=\"entity\",\npre_aggregation_filter_functions=[\ng.PredicateContext(\nselection=[\n\"count\"\n],\npredicate=g.IsMoreThan(\nvalue=2,\nor_equal_to=False\n)\n)\n]\n)\n],\nedges=[\ng.ElementDefinition(\ngroup=\"edge\",\npre_aggregation_filter_functions=[\ng.PredicateContext(\nselection=[\n\"count\"\n],\npredicate=g.IsMoreThan(\nvalue=2,\nor_equal_to=False\n)\n)\n]\n)\n],\nall_edges=False,\nall_entities=False\n),\ninput=[\ng.EntitySeed(\nvertex=1\n)\n],\ninput_b=[\ng.EntitySeed(\nvertex=2\n),\ng.EntitySeed(\nvertex=4\n)\n]\n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre>"},{"location":"reference/operations-guide/accumulo/#getelementsbetweensetspairs","title":"GetElementsBetweenSetsPairs","text":"<p>Given a <code>Pair</code> containing two sets of <code>EntityIds</code>, this returns all edges that exist between the two sets of Entities. Also returns <code>Entities</code> from the first set.</p> <p>This operation has been introduced as a replacement to the <code>GetElementsBetweenSets</code> operation as that could not be used in operation chains due to it requiring two inputs. Instead this operation requires a single <code>Pair</code> input containing two Sets which have the Entity IDs you wish to get the edges between. Javadoc</p> Example getting edges between a <code>Set</code> of node 1 and a <code>Set</code> of node 2 and 4 JavaJSONPython <pre><code>// Create and populate first input set\nfinal Set inputSet1 = new HashSet();\ninputSet1.add(new EntitySeed(1));\n// Create and populate second input set\nfinal Set inputSet2 = new HashSet();\ninputSet2.add(new EntitySeed(2));\ninputSet2.add(new EntitySeed(4));\n// Create operation using the Sets wrapped in a Pair object\nfinal GetElementsBetweenSetsPairs operation = new GetElementsBetweenSetsPairs.Builder()\n.input(new Pair(inputSet1, inputSet2))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsBetweenSetsPairs\",\n\"input\" : {\n\"class\" : \"Pair\",\n\"first\" : {\n\"Iterable\": [\n{\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}\n]\n},\n\"second\" : {\n\"Iterable\": [\n{\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n},\n{\n\"class\" : \"EntitySeed\",\n\"vertex\" : 4\n}\n]\n}\n}\n}\n</code></pre> <p>Currently Unavailable</p> <p>The python API for this operation is currently unavailable see this issue.</p> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"entity\",\n\"vertex\": 1,\n\"properties\": {\n\"count\": 3\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"edge\",\n\"source\": 1,\n\"destination\": 2,\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {\n\"count\": 3\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"edge\",\n\"source\": 1,\n\"destination\": 4,\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {\n\"count\": 1\n}\n}\n]\n</code></pre>"},{"location":"reference/operations-guide/accumulo/#getelementswithinset","title":"GetElementsWithinSet","text":"<p>Gets edges with both vertices in a given set and entities with vertices in a given set. Javadoc</p> Example getting elements within set of vertices 1 and 2 and 3 JavaJSONPython <pre><code>final GetElementsWithinSet operation = new GetElementsWithinSet.Builder()\n.input(new EntitySeed(1), new EntitySeed(2), new EntitySeed(3))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsWithinSet\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 3\n} ]\n}\n</code></pre> <pre><code>g.GetElementsWithinSet(\ninput=[\ng.EntitySeed(\nvertex=1\n),\ng.EntitySeed(\nvertex=2\n),\ng.EntitySeed(\nvertex=3\n)\n]\n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\n</code></pre> Example getting elements within set of vertices 1 and 2 and 3 with count greater than 2 JavaJSONPython <pre><code>final GetElementsWithinSet operation = new GetElementsWithinSet.Builder()\n.input(new EntitySeed(1), new EntitySeed(2), new EntitySeed(3))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsWithinSet\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 3\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElementsWithinSet(\nview=g.View(\nentities=[\ng.ElementDefinition(\ngroup=\"entity\",\npre_aggregation_filter_functions=[\ng.PredicateContext(\nselection=[\n\"count\"\n],\npredicate=g.IsMoreThan(\nvalue=2,\nor_equal_to=False\n)\n)\n]\n)\n],\nedges=[\ng.ElementDefinition(\ngroup=\"edge\",\npre_aggregation_filter_functions=[\ng.PredicateContext(\nselection=[\n\"count\"\n],\npredicate=g.IsMoreThan(\nvalue=2,\nor_equal_to=False\n)\n)\n]\n)\n],\nall_edges=False,\nall_entities=False\n),\ninput=[\ng.EntitySeed(\nvertex=1\n),\ng.EntitySeed(\nvertex=2\n),\ng.EntitySeed(\nvertex=3\n)\n]\n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre>"},{"location":"reference/operations-guide/accumulo/#getelementsinranges","title":"GetElementsInRanges","text":"<p>Gets elements that have vertices within a given range. Javadoc</p> Example getting all elements in the range from entity 1 to entity 4 JavaJSONPython <pre><code>final GetElementsInRanges operation = new GetElementsInRanges.Builder()\n.input(new Pair&lt;&gt;(new EntitySeed(1), new EntitySeed(4)))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsInRanges\",\n\"input\" : [ {\n\"class\" : \"Pair\",\n\"first\" : {\n\"EntitySeed\" : {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}\n},\n\"second\" : {\n\"EntitySeed\" : {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 4\n}\n}\n} ]\n}\n</code></pre> <pre><code>g.GetElementsInRanges(\ninput=[\ng.SeedPair(\nfirst=g.EntitySeed(\nvertex=1\n),\nsecond=g.EntitySeed(\nvertex=4\n)\n)\n]\n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEdge[source=2,destination=3,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\n</code></pre> Example getting all elements in the range from entity 4 to edge 4-&gt;5 JavaJSONPython <pre><code>final GetElementsInRanges operation = new GetElementsInRanges.Builder()\n.input(new Pair&lt;&gt;(new EntitySeed(4), new EdgeSeed(4, 5, DirectedType.EITHER)))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsInRanges\",\n\"input\" : [ {\n\"class\" : \"Pair\",\n\"first\" : {\n\"EntitySeed\" : {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 4\n}\n},\n\"second\" : {\n\"EdgeSeed\" : {\n\"class\" : \"EdgeSeed\",\n\"source\" : 4,\n\"destination\" : 5,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n}\n}\n} ]\n}\n</code></pre> <pre><code>g.GetElementsInRanges(\ninput=[\ng.SeedPair(\nfirst=g.EntitySeed(\nvertex=4\n),\nsecond=g.EdgeSeed(\nsource=4,\ndestination=5,\ndirected_type=\"EITHER\",\nmatched_vertex=\"SOURCE\"\n)\n)\n]\n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre>"},{"location":"reference/operations-guide/core/","title":"Core Operations","text":"<p>These Operations form the core of Gaffer. They are always available.</p> <p>Unless otherwise specified, this directed graph is used in the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/core/#addelements","title":"AddElements","text":"<p>Adds elements to a graph. Javadoc</p> Example adding a new entity and edge <p>Adding an additonal entity '6' and edge connecting it to '5'</p> JavaJSONPython <pre><code>new AddElements.Builder()\n.input(new Entity.Builder()\n.group(\"entity\")\n.vertex(6)\n.property(\"count\", 1)\n.build(),\nnew Edge.Builder()\n.group(\"edge\")\n.source(5).dest(6).directed(true)\n.property(\"count\", 1)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddElements\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Edge\",\n\"group\" : \"edge\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"skipInvalidElements\" : false,\n\"validate\" : true\n}\n</code></pre> <pre><code>g.AddElements( \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=6 \n), \ng.Edge( \ngroup=\"edge\", \nproperties={'count': 1}, \nsource=5, \ndestination=6, \ndirected=True \n) \n], \nskip_invalid_elements=False, \nvalidate=True \n)\n</code></pre> <p>Results:</p> <pre><code>graph TD\n  1 --&gt; 2\n  1 --&gt; 4\n  2 --&gt; 3\n  2 --&gt; 4\n  2 --&gt; 5\n  3 --&gt; 4\n  5 --&gt; 6</code></pre>"},{"location":"reference/operations-guide/core/#aggregate","title":"Aggregate","text":"<p>The Aggregate operation would normally be used in an Operation Chain to aggregate the results of a previous operation. Javadoc</p> Example simple aggregate elements JavaJSONPython <pre><code>final Aggregate aggregate = new Aggregate();\n</code></pre> <pre><code>{\n\"class\" : \"Aggregate\"\n}\n</code></pre> <pre><code>g.Aggregate()\n</code></pre> Example aggregate only edges of type edge with a transient property and provided aggregator <p>The groupBy has been set to an empty array. This will override the groupBy value in the schema.</p> JavaJSONPython <pre><code>final String[] groupBy = {};\nfinal Aggregate aggregate = new Aggregate.Builder()\n.edge(\"edge\", new AggregatePair(\ngroupBy,\nnew ElementAggregator.Builder()\n.select(\"transientProperty1\")\n.execute(new StringConcat())\n.build()))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"Aggregate\",\n\"edges\" : {\n\"edge\" : {\n\"elementAggregator\" : {\n\"operators\" : [ {\n\"selection\" : [ \"transientProperty1\" ],\n\"binaryOperator\" : {\n\"class\" : \"StringConcat\",\n\"separator\" : \",\"\n}\n} ]\n},\n\"groupBy\" : [ ]\n}\n}\n}\n</code></pre> <pre><code>g.Aggregate( \nedges=[ \ng.AggregatePair( \ngroup=\"edge\", \ngroup_by=[ \n], \nelement_aggregator=g.ElementAggregateDefinition( \noperators=[ \ng.BinaryOperatorContext( \nselection=[ \n\"transientProperty1\" \n], \nbinary_operator=g.BinaryOperator( \nclass_name=\"uk.gov.gchq.koryphe.impl.binaryoperator.StringConcat\", \nfields={'separator': ','} \n) \n) \n] \n) \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/core/#count","title":"Count","text":"<p>Counts the number of items in an iterable. Javadoc</p> Example counting all elements JavaJSONPython <pre><code>OperationChain&lt;Long&gt; countAllElements = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new Count&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"Count\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.Count() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>11\n</code></pre> <pre><code>11\n</code></pre>"},{"location":"reference/operations-guide/core/#countgroups","title":"CountGroups","text":"<p>Counts the different element groups. Javadoc</p> Example counting all element groups JavaJSONPython <pre><code>final OperationChain&lt;GroupCounts&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new CountGroups())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"CountGroups\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.CountGroups() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>GroupCounts[entityGroups={entity=5},edgeGroups={edge=6},limitHit=false]\n</code></pre> <pre><code>{\n\"entityGroups\" : {\n\"entity\" : 5\n},\n\"edgeGroups\" : {\n\"edge\" : 6\n},\n\"limitHit\" : false\n}\n</code></pre> Example counting all element groups with limit JavaJSONPython <pre><code>final OperationChain&lt;GroupCounts&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new CountGroups(5))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"CountGroups\",\n\"limit\" : 5\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.CountGroups( \nlimit=5 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>GroupCounts[entityGroups={entity=3},edgeGroups={edge=2},limitHit=true]\n</code></pre> <pre><code>{\n\"entityGroups\" : {\n\"entity\" : 3\n},\n\"edgeGroups\" : {\n\"edge\" : 2\n},\n\"limitHit\" : true\n}\n</code></pre>"},{"location":"reference/operations-guide/core/#filter","title":"Filter","text":"<p>Filters elements. Javadoc</p> Example filtering for elements with a count more than 2 <p>The filter will only return elements (Entities and Edges) with a count more than 2. The results show the Edge between 1 &amp; 4 that has a count of 1 has been removed.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new NamedOperation.Builder&lt;EntitySeed, Iterable&lt;? extends Element&gt;&gt;()\n.name(\"1-hop\")\n.input(new EntitySeed(1))\n.build())\n.then(new Filter.Builder()\n.globalElements(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"1-hop\"\n}, {\n\"class\" : \"Filter\",\n\"globalElements\" : {\n\"predicates\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"1-hop\" \n), \ng.Filter( \nglobal_elements=g.GlobalElementFilterDefinition( \npredicates=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example filtering for edges of type edge with count more than 2 <p>Similar to the previous example but this will only return Edges with group 'edge' that have a count more than 2.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new NamedOperation.Builder&lt;EntitySeed, Iterable&lt;? extends Element&gt;&gt;()\n.name(\"1-hop\")\n.input(new EntitySeed(1))\n.build())\n.then(new Filter.Builder()\n.edge(\"edge\", new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"1-hop\"\n}, {\n\"class\" : \"Filter\",\n\"edges\" : {\n\"edge\" : {\n\"predicates\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"1-hop\" \n), \ng.Filter( \nedges=[ \ng.ElementFilterDefinition( \ngroup=\"edge\", \npredicates=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#limit","title":"Limit","text":"<p>Limits the number of elements returned. This truncates output by default, but optionally an exception can be thrown instead of truncating. Javadoc</p> Example limiting elements to 3 JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new Limit&lt;&gt;(3))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : true\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.Limit( \nresult_limit=3, \ntruncate=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n} ]\n</code></pre> Example limiting elements to 3 without truncation <p>Setting this flag to false will throw an error instead of truncating the iterable. In this case there are more than 3 elements, so when executed a LimitExceededException would be thrown.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new Limit&lt;&gt;(3, false))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : false\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.Limit( \nresult_limit=3, \ntruncate=False \n) \n] \n)\n</code></pre> Example limiting elements to 3 with builder <p>A builder can also be used to create the limit - note that truncate is set to true by default, so in this case it is redundant, but simply shown for demonstration.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new Limit.Builder&lt;Element&gt;()\n.resultLimit(3)\n.truncate(true)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : true\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.Limit( \nresult_limit=3, \ntruncate=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#min","title":"Min","text":"<p>Extracts the minimum element based on provided Comparators. Javadoc</p> Example min count JavaJSONPython <pre><code>final OperationChain&lt;Element&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new Min.Builder()\n.comparators(new ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Min\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Min( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n</code></pre> Example min count and transient property JavaJSONPython <pre><code>final OperationChain&lt;Element&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"VERTEX\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"DESTINATION\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.build())\n.build())\n.then(new Min.Builder()\n.comparators(\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.reverse(false)\n.build(),\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"score\")\n.reverse(false)\n.build()\n)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"DESTINATION\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"VERTEX\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Min\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n}, {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"score\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"VERTEX\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"DESTINATION\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Min( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n), \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"score\", \nreversed=False \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[score=&lt;java.lang.Integer&gt;2,count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"score\" : 2,\n\"count\" : 1\n}\n}\n</code></pre>"},{"location":"reference/operations-guide/core/#max","title":"Max","text":"<p>Extracts the maximum element based on provided Comparators. Javadoc</p> Example max count JavaJSONPython <pre><code>final OperationChain&lt;Element&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new Max.Builder()\n.comparators(new ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Max\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Max( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n</code></pre> Example max count and transient property JavaJSONPython <pre><code>final OperationChain&lt;Element&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"VERTEX\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"DESTINATION\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.build())\n.build())\n.then(new Max.Builder()\n.comparators(\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.reverse(false)\n.build(),\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"score\")\n.reverse(false)\n.build()\n)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"DESTINATION\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"VERTEX\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Max\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n}, {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"score\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"VERTEX\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"DESTINATION\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Max( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n), \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"score\", \nreversed=False \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[score=&lt;java.lang.Integer&gt;6,count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"score\" : 6,\n\"count\" : 3\n}\n}\n</code></pre>"},{"location":"reference/operations-guide/core/#sort","title":"Sort","text":"<p>Sorts elements based on provided Comparators and can be used to extract the top 'n' elements. Javadoc</p> Example sorting on count JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new Sort.Builder()\n.comparators(new ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.reverse(false)\n.build())\n.resultLimit(10)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"Sort\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ],\n\"deduplicate\" : true,\n\"resultLimit\" : 10\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Sort( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n) \n], \nresult_limit=10, \ndeduplicate=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example sorting on count without deduplicating <p>Deduplication is true by default.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new Sort.Builder()\n.comparators(new ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.reverse(false)\n.build())\n.resultLimit(10)\n.deduplicate(false)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"Sort\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ],\n\"deduplicate\" : false,\n\"resultLimit\" : 10\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Sort( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n) \n], \nresult_limit=10, \ndeduplicate=False \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example sorting on count and transient property JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"VERTEX\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"DESTINATION\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.build())\n.build())\n.then(new Sort.Builder()\n.comparators(\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.reverse(false)\n.build(),\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"score\")\n.reverse(false)\n.build()\n)\n.resultLimit(4)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"DESTINATION\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"VERTEX\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n}\n}\n}, {\n\"class\" : \"Sort\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n}, {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"score\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ],\n\"deduplicate\" : true,\n\"resultLimit\" : 4\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"VERTEX\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"DESTINATION\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Sort( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n), \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"score\", \nreversed=False \n) \n], \nresult_limit=4, \ndeduplicate=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[score=&lt;java.lang.Integer&gt;2,count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[score=&lt;java.lang.Integer&gt;4,count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[score=&lt;java.lang.Integer&gt;4,count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[score=&lt;java.lang.Integer&gt;5,count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"score\" : 2,\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"score\" : 4,\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"score\" : 4,\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"score\" : 5,\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#reduce","title":"Reduce","text":"<p>Reduces an input to an output with a single value using provided function. Javadoc</p> Example of reduce JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.input(new EntitySeed(1))\n.build())\n.then(new ForEach.Builder&lt;&gt;()\n.operation(new OperationChain.Builder()\n.first(new ToSingletonList&lt;EntitySeed&gt;())\n.then(new GetAdjacentIds())\n.then(new ToVertices())\n.then(new Reduce.Builder&lt;&gt;()\n.aggregateFunction(new Sum())\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ]\n}, {\n\"class\" : \"ForEach\",\n\"operation\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"ToSingletonList\"\n}, {\n\"class\" : \"GetAdjacentIds\"\n}, {\n\"class\" : \"ToVertices\"\n}, {\n\"class\" : \"Reduce\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n} ]\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n] \n), \ng.ForEach( \noperation=g.OperationChain( \noperations=[ \ng.ToSingletonList(), \ng.GetAdjacentIds(), \ng.ToVertices(), \ng.Reduce( \naggregate_function=g.Sum() \n) \n] \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>6\n13\n</code></pre> <pre><code>[ 6, 13 ]\n</code></pre>"},{"location":"reference/operations-guide/core/#map","title":"Map","text":"<p>Maps an input to an output using provided functions. Javadoc</p> Example extracting from get elements <p>This simple example demonstrates retrieving elements from the \"entity\" group, from which the first item is extracted.</p> JavaJSONPython <pre><code>final OperationChain&lt;?&gt; operationChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.view(new View.Builder()\n.entity(\"entity\")\n.build())\n.build())\n.then(new Map.Builder&lt;Iterable&lt;? extends Element&gt;&gt;()\n.first(new FirstItem&lt;&gt;())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"entities\" : {\n\"entity\" : { }\n}\n}\n}, {\n\"class\" : \"Map\",\n\"functions\" : [ {\n\"class\" : \"FirstItem\"\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Map( \nfunctions=[ \ng.FirstItem() \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n</code></pre> Example extracting first items from walks <p>This example demonstrates the extraction of the input seeds to a GetWalks operation, using the Map operation with ExtractWalkEdgesFromHop, and FirstItem functions.</p> JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.resultsLimit(100)\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new Map.Builder&lt;Iterable&lt;Walk&gt;&gt;()\n.first(new IterableFunction.Builder&lt;Walk&gt;()\n.first(new ExtractWalkEdgesFromHop(0))\n.then(new FirstItem&lt;&gt;())\n.build())\n.build())\n.then(new ToVertices.Builder()\n.edgeVertices(ToVertices.EdgeVertices.SOURCE)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n} ]\n} ],\n\"resultsLimit\" : 100\n}, {\n\"class\" : \"Map\",\n\"functions\" : [ {\n\"class\" : \"IterableFunction\",\n\"functions\" : [ {\n\"class\" : \"ExtractWalkEdgesFromHop\",\n\"hop\" : 0\n}, {\n\"class\" : \"FirstItem\"\n} ]\n} ]\n}, {\n\"class\" : \"ToVertices\",\n\"edgeVertices\" : \"SOURCE\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n) \n] \n) \n], \nresults_limit=100 \n), \ng.Map( \nfunctions=[ \ng.IterableFunction( \nfunctions=[ \ng.ExtractWalkEdgesFromHop( \nhop=0 \n), \ng.FirstItem() \n] \n) \n] \n), \ng.ToVertices( \nedge_vertices=\"SOURCE\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>1\n2\n</code></pre> <pre><code>[ 1, 2 ]\n</code></pre>"},{"location":"reference/operations-guide/core/#transform","title":"Transform","text":"<p>The Transform operation would normally be used in an Operation Chain to transform the results of a previous operation. Javadoc</p> Example transforming count property into count string property only for edges of type edge JavaJSONPython <pre><code>final Transform transform = new Transform.Builder()\n.edge(\"edge\", new ElementTransformer.Builder()\n.select(\"count\")\n.execute(new ToString())\n.project(\"countString\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"Transform\",\n\"edges\" : {\n\"edge\" : {\n\"functions\" : [ {\n\"selection\" : [ \"count\" ],\n\"function\" : {\n\"class\" : \"ToString\"\n},\n\"projection\" : [ \"countString\" ]\n} ]\n}\n}\n}\n</code></pre> <pre><code>g.Transform( \nedges=[ \ng.ElementTransformDefinition( \ngroup=\"edge\", \nfunctions=[ \ng.FunctionContext( \nselection=[ \n\"count\" \n], \nfunction=g.ToString(), \nprojection=[ \n\"countString\" \n] \n) \n] \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/core/#toarray","title":"ToArray","text":"<p>Converts elements to Array. Javadoc</p> <p>Note</p> <p>Conversion into an Array is done in memory, so it is not advised for a large number of results.</p> Example ToArray JavaJSONPython <pre><code>final OperationChain&lt;? extends Element[]&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToArray&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToArray\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToArray() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#tocsv","title":"ToCsv","text":"<p>Converts elements to CSV Strings. Javadoc</p> Example ToCsv JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends String&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToCsv.Builder()\n.includeHeader(true)\n.generator(new CsvGenerator.Builder()\n.group(\"Edge group\")\n.vertex(\"vertex\")\n.source(\"source\")\n.property(\"count\", \"total count\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"ToCsv\",\n\"elementGenerator\" : {\n\"class\" : \"CsvGenerator\",\n\"fields\" : {\n\"GROUP\" : \"Edge group\",\n\"VERTEX\" : \"vertex\",\n\"SOURCE\" : \"source\",\n\"count\" : \"total count\"\n},\n\"constants\" : { },\n\"quoted\" : false,\n\"commaReplacement\" : \" \"\n},\n\"includeHeader\" : true\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToCsv( \nelement_generator=g.CsvGenerator( \nfields={'GROUP': 'Edge group', 'VERTEX': 'vertex', 'SOURCE': 'source', 'count': 'total count'}, \nconstants={}, \nquoted=False, \ncomma_replacement=\" \" \n), \ninclude_header=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge group,vertex,source,total count\nedge,,1,1\nentity,2,,1\nentity,1,,3\nedge,,2,2\nedge,,2,1\nedge,,1,3\nedge,,2,1\n</code></pre> <pre><code>[ \"Edge group,vertex,source,total count\", \"edge,,1,1\", \"entity,2,,1\", \"entity,1,,3\", \"edge,,2,2\", \"edge,,2,1\", \"edge,,1,3\", \"edge,,2,1\" ]\n</code></pre>"},{"location":"reference/operations-guide/core/#toentityseeds","title":"ToEntitySeeds","text":"<p>Converts object(s) into EntitySeeds. Javadoc</p> Example ToEntitySeeds JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends EntitySeed&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToEntitySeeds())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"ToEntitySeeds\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToEntitySeeds() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]]\nEntitySeed[vertex=Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]]\nEntitySeed[vertex=Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]]\nEntitySeed[vertex=Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]]\nEntitySeed[vertex=Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]]\nEntitySeed[vertex=Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]]\nEntitySeed[vertex=Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Edge\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Entity\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Entity\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Edge\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Edge\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Edge\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Edge\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#tolist","title":"ToList","text":"<p>Converts elements to a List. Javadoc</p> <p>Note</p> <p>Conversion into a List is done using an in memory ArrayList, so it is not advised for a large number of results.</p> Example ToList JavaJSONPython <pre><code>final OperationChain&lt;List&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToList&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToList\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToList() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#tomap","title":"ToMap","text":"<p>Converts elements to a Map of key-value pairs. Javadoc</p> Example ToMap JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Map&lt;String, Object&gt;&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToMap.Builder()\n.generator(new MapGenerator.Builder()\n.group(\"group\")\n.vertex(\"vertex\")\n.source(\"source\")\n.property(\"count\", \"total count\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"ToMap\",\n\"elementGenerator\" : {\n\"class\" : \"MapGenerator\",\n\"fields\" : {\n\"GROUP\" : \"group\",\n\"VERTEX\" : \"vertex\",\n\"SOURCE\" : \"source\",\n\"count\" : \"total count\"\n},\n\"constants\" : { }\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToMap( \nelement_generator=g.MapGenerator( \nfields={'GROUP': 'group', 'VERTEX': 'vertex', 'SOURCE': 'source', 'count': 'total count'}, \nconstants={} \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>{group=edge, source=1, total count=1}\n{group=entity, vertex=2, total count=1}\n{group=entity, vertex=1, total count=3}\n{group=edge, source=2, total count=2}\n{group=edge, source=2, total count=1}\n{group=edge, source=1, total count=3}\n{group=edge, source=2, total count=1}\n</code></pre> <pre><code>[ {\n\"group\" : \"edge\",\n\"source\" : 1,\n\"total count\" : 1\n}, {\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"total count\" : 1\n}, {\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"total count\" : 3\n}, {\n\"group\" : \"edge\",\n\"source\" : 2,\n\"total count\" : 2\n}, {\n\"group\" : \"edge\",\n\"source\" : 2,\n\"total count\" : 1\n}, {\n\"group\" : \"edge\",\n\"source\" : 1,\n\"total count\" : 3\n}, {\n\"group\" : \"edge\",\n\"source\" : 2,\n\"total count\" : 1\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#toset","title":"ToSet","text":"<p>Converts elements to a Set. Javadoc</p> <p>Note</p> <p>Conversion into a Set is done using an in memory LinkedHashSet, so it is not advised for a large number of results.</p> Example ToSet JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#tosingletonlist","title":"ToSingletonList","text":"<p>Converts a single input of type T to a List. Javadoc</p> Example ToSingletonList JavaJSONPython <pre><code>final ToSingletonList&lt;Integer&gt; opChain = new ToSingletonList.Builder&lt;Integer&gt;()\n.input(4)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"ToSingletonList\",\n\"input\" : 4\n}\n</code></pre> <pre><code>g.ToSingletonList( \ninput=4 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>4\n</code></pre> <pre><code>[ 4 ]\n</code></pre> Example of ToSingletonList in an Operation Chain JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.input(new EntitySeed(1))\n.build())\n.then(new ForEach.Builder&lt;&gt;()\n.operation(new OperationChain.Builder()\n.first(new ToSingletonList&lt;EntitySeed&gt;())\n.then(new GetAdjacentIds())\n.then(new ToVertices())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ]\n}, {\n\"class\" : \"ForEach\",\n\"operation\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"ToSingletonList\"\n}, {\n\"class\" : \"GetAdjacentIds\"\n}, {\n\"class\" : \"ToVertices\"\n} ]\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n] \n), \ng.ForEach( \noperation=g.OperationChain( \noperations=[ \ng.ToSingletonList(), \ng.GetAdjacentIds(), \ng.ToVertices() \n] \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ 2 --&gt; 3 --&gt; 1 ]\n[ 3 --&gt; 4 --&gt; 5 --&gt; 1 ]\n</code></pre> <pre><code>[ [ 2, 3, 1 ], [ 3, 4, 5, 1 ] ]\n</code></pre>"},{"location":"reference/operations-guide/core/#tostream","title":"ToStream","text":"<p>Converts elements to a Stream. Javadoc</p> <p>Note</p> <p>Conversion into a Stream is done in memory, so it is not advised for a large number of results.</p> Example ToStream JavaJSONPython <pre><code>final OperationChain&lt;Stream&lt;? extends Element&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToStream&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"ToStream\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToStream() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>{\n\"parallel\" : false\n}\n</code></pre>"},{"location":"reference/operations-guide/core/#tovertices","title":"ToVertices","text":"<p>Converts ElementIds into vertices. Javadoc</p> <p>The examples use a ToSet operation after the ToVertices operation to deduplicate the results.</p> Example extracting entity vertices JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.view(new View.Builder()\n.entity(\"entity\")\n.build())\n.build())\n.then(new ToVertices.Builder()\n.edgeVertices(ToVertices.EdgeVertices.NONE)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"entities\" : {\n\"entity\" : { }\n}\n}\n}, {\n\"class\" : \"ToVertices\",\n\"edgeVertices\" : \"NONE\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToVertices( \nedge_vertices=\"NONE\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>2\n1\n</code></pre> <pre><code>[ 2, 1 ]\n</code></pre> Example extracting destination vertex JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ToVertices.Builder()\n.edgeVertices(ToVertices.EdgeVertices.DESTINATION)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"ToVertices\",\n\"edgeVertices\" : \"DESTINATION\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.ToVertices( \nedge_vertices=\"DESTINATION\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>4\n3\n2\n5\n</code></pre> <pre><code>[ 4, 3, 2, 5 ]\n</code></pre> Example extracting both source and destination vertices JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ToVertices.Builder()\n.edgeVertices(ToVertices.EdgeVertices.BOTH)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"ToVertices\",\n\"edgeVertices\" : \"BOTH\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.ToVertices( \nedge_vertices=\"BOTH\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>1\n4\n2\n3\n5\n</code></pre> <pre><code>[ 1, 4, 2, 3, 5 ]\n</code></pre> Example extracting matched vertices JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ToVertices.Builder()\n.useMatchedVertex(ToVertices.UseMatchedVertex.EQUAL)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"ToVertices\",\n\"useMatchedVertex\" : \"EQUAL\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.ToVertices( \nuse_matched_vertex=\"EQUAL\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>1\n2\n</code></pre> <pre><code>[ 1, 2 ]\n</code></pre> Example extracting opposite matched vertices JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ToVertices.Builder()\n.useMatchedVertex(ToVertices.UseMatchedVertex.OPPOSITE)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"ToVertices\",\n\"useMatchedVertex\" : \"OPPOSITE\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.ToVertices( \nuse_matched_vertex=\"OPPOSITE\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>4\n3\n2\n5\n</code></pre> <pre><code>[ 4, 3, 2, 5 ]\n</code></pre>"},{"location":"reference/operations-guide/core/#getschema","title":"GetSchema","text":"<p>Gets the Schema of a Graph. Javadoc</p> Example getting full schema <p>This operation defaults the compact field to false, thereby returning the full Schema.</p> JavaJSONPython <pre><code>final GetSchema operation = new GetSchema();\n</code></pre> <pre><code>{\n\"class\" : \"GetSchema\",\n\"compact\" : false\n}\n</code></pre> <pre><code>g.GetSchema( \ncompact=False \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>{\n\"edges\" : {\n\"edge\" : {\n\"description\" : \"test edge\",\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"edge1\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n}\n},\n\"entities\" : {\n\"entity1\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"entity\" : {\n\"description\" : \"test entity\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"cardinality\" : {\n\"description\" : \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllp\" : \"hllp\",\n\"count\" : \"count\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"int\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n},\n\"true\" : {\n\"class\" : \"Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"IsTrue\"\n} ]\n},\n\"count\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n},\n\"set\" : {\n\"class\" : \"TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"CollectionConcat\"\n}\n},\n\"hllp\" : {\n\"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\" : {\n\"class\" : \"HyperLogLogPlusAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"HyperLogLogPlusSerialiser\"\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"edges\" : {\n\"edge\" : {\n\"description\" : \"test edge\",\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"edge1\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n}\n},\n\"entities\" : {\n\"entity1\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"entity\" : {\n\"description\" : \"test entity\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"cardinality\" : {\n\"description\" : \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllp\" : \"hllp\",\n\"count\" : \"count\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"int\" : {\n\"class\" : \"java.lang.Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"true\" : {\n\"class\" : \"java.lang.Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n} ]\n},\n\"count\" : {\n\"class\" : \"java.lang.Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"set\" : {\n\"class\" : \"java.util.TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n}\n},\n\"hllp\" : {\n\"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser\"\n}\n}\n}\n}\n</code></pre> Example getting compact schema <p>This operation will retrieve the compact Schema from the store, rather than the full schema.</p> JavaJSONPython <pre><code>final GetSchema operation = new GetSchema.Builder()\n.compact(true)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetSchema\",\n\"compact\" : true\n}\n</code></pre> <pre><code>g.GetSchema( \ncompact=True \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>{\n\"edges\" : {\n\"edge\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"edge1\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n}\n},\n\"entities\" : {\n\"entity1\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"entity\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"cardinality\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllp\" : \"hllp\",\n\"count\" : \"count\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"int\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n},\n\"true\" : {\n\"class\" : \"Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"IsTrue\"\n} ]\n},\n\"count\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n},\n\"serialiser\" : {\n\"class\" : \"OrderedIntegerSerialiser\"\n}\n},\n\"set\" : {\n\"class\" : \"TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"CollectionConcat\"\n},\n\"serialiser\" : {\n\"class\" : \"TreeSetStringSerialiser\"\n}\n},\n\"hllp\" : {\n\"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\" : {\n\"class\" : \"HyperLogLogPlusAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"HyperLogLogPlusSerialiser\"\n}\n}\n},\n\"vertexSerialiser\" : {\n\"class\" : \"OrderedIntegerSerialiser\"\n}\n}\n</code></pre> <pre><code>{\n\"edges\" : {\n\"edge\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"edge1\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n}\n},\n\"entities\" : {\n\"entity1\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"entity\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"cardinality\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllp\" : \"hllp\",\n\"count\" : \"count\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"int\" : {\n\"class\" : \"java.lang.Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"true\" : {\n\"class\" : \"java.lang.Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n} ]\n},\n\"count\" : {\n\"class\" : \"java.lang.Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n},\n\"serialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser\"\n}\n},\n\"set\" : {\n\"class\" : \"java.util.TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n},\n\"serialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.serialisation.implementation.TreeSetStringSerialiser\"\n}\n},\n\"hllp\" : {\n\"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser\"\n}\n}\n},\n\"vertexSerialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser\"\n}\n}\n</code></pre>"},{"location":"reference/operations-guide/core/#gettraits","title":"GetTraits","text":"<p>Gets the traits of the current store. Javadoc</p> Example getting all traits JavaJSONPython <pre><code>final GetTraits operation = new GetTraits.Builder()\n.currentTraits(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetTraits\",\n\"currentTraits\" : false\n}\n</code></pre> <pre><code>g.GetTraits( \ncurrent_traits=False \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>QUERY_AGGREGATION\nVISIBILITY\nMATCHED_VERTEX\nTRANSFORMATION\nINGEST_AGGREGATION\nPRE_AGGREGATION_FILTERING\nPOST_TRANSFORMATION_FILTERING\nPOST_AGGREGATION_FILTERING\n</code></pre> <pre><code>[ \"QUERY_AGGREGATION\", \"VISIBILITY\", \"MATCHED_VERTEX\", \"TRANSFORMATION\", \"INGEST_AGGREGATION\", \"PRE_AGGREGATION_FILTERING\", \"POST_TRANSFORMATION_FILTERING\", \"POST_AGGREGATION_FILTERING\" ]\n</code></pre> Example getting current traits <p>This will only return traits that are applicable to your current schema. This schema doesn't have a visibility property, so the VISIBILITY trait is not returned.</p> JavaJSONPython <pre><code>final GetTraits operation = new GetTraits.Builder()\n.currentTraits(true)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetTraits\",\n\"currentTraits\" : true\n}\n</code></pre> <pre><code>g.GetTraits( \ncurrent_traits=True \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>QUERY_AGGREGATION\nMATCHED_VERTEX\nTRANSFORMATION\nINGEST_AGGREGATION\nPRE_AGGREGATION_FILTERING\nPOST_TRANSFORMATION_FILTERING\nPOST_AGGREGATION_FILTERING\n</code></pre> <pre><code>[ \"QUERY_AGGREGATION\", \"MATCHED_VERTEX\", \"TRANSFORMATION\", \"INGEST_AGGREGATION\", \"PRE_AGGREGATION_FILTERING\", \"POST_TRANSFORMATION_FILTERING\", \"POST_AGGREGATION_FILTERING\" ]\n</code></pre>"},{"location":"reference/operations-guide/export/","title":"Export Operations","text":"<p>These Operations are used for exporting results, either to a temporary cache used within an Operation Chain or to a result cache. Operations using a result cache require this to be enabled for the operation to also be available.</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/export/#exporttoset","title":"ExportToSet","text":"<p>Exports results to a Set, always available. Javadoc</p> Example of export and get JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToSet&lt;&gt;())\n.then(new DiscardOutput())\n.then(new GetSetExport())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToSet\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetSetExport\",\n\"start\" : 0\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToSet(), \ng.DiscardOutput(), \ng.GetSetExport( \nstart=0 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example of export and get with pagination JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToSet&lt;&gt;())\n.then(new DiscardOutput())\n.then(new GetSetExport.Builder()\n.start(2)\n.end(4)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToSet\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetSetExport\",\n\"start\" : 2,\n\"end\" : 4\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToSet(), \ng.DiscardOutput(), \ng.GetSetExport( \nstart=2, \nend=4 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example exporting multiple results to set and getting all results JavaJSONPython <pre><code>final OperationChain&lt;Map&lt;String, CloseableIterable&lt;?&gt;&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToSet.Builder&lt;&gt;()\n.key(\"edges\")\n.build())\n.then(new DiscardOutput())\n.then(new GetAllElements())\n.then(new ExportToSet.Builder&lt;&gt;()\n.key(\"entities\")\n.build())\n.then(new DiscardOutput())\n.then(new GetExports.Builder()\n.exports(new GetSetExport.Builder()\n.key(\"edges\")\n.build(),\nnew GetSetExport.Builder()\n.key(\"entities\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToSet\",\n\"key\" : \"edges\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToSet\",\n\"key\" : \"entities\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetExports\",\n\"getExports\" : [ {\n\"class\" : \"GetSetExport\",\n\"start\" : 0,\n\"key\" : \"edges\"\n}, {\n\"class\" : \"GetSetExport\",\n\"start\" : 0,\n\"key\" : \"entities\"\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToSet( \nkey=\"edges\" \n), \ng.DiscardOutput(), \ng.GetAllElements(), \ng.ExportToSet( \nkey=\"entities\" \n), \ng.DiscardOutput(), \ng.GetExports( \nget_exports=[ \ng.GetSetExport( \nkey=\"edges\", \nstart=0 \n), \ng.GetSetExport( \nkey=\"entities\", \nstart=0 \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: edges:\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nuk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: entities:\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>{\n\"uk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: edges\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"uk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: entities\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}\n</code></pre>"},{"location":"reference/operations-guide/export/#getsetexport","title":"GetSetExport","text":"<p>Fetches data from a Set cache, always available. Javadoc</p> <p>Example</p> <p>See examples for ExportToSet above for usage.</p>"},{"location":"reference/operations-guide/export/#exporttogafferresultcache","title":"ExportToGafferResultCache","text":"<p>Exports to a cache backed by a Gaffer graph. Requires a cache to be configured. Javadoc</p> Example of export and get with result cache JavaJSONPython <pre><code>final OperationChain&lt;CloseableIterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToGafferResultCache&lt;&gt;())\n.then(new DiscardOutput())\n.then(new GetGafferResultCacheExport())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToGafferResultCache\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetGafferResultCacheExport\",\n\"key\" : \"ALL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToGafferResultCache(), \ng.DiscardOutput(), \ng.GetGafferResultCacheExport( \nkey=\"ALL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example exporting to result cache and getting job details JavaJSONPython <pre><code>final OperationChain&lt;JobDetail&gt; exportOpChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToGafferResultCache&lt;&gt;())\n.then(new DiscardOutput())\n.then(new GetJobDetails())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToGafferResultCache\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetJobDetails\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToGafferResultCache(), \ng.DiscardOutput(), \ng.GetJobDetails() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=af0a2efe-5f3c-458d-8fa2-93d0f28cbd82,user=User[userId=user01,dataAuths=[],opAuths=[]],status=RUNNING,startTime=1667818800114,opChain=OperationChain[GetAllElements-&gt;ExportToGafferResultCache-&gt;DiscardOutput-&gt;GetJobDetails]]\n</code></pre> <pre><code>{\n\"jobId\" : \"af0a2efe-5f3c-458d-8fa2-93d0f28cbd82\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"RUNNING\",\n\"startTime\" : 1667818800114,\n\"opChain\" : \"OperationChain[GetAllElements-&gt;ExportToGafferResultCache-&gt;DiscardOutput-&gt;GetJobDetails]\"\n}\n</code></pre> Example getting elements from result cache JavaJSONPython <pre><code>final OperationChain&lt;CloseableIterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetGafferResultCacheExport.Builder()\n.jobId(jobDetail.getJobId())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetGafferResultCacheExport\",\n\"jobId\" : \"af0a2efe-5f3c-458d-8fa2-93d0f28cbd82\",\n\"key\" : \"ALL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetGafferResultCacheExport( \njob_id=\"af0a2efe-5f3c-458d-8fa2-93d0f28cbd82\", \nkey=\"ALL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n} ]\n</code></pre> Example exporting multiple results to result cache and then getting all results JavaJSONPython <pre><code>final OperationChain&lt;Map&lt;String, CloseableIterable&lt;?&gt;&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToGafferResultCache.Builder&lt;&gt;()\n.key(\"edges\")\n.build())\n.then(new DiscardOutput())\n.then(new GetAllElements())\n.then(new ExportToGafferResultCache.Builder&lt;&gt;()\n.key(\"entities\")\n.build())\n.then(new DiscardOutput())\n.then(new GetExports.Builder()\n.exports(new GetGafferResultCacheExport.Builder()\n.key(\"edges\")\n.build(),\nnew GetGafferResultCacheExport.Builder()\n.key(\"entities\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToGafferResultCache\",\n\"key\" : \"edges\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToGafferResultCache\",\n\"key\" : \"entities\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetExports\",\n\"getExports\" : [ {\n\"class\" : \"GetGafferResultCacheExport\",\n\"key\" : \"edges\"\n}, {\n\"class\" : \"GetGafferResultCacheExport\",\n\"key\" : \"entities\"\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToGafferResultCache( \nkey=\"edges\" \n), \ng.DiscardOutput(), \ng.GetAllElements(), \ng.ExportToGafferResultCache( \nkey=\"entities\" \n), \ng.DiscardOutput(), \ng.GetExports( \nget_exports=[ \ng.GetGafferResultCacheExport( \nkey=\"edges\" \n), \ng.GetGafferResultCacheExport( \nkey=\"entities\" \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: edges:\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nuk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: entities:\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>{\n\"uk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: edges\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"uk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: entities\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}\n</code></pre>"},{"location":"reference/operations-guide/export/#getgafferresultcacheexport","title":"GetGafferResultCacheExport","text":"<p>Fetches data from a Gaffer result cache. Requires a cache to be configured. Javadoc</p> <p>Example</p> <p>See examples for ExportToGafferResultCache above for usage.</p>"},{"location":"reference/operations-guide/export/#exporttootherauthorisedgraph","title":"ExportToOtherAuthorisedGraph","text":"<p>These export examples export all edges in the example graph to another Gaffer instance using Operation Auths against the user. Javadoc</p> <p>To add this operation to your Gaffer graph you will need to write your own version of <code>ExportToOtherAuthorisedGraphOperationDeclarations.json</code> containing the user auths, and then set this property:</p> <pre><code>gaffer.store.operation.declarations=/path/to/ExportToOtherAuthorisedGraphOperationDeclarations.json\n</code></pre> Example export to preconfigured graph <p>This example will export all Edges with group 'edge' to another Gaffer graph with ID 'graph2'. The graph will be loaded from the configured GraphLibrary, so it must already exist. In order to export to graph2 the user must have the required user authorisations that were configured for this operation.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherAuthorisedGraph.Builder()\n.graphId(\"graph2\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherAuthorisedGraph\",\n\"graphId\" : \"graph2\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherAuthorisedGraph( \ngraph_id=\"graph2\" \n) \n] \n)\n</code></pre> Example exporting to new graph using preconfigured schema and properties <p>This example will export all Edges with group 'edge' to another Gaffer graph with new ID 'newGraphId'. The new graph will have a parent Schema and Store Properties within the graph library specified by the ID's schemaId1 and storePropsId1. In order to export to newGraphId with storePropsId1 and schemaId1 the user must have the required user authorisations that were configured for this operation to use each of these 3 ids.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherAuthorisedGraph.Builder()\n.graphId(\"newGraphId\")\n.parentStorePropertiesId(\"storePropsId1\")\n.parentSchemaIds(\"schemaId1\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherAuthorisedGraph\",\n\"graphId\" : \"newGraphId\",\n\"parentSchemaIds\" : [ \"schemaId1\" ],\n\"parentStorePropertiesId\" : \"storePropsId1\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherAuthorisedGraph( \ngraph_id=\"newGraphId\", \nparent_schema_ids=[ \n\"schemaId1\" \n], \nparent_store_properties_id=\"storePropsId1\" \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/export/#exporttoothergraph","title":"ExportToOtherGraph","text":"<p>These export examples export all edges in the example graph to another Gaffer instance. Javadoc</p> <p>To add this operation to your Gaffer graph you will need to include the <code>ExportToOtherGraphOperationDeclarations.json</code> in your store properties, i.e. set this property:</p> <pre><code>gaffer.store.operation.declarations=ExportToOtherGraphOperationDeclarations.json\n</code></pre> Example export <p>This example will export all Edges with group 'edge' to another Gaffer graph with new ID 'newGraphId'. The new graph will have the same schema and same store properties as the current graph. In this case it will just create another table in accumulo called 'newGraphId'.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherGraph.Builder()\n.graphId(\"newGraphId\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherGraph\",\n\"graphId\" : \"newGraphId\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherGraph( \ngraph_id=\"newGraphId\" \n) \n] \n)\n</code></pre> Example export with custom graph <p>This example will export all Edges with group 'edge' to another Gaffer graph with new ID 'newGraphId'. The new graph will have the custom provided schema (note it must contain the same Edge group 'edge' otherwise the exported edges will be invalid') and custom store properties. The store properties could be any store properties e.g. Accumulo, Map, Proxy store properties.</p> JavaJSONPython <pre><code>final Schema schema = Schema.fromJson(StreamUtil.openStreams(getClass(), \"operations/schema\"));\nfinal StoreProperties storeProperties = new AccumuloProperties();\nfinal OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherGraph.Builder()\n.graphId(\"newGraphId\")\n.schema(schema)\n.storeProperties(storeProperties)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherGraph\",\n\"graphId\" : \"newGraphId\",\n\"schema\" : {\n\"edges\" : {\n\"edge\" : {\n\"description\" : \"test edge\",\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"edge1\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n}\n},\n\"entities\" : {\n\"entity1\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"entity\" : {\n\"description\" : \"test entity\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"cardinality\" : {\n\"description\" : \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllp\" : \"hllp\",\n\"count\" : \"count\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"int\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n},\n\"true\" : {\n\"class\" : \"Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"IsTrue\"\n} ]\n},\n\"count\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n},\n\"set\" : {\n\"class\" : \"TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"CollectionConcat\"\n}\n},\n\"hllp\" : {\n\"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\" : {\n\"class\" : \"HyperLogLogPlusAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"HyperLogLogPlusSerialiser\"\n}\n}\n}\n},\n\"storeProperties\" : {\n\"gaffer.store.class\" : \"uk.gov.gchq.gaffer.accumulostore.AccumuloStore\",\n\"gaffer.store.properties.class\" : \"uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\"\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherGraph( \ngraph_id=\"newGraphId\", \nschema={'edges': {'edge': {'description': 'test edge', 'source': 'int', 'destination': 'int', 'directed': 'true', 'properties': {'count': 'count'}}, 'edge1': {'source': 'int', 'destination': 'int', 'directed': 'true', 'properties': {'count': 'count'}}}, 'entities': {'entity1': {'vertex': 'int', 'properties': {'count': 'count'}}, 'entity': {'description': 'test entity', 'vertex': 'int', 'properties': {'count': 'count'}}, 'cardinality': {'description': 'An entity that is added to every vertex representing the connectivity of the vertex.', 'vertex': 'int', 'properties': {'edgeGroup': 'set', 'hllp': 'hllp', 'count': 'count'}, 'groupBy': ['edgeGroup']}}, 'types': {'int': {'class': 'java.lang.Integer', 'aggregateFunction': {\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"}}, 'true': {'class': 'java.lang.Boolean', 'validateFunctions': [{\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"}]}, 'count': {'class': 'java.lang.Integer', 'aggregateFunction': {\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"}}, 'set': {'class': 'java.util.TreeSet', 'aggregateFunction': {\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"}}, 'hllp': {'class': 'com.clearspring.analytics.stream.cardinality.HyperLogLogPlus', 'aggregateFunction': {'class': 'uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator'}, 'serialiser': {'class': 'uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser'}}}}, \nstore_properties={'gaffer.store.class': 'uk.gov.gchq.gaffer.accumulostore.AccumuloStore', 'gaffer.store.properties.class': 'uk.gov.gchq.gaffer.accumulostore.AccumuloProperties'} \n) \n] \n)\n</code></pre> Example export to other Gaffer REST API <p>This example will export all Edges with group 'edge' to another Gaffer REST API.To export to another Gaffer REST API, we go via a Gaffer Proxy Store. We just need to tell the proxy store the host, port and context root of the REST API. Note that you will need to include the proxy-store module as a Maven dependency to do this.</p> JavaJSONPython <pre><code>final ProxyProperties proxyProperties = new ProxyProperties();\nproxyProperties.setStoreClass(ProxyStore.class);\nproxyProperties.setStorePropertiesClass(ProxyProperties.class);\nproxyProperties.setGafferHost(\"localhost\");\nproxyProperties.setGafferPort(8081);\nproxyProperties.setGafferContextRoot(\"/rest/v1\");\nfinal OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherGraph.Builder()\n.graphId(\"otherGafferRestApiGraphId\")\n.storeProperties(proxyProperties)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherGraph\",\n\"graphId\" : \"otherGafferRestApiGraphId\",\n\"storeProperties\" : {\n\"gaffer.host\" : \"localhost\",\n\"gaffer.context-root\" : \"/rest/v1\",\n\"gaffer.store.class\" : \"uk.gov.gchq.gaffer.proxystore.ProxyStore\",\n\"gaffer.port\" : \"8081\",\n\"gaffer.store.properties.class\" : \"uk.gov.gchq.gaffer.proxystore.ProxyProperties\"\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherGraph( \ngraph_id=\"otherGafferRestApiGraphId\", \nstore_properties={'gaffer.host': 'localhost', 'gaffer.context-root': '/rest/v1', 'gaffer.store.class': 'uk.gov.gchq.gaffer.proxystore.ProxyStore', 'gaffer.port': '8081', 'gaffer.store.properties.class': 'uk.gov.gchq.gaffer.proxystore.ProxyProperties'} \n) \n] \n)\n</code></pre> Example export using graph from graph library <p>This example will export all Edges with group 'edge' to another existing graph 'exportGraphId' using a GraphLibrary. We demonstrate here that if we use a GraphLibrary, we can register a graph ID and reference it from the export operation. This means the user does not have to proxy all the schema and store properties when they configure the export operation, they can just provide the ID.</p> JavaJSONPython <pre><code>// Setup the graphLibrary with an export graph\nfinal GraphLibrary graphLibrary = new FileGraphLibrary(\"target/graphLibrary\");\nfinal AccumuloProperties exportStoreProperties = new AccumuloProperties();\n// set other store property config here.\nfinal Schema exportSchema = new Schema.Builder()\n.edge(\"edge\", new SchemaEdgeDefinition.Builder()\n.source(\"int\")\n.destination(\"int\")\n.directed(\"true\")\n.property(\"count\", \"int\")\n.aggregate(false)\n.build())\n.type(\"int\", Integer.class)\n.type(\"true\", new TypeDefinition.Builder()\n.clazz(Boolean.class)\n.validateFunctions(new IsTrue())\n.build())\n.build();\ngraphLibrary.addOrUpdate(\"exportGraphId\", exportSchema, exportStoreProperties);\nfinal Graph graph = new Graph.Builder()\n.config(StreamUtil.openStream(getClass(), \"graphConfigWithLibrary.json\"))\n.addSchemas(StreamUtil.openStreams(getClass(), \"operations/schema\"))\n.storeProperties(new MapStoreProperties())\n.build();\nfinal OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherGraph.Builder()\n.graphId(\"exportGraphId\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherGraph\",\n\"graphId\" : \"exportGraphId\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherGraph( \ngraph_id=\"exportGraphId\" \n) \n] \n)\n</code></pre> Example export to new graph based on config from graph library <p>Similar to the previous example, this example will export all Edges with group 'edge' to another graph using a GraphLibrary. But in this example we show that you can export to a new graph with id newGraphId by choosing any combination of schema and store properties registered in the GraphLibrary. This is useful as a system administrator could register various different store properties, of different Accumulo clusters and a user could them just select which one to use by referring to the relevant store properties ID.</p> JavaJSONPython <pre><code>// Setup the graphLibrary with a schema and store properties for exporting\nfinal GraphLibrary graphLibrary = new FileGraphLibrary(\"target/graphLibrary\");\nfinal AccumuloProperties exportStoreProperties = new AccumuloProperties();\n// set other store property config here.\ngraphLibrary.addProperties(\"exportStorePropertiesId\", exportStoreProperties);\nfinal Schema exportSchema = new Schema.Builder()\n.edge(\"edge\", new SchemaEdgeDefinition.Builder()\n.source(\"int\")\n.destination(\"int\")\n.directed(\"true\")\n.property(\"count\", \"int\")\n.aggregate(false)\n.build())\n.type(\"int\", Integer.class)\n.type(\"true\", new TypeDefinition.Builder()\n.clazz(Boolean.class)\n.validateFunctions(new IsTrue())\n.build())\n.build();\ngraphLibrary.addSchema(\"exportSchemaId\", exportSchema);\nfinal Graph graph = new Graph.Builder()\n.config(StreamUtil.openStream(getClass(), \"graphConfigWithLibrary.json\"))\n.addSchemas(StreamUtil.openStreams(getClass(), \"operations/schema\"))\n.storeProperties(new MapStoreProperties())\n.build();\nfinal OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherGraph.Builder()\n.graphId(\"newGraphId\")\n.parentSchemaIds(\"exportSchemaId\")\n.parentStorePropertiesId(\"exportStorePropertiesId\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherGraph\",\n\"graphId\" : \"newGraphId\",\n\"parentSchemaIds\" : [ \"exportSchemaId\" ],\n\"parentStorePropertiesId\" : \"exportStorePropertiesId\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherGraph( \ngraph_id=\"newGraphId\", \nparent_schema_ids=[ \n\"exportSchemaId\" \n], \nparent_store_properties_id=\"exportStorePropertiesId\" \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/federated-operation/","title":"Federated Operation","text":"<p>Note</p> <p>If you're upgrading from Gaffer 1.x.x you will need to migrate from using the FederatedOperationChain to using the FederatedOperation</p>"},{"location":"reference/operations-guide/federated-operation/#the-federated-operation","title":"The Federated Operation","text":"<p>The Federated Operation is an operation which can be used against a Federated Store. The operation is used to send a single or a chain of operations to one or more graphs within a federated store. It can be configured to merge results differently depending on the <code>mergeFunction</code> passed to it.</p>"},{"location":"reference/operations-guide/federated-operation/#parameters","title":"Parameters","text":"<p>The Federated Operation has 3 key parameters: <code>operation</code>, <code>graphIds</code> and <code>mergeFunction</code>:</p> <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n},\n\"graphIds\": [ \"GraphA\", \"GraphB\" ],\n\"mergeFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n}\n}\n</code></pre>"},{"location":"reference/operations-guide/federated-operation/#required-parameter-operation","title":"Required parameter: operation","text":"<p>This is the Operation you wish to be federated to the subgraphs. This can be a single Operation or an OperationChain. If you use an OperationChain, then the whole chain will be sent to the subgraphs.  </p>"},{"location":"reference/operations-guide/federated-operation/#optional-parameter-graphids","title":"Optional parameter: graphIds","text":"<p>This is a list of a single or multiple graph IDs which you want to send the operation to.  </p> <p>If the user does not specify <code>graphIds</code> in the Operation, then the <code>storeConfiguredGraphIds</code> for that store will be used. If the admin has not configured the <code>storeConfiguredGraphIds</code> then all graphIds will be used. </p>"},{"location":"reference/operations-guide/federated-operation/#optional-parameter-mergefunction","title":"Optional parameter: mergeFunction","text":"<p>The <code>mergeFunction</code> parameter is the Function you want to use when merging the results from the subgraphs.  </p> <p>If you do not specify a <code>mergeFunction</code>,  then the admin configured <code>storeConfiguredMergeFunctions</code> are used, else the default <code>mergeFunctions</code> are used as shown in the table below.</p> <p>For example, when GetElements is used as the operation inside a FederatedOperation and you haven't specified a <code>mergeFunction</code>, the function <code>ApplyViewToElementsFunction</code> will be used by default, unless an admin has configured a different function.</p> <p>See the default mergeFunctions for the operations below.</p>"},{"location":"reference/operations-guide/federated-operation/#default-store-configured-merge-functions","title":"Default Store Configured Merge Functions","text":"Operation Merge function GetElements ApplyViewToElementsFunction GetAllElements ApplyViewToElementsFunction GetSchema MergeSchema GetTraits CollectionIntersect others ConcatenateMergeFunction"},{"location":"reference/operations-guide/federated-operation/#sending-operations-to-federated-stores","title":"Sending Operations To Federated Stores","text":"<p>In these examples we do not specify the <code>mergeFunction</code> parameter. This would therefore use the default <code>mergeFunction</code> for the specific operation.</p> Sending a single operation to one subgraph in your Federated Store <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n},\n\"graphIds\": [ \"GraphA\" ]\n}\n</code></pre> Sending two different operations to two different subgraphs in your Federated Store <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation1\"\n},\n\"graphIds\": [ \"GraphA\" ]\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation2\"\n},\n\"graphIds\": [ \"GraphB\" ]\n}\n]\n}\n</code></pre> Sending a single operation to one subgraph and a chain of operations to another subgraph in your Federated Store <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": {\n[\n\"class\": \"ExampleOperation1\",\n\"class\": \"ExampleOperation2\"\n]\n}\n},\n\"graphIds\": [ \"GraphA\" ]\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation3\"\n},\n\"graphIds\": [ \"GraphB\" ]\n}\n]\n}\n</code></pre> <p>In the example above we've wrapped an Operation Chain inside a Federated Operation.</p>"},{"location":"reference/operations-guide/federated-operation/#the-merge-function","title":"The Merge Function","text":"<p>Merge functions dictate how the FederatedStore will merge results from different subgraphs dependent on the Operation.</p> <p>The examples below refer to this graph.</p> <pre><code>graph LR\n    subgraph Federated Store\n        subgraph Graph A\n            direction TB\n            A((Person&lt;br&gt;id: 1&lt;br&gt;name: bob&lt;br&gt;count: 1)) --works as--&gt; B((Job&lt;br&gt;id: 2&lt;br&gt;title: builder))\n            A --lives in--&gt; C((Place&lt;br&gt;id: 3&lt;br&gt;name: bobsville))\n        end\n            subgraph Graph B\n            direction TB\n            D((Person&lt;br&gt;id: 1&lt;br&gt;name: bob&lt;br&gt;count: 1)) --drives--&gt; E((Vehicle&lt;br&gt;id: 4&lt;br&gt;type: digger))\n            E --make/model--&gt; F((Manufacturer&lt;br&gt;id: 5&lt;br&gt;name: JCB))\n        end\n    end</code></pre> Graph A Schema and Data <p>Schema: <pre><code>{\n\"class\": \"AddGraph\",\n\"graphId\": \"GraphA\",\n\"schema\": {\n\"edges\": {\n\"WorksAs\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.job.string\",\n\"directed\": \"true\"\n},\n\"LivesIn\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.place.string\",\n\"directed\": \"true\"\n}\n},\n\"entities\": {\n\"Person\": {\n\"description\": \"Entity representing a person vertex\",\n\"vertex\": \"id.person.string\",\n\"aggregate\": \"true\",\n\"properties\": {\n\"name\": \"property.string\",\n\"count\": \"count.integer\"\n}\n},\n\"Job\": {\n\"description\": \"Entity representing a job vertex\",\n\"vertex\": \"id.job.string\",\n\"aggregate\": \"false\",\n\"properties\": {\n\"type\": \"property.string\"\n}\n},\n\"Place\": {\n\"description\": \"Entity representing a place vertex\",\n\"vertex\": \"id.place.string\",\n\"aggregate\": \"false\",\n\"properties\": {\n\"name\": \"property.string\"\n}\n}\n},\n\"types\": {\n\"id.person.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.place.string\": {\n\"description\": \"A basic type to hold the string id of a place entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.job.string\": {\n\"description\": \"A basic type to hold the string id of a job entity\",\n\"class\": \"java.lang.String\"\n},\n\"property.string\": {\n\"description\": \"A type to hold string properties of entities\",\n\"class\": \"java.lang.String\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n}\n},\n\"count.integer\": {\n\"description\": \"A long count that must be greater than or equal to 0.\",\n\"class\": \"java.lang.Integer\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\": true,\n\"value\": {\n\"java.lang.Integer\": 0\n}\n}\n],\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"true\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n}\n]\n}\n}\n},\n\"storeProperties\": {\n\"gaffer.store.class\": \"uk.gov.gchq.gaffer.mapstore.MapStore\"\n}\n}\n</code></pre> Data: <pre><code>{\n\"class\": \"AddElements\",\n\"input\": [\n{\n\"class\": \"Edge\",\n\"group\": \"WorksAs\",\n\"source\": \"1\",\n\"destination\": \"3\",\n\"directed\": true\n},\n{\n\"class\": \"Edge\",\n\"group\": \"LivesIn\",\n\"source\": \"1\",\n\"destination\": \"3\",\n\"directed\": true\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Person\",\n\"vertex\": \"1\",\n\"properties\": {\n\"name\": \"Bob\",\n\"count\": 1\n}\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Job\",\n\"vertex\": \"2\",\n\"properties\": {\n\"type\": \"Builder\"\n}\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Place\",\n\"vertex\": \"3\",\n\"properties\": {\n\"name\": \"Bobsville\"\n}\n}\n],\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"GraphA\"\n}\n}\n</code></pre></p> Graph B Schema and Data <p>Schema: <pre><code>{\n\"class\": \"AddGraph\",\n\"graphId\": \"GraphB\",\n\"schema\": {\n\"edges\": {\n\"Drives\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.vehicle.string\",\n\"directed\": \"true\"\n},\n\"MakeModel\": {\n\"source\": \"id.vehicle.string\",\n\"destination\": \"id.manufacturer.string\",\n\"directed\": \"true\"\n}\n},\n\"entities\": {\n\"Person\": {\n\"description\": \"Entity representing a person vertex\",\n\"vertex\": \"id.person.string\",\n\"aggregate\": \"true\",\n\"properties\": {\n\"name\": \"property.string\",\n\"count\": \"count.integer\"\n}\n},\n\"Vehicle\": {\n\"description\": \"Entity representing a vehicle vertex\",\n\"vertex\": \"id.vehicle.string\",\n\"aggregate\": \"false\",\n\"properties\": {\n\"type\": \"property.string\"\n}\n},\n\"Manufacturer\": {\n\"description\": \"Entity representing a manufacturer vertex\",\n\"vertex\": \"id.manufacturer.string\",\n\"aggregate\": \"false\",\n\"properties\": {\n\"name\": \"property.string\"\n}\n}\n},\n\"types\": {\n\"id.person.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.manufacturer.string\": {\n\"description\": \"A basic type to hold the string id of a manufacturer entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.vehicle.string\": {\n\"description\": \"A basic type to hold the string id of a vehicle entity\",\n\"class\": \"java.lang.String\"\n},\n\"property.string\": {\n\"description\": \"A type to hold string properties of entities\",\n\"class\": \"java.lang.String\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n}\n},\n\"count.integer\": {\n\"description\": \"A long count that must be greater than or equal to 0.\",\n\"class\": \"java.lang.Integer\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\": true,\n\"value\": {\n\"java.lang.Integer\": 0\n}\n}\n],\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"true\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n}\n]\n}\n}\n},\n\"storeProperties\": {\n\"gaffer.store.class\": \"uk.gov.gchq.gaffer.mapstore.MapStore\"\n}\n}\n</code></pre> Data: <pre><code>{\n\"class\": \"AddElements\",\n\"input\": [\n{\n\"class\": \"Edge\",\n\"group\": \"Drives\",\n\"source\": \"1\",\n\"destination\": \"4\",\n\"directed\": true\n},\n{\n\"class\": \"Edge\",\n\"group\": \"MakeModel\",\n\"source\": \"4\",\n\"destination\": \"5\",\n\"directed\": true\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Person\",\n\"vertex\": \"1\",\n\"properties\": {\n\"name\": \"Bob\",\n\"count\": 1\n}\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Vehicle\",\n\"vertex\": \"4\",\n\"properties\": {\n\"type\": \"Digger\"\n}\n},\n{\n\"class\": \"Entity\",\n\"group\": \"Manufacturer\",\n\"vertex\": \"5\",\n\"properties\": {\n\"name\": \"JCB\"\n}\n}\n],\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"GraphB\"\n}\n}    </code></pre></p>"},{"location":"reference/operations-guide/federated-operation/#applyviewtoelementsfunction","title":"ApplyViewToElementsFunction","text":"<p>This merge function uses the View from the operation and applies it to all of the results, meaning the results are now re-aggregated and re-filtered using the Schema, locally in the FederatedStore. This makes the results look like they came from one graph, rather than getting back an array of Elements from the different subgraphs.</p> Example using the GetAllElements operation <p><pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"GetAllElements\"\n},\n\"graphIds\": [\"GraphA\",\"GraphB\"],\n\"mergeFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ApplyViewToElementsFunction\"\n}\n}\n</code></pre> Result: <pre><code>[\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"LivesIn\",\n\"source\": \"1\",\n\"destination\": \"3\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"MakeModel\",\n\"source\": \"4\",\n\"destination\": \"5\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Person\",\n\"vertex\": \"1\",\n\"properties\": {\n\"name\": \"Bob\",\n\"count\": 2\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"WorksAs\",\n\"source\": \"1\",\n\"destination\": \"3\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"Drives\",\n\"source\": \"1\",\n\"destination\": \"4\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Vehicle\",\n\"vertex\": \"4\",\n\"properties\": {\n\"type\": \"Digger\"\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Manufacturer\",\n\"vertex\": \"5\",\n\"properties\": {\n\"name\": \"JCB\"\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Job\",\n\"vertex\": \"2\",\n\"properties\": {\n\"type\": \"Builder\"\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Place\",\n\"vertex\": \"3\",\n\"properties\": {\n\"name\": \"Bobsville\"\n}\n}\n]\n</code></pre></p> <p>If we compare the results above to the <code>GetAllElements</code> result below using the <code>ConcanenateMergeFunction</code>. We can see there is a difference between them. In the <code>ApplyViewToElementsFunction</code> result above we have just one entity of <code>Person</code> named <code>Bob</code> with a <code>count</code> of <code>2</code>. Whereas the below result which used the <code>ConcanenateMergeFunction</code>,  we have two entities of <code>Person</code> named <code>Bob</code>, each with a <code>count</code> of <code>1</code>. This is because the <code>ApplyViewToElementsFunction</code> has re-aggregated and re-filtered the results from both graphs into one.</p>"},{"location":"reference/operations-guide/federated-operation/#collectionintersect","title":"CollectionIntersect","text":"<p>This returns the intersection of common store traits from the subgraphs in the federated store.</p> Example using the GetTraits operations. <p><pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"GetTraits\"\n},\n\"graphIds\": [\"GraphA\",\"GraphB\"],\n\"mergeFunction\": {\n\"class\": \"CollectionIntersect\"\n}\n}\n</code></pre> Result: <pre><code>[\n\"MATCHED_VERTEX\",\n\"POST_TRANSFORMATION_FILTERING\",\n\"INGEST_AGGREGATION\",\n\"PRE_AGGREGATION_FILTERING\",\n\"TRANSFORMATION\",\n\"POST_AGGREGATION_FILTERING\"\n]\n</code></pre></p>"},{"location":"reference/operations-guide/federated-operation/#mergeschema","title":"MergeSchema","text":"<p>This merge function returns an aggregated schema from the subgraphs, unless there is a conflict. You may wish to use the <code>ConcatenateMergeFunction</code> if there is a schema conflict.  </p> Example using the GetSchema operation. <p><pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"GetSchema\"\n},\n\"graphIds\": [\"GraphA\",\"GraphB\"],\n\"mergeFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.util.MergeSchema\"\n}\n}\n</code></pre> Result: <pre><code>{\n\"edges\": {\n\"LivesIn\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.place.string\",\n\"directed\": \"true\"\n},\n\"Drives\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.vehicle.string\",\n\"directed\": \"true\"\n},\n\"WorksAs\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.job.string\",\n\"directed\": \"true\"\n},\n\"MakeModel\": {\n\"source\": \"id.vehicle.string\",\n\"destination\": \"id.manufacturer.string\",\n\"directed\": \"true\"\n}\n},\n\"entities\": {\n\"Vehicle\": {\n\"description\": \"Entity representing a vehicle vertex\",\n\"vertex\": \"id.vehicle.string\",\n\"properties\": {\n\"type\": \"property.string\"\n},\n\"aggregate\": false\n},\n\"Manufacturer\": {\n\"description\": \"Entity representing a manufacturer vertex\",\n\"vertex\": \"id.manufacturer.string\",\n\"properties\": {\n\"name\": \"property.string\"\n},\n\"aggregate\": false\n},\n\"Job\": {\n\"description\": \"Entity representing a job vertex\",\n\"vertex\": \"id.job.string\",\n\"properties\": {\n\"type\": \"property.string\"\n},\n\"aggregate\": false\n},\n\"Person\": {\n\"description\": \"Entity representing a person vertex\",\n\"vertex\": \"id.person.string\",\n\"properties\": {\n\"name\": \"property.string\",\n\"count\": \"count.integer\"\n}\n},\n\"Place\": {\n\"description\": \"Entity representing a place vertex\",\n\"vertex\": \"id.place.string\",\n\"properties\": {\n\"name\": \"property.string\"\n},\n\"aggregate\": false\n}\n},\n\"types\": {\n\"id.person.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.place.string\": {\n\"description\": \"A basic type to hold the string id of a place entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.job.string\": {\n\"description\": \"A basic type to hold the string id of a job entity\",\n\"class\": \"java.lang.String\"\n},\n\"property.string\": {\n\"description\": \"A type to hold string properties of entities\",\n\"class\": \"java.lang.String\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n}\n},\n\"count.integer\": {\n\"description\": \"A long count that must be greater than or equal to 0.\",\n\"class\": \"java.lang.Integer\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n},\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\": true,\n\"value\": 0\n}\n]\n},\n\"true\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n}\n]\n},\n\"id.manufacturer.string\": {\n\"description\": \"A basic type to hold the string id of a manufacturer entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.vehicle.string\": {\n\"description\": \"A basic type to hold the string id of a vehicle entity\",\n\"class\": \"java.lang.String\"\n}\n}\n}\n</code></pre></p>"},{"location":"reference/operations-guide/federated-operation/#concatenatemergefunction","title":"ConcatenateMergeFunction","text":"<p>This merge function is the default merge function for the majority of operations as seen in the table above. You can also override the default merge functions for operations like we have below. It results in concantinating all the results of the operations together.</p> <p>Using the <code>ConcatenateMergeFunction</code> can give you duplicate results. This can be seen with the <code>GetTraits</code> example below.</p> Example using the GetSchema operation. <p><pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"GetSchema\"\n},\n\"graphIds\": [\"GraphA\",\"GraphB\"],\n\"mergeFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n}\n}\n</code></pre> Result: <pre><code>[\n{\n\"edges\": {\n\"Drives\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.vehicle.string\",\n\"directed\": \"true\"\n},\n\"MakeModel\": {\n\"source\": \"id.vehicle.string\",\n\"destination\": \"id.manufacturer.string\",\n\"directed\": \"true\"\n}\n},\n\"entities\": {\n\"Vehicle\": {\n\"description\": \"Entity representing a vehicle vertex\",\n\"vertex\": \"id.vehicle.string\",\n\"properties\": {\n\"type\": \"property.string\"\n},\n\"aggregate\": false\n},\n\"Manufacturer\": {\n\"description\": \"Entity representing a manufacturer vertex\",\n\"vertex\": \"id.manufacturer.string\",\n\"properties\": {\n\"name\": \"property.string\"\n},\n\"aggregate\": false\n},\n\"Person\": {\n\"description\": \"Entity representing a person vertex\",\n\"vertex\": \"id.person.string\",\n\"properties\": {\n\"name\": \"property.string\",\n\"count\": \"count.integer\"\n}\n}\n},\n\"types\": {\n\"id.person.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.manufacturer.string\": {\n\"description\": \"A basic type to hold the string id of a manufacturer entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.vehicle.string\": {\n\"description\": \"A basic type to hold the string id of a vehicle entity\",\n\"class\": \"java.lang.String\"\n},\n\"property.string\": {\n\"description\": \"A type to hold string properties of entities\",\n\"class\": \"java.lang.String\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n}\n},\n\"count.integer\": {\n\"description\": \"A long count that must be greater than or equal to 0.\",\n\"class\": \"java.lang.Integer\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n},\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\": true,\n\"value\": 0\n}\n]\n},\n\"true\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n}\n]\n}\n}\n},\n{\n\"edges\": {\n\"WorksAs\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.job.string\",\n\"directed\": \"true\"\n},\n\"LivesIn\": {\n\"source\": \"id.person.string\",\n\"destination\": \"id.place.string\",\n\"directed\": \"true\"\n}\n},\n\"entities\": {\n\"Job\": {\n\"description\": \"Entity representing a job vertex\",\n\"vertex\": \"id.job.string\",\n\"properties\": {\n\"type\": \"property.string\"\n},\n\"aggregate\": false\n},\n\"Person\": {\n\"description\": \"Entity representing a person vertex\",\n\"vertex\": \"id.person.string\",\n\"properties\": {\n\"name\": \"property.string\",\n\"count\": \"count.integer\"\n}\n},\n\"Place\": {\n\"description\": \"Entity representing a place vertex\",\n\"vertex\": \"id.place.string\",\n\"properties\": {\n\"name\": \"property.string\"\n},\n\"aggregate\": false\n}\n},\n\"types\": {\n\"id.person.string\": {\n\"description\": \"A basic type to hold the string id of a person entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.place.string\": {\n\"description\": \"A basic type to hold the string id of a place entity\",\n\"class\": \"java.lang.String\"\n},\n\"id.job.string\": {\n\"description\": \"A basic type to hold the string id of a job entity\",\n\"class\": \"java.lang.String\"\n},\n\"property.string\": {\n\"description\": \"A type to hold string properties of entities\",\n\"class\": \"java.lang.String\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n}\n},\n\"count.integer\": {\n\"description\": \"A long count that must be greater than or equal to 0.\",\n\"class\": \"java.lang.Integer\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n},\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\": true,\n\"value\": 0\n}\n]\n},\n\"true\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n}\n]\n}\n}\n}\n]\n</code></pre></p> Example using the GetTraits operation. <p><pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"GetTraits\"\n},\n\"graphIds\": [\"GraphA\",\"GraphB\"],\n\"mergeFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n}\n}\n</code></pre> Result: <pre><code>[\n\"MATCHED_VERTEX\",\n\"POST_TRANSFORMATION_FILTERING\",\n\"INGEST_AGGREGATION\",\n\"PRE_AGGREGATION_FILTERING\",\n\"TRANSFORMATION\",\n\"POST_AGGREGATION_FILTERING\",\n\"MATCHED_VERTEX\",\n\"POST_TRANSFORMATION_FILTERING\",\n\"INGEST_AGGREGATION\",\n\"PRE_AGGREGATION_FILTERING\",\n\"TRANSFORMATION\",\n\"POST_AGGREGATION_FILTERING\"\n]\n</code></pre></p> Example using the GetAllElements operation. <p><pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"GetAllElements\"\n},\n\"graphIds\": [\"GraphA\",\"GraphB\"],\n\"mergeFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n}\n}\n</code></pre> Result: <pre><code>[\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"MakeModel\",\n\"source\": \"4\",\n\"destination\": \"5\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Person\",\n\"vertex\": \"1\",\n\"properties\": {\n\"name\": \"Bob\",\n\"count\": 1\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"Drives\",\n\"source\": \"1\",\n\"destination\": \"4\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Vehicle\",\n\"vertex\": \"4\",\n\"properties\": {\n\"type\": \"Digger\"\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Manufacturer\",\n\"vertex\": \"5\",\n\"properties\": {\n\"name\": \"JCB\"\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"LivesIn\",\n\"source\": \"1\",\n\"destination\": \"3\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Person\",\n\"vertex\": \"1\",\n\"properties\": {\n\"name\": \"Bob\",\n\"count\": 1\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\": \"WorksAs\",\n\"source\": \"1\",\n\"destination\": \"3\",\n\"directed\": true,\n\"matchedVertex\": \"SOURCE\",\n\"properties\": {}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Job\",\n\"vertex\": \"2\",\n\"properties\": {\n\"type\": \"Builder\"\n}\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\": \"Place\",\n\"vertex\": \"3\",\n\"properties\": {\n\"name\": \"Bobsville\"\n}\n}\n]\n</code></pre></p>"},{"location":"reference/operations-guide/flink/","title":"Flink Operations","text":"<p>These Operations are part of the Flink library and are only available if they have been specifically enabled. This is done by registering the Flink operations and their handlers with your store. You need to add the following to your store properties file: <pre><code>gaffer.store.operation.declarations=FlinkOperationDeclarations.json\n</code></pre></p>"},{"location":"reference/operations-guide/flink/#addelementsfromfile","title":"AddElementsFromFile","text":"<p>Adds elements from a file, requires a filename and an elementGenerator. Javadoc</p>"},{"location":"reference/operations-guide/flink/#example","title":"Example","text":"JavaJSONPython <pre><code>final AddElementsFromFile op = new AddElementsFromFile.Builder()\n.filename(\"filename\")\n.generator(ElementGenerator.class)\n.parallelism(1)\n.validate(true)\n.skipInvalidElements(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddElementsFromFile\",\n\"filename\" : \"filename\",\n\"elementGenerator\" : \"ElementGenerator\",\n\"parallelism\" : 1,\n\"skipInvalidElements\" : false,\n\"validate\" : true\n}\n</code></pre> <pre><code>g.AddElementsFromFile( \nfilename=\"filename\", \nelement_generator=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nparallelism=1, \nvalidate=True, \nskip_invalid_elements=False \n)\n</code></pre>"},{"location":"reference/operations-guide/flink/#addelementsfromkafka","title":"AddElementsFromKafka","text":"<p>Adds elements from a Kafka, requires a topic, groupId, bootstrapServers and an elementGenerator. Javadoc</p>"},{"location":"reference/operations-guide/flink/#example_1","title":"Example","text":"JavaJSONPython <pre><code>final AddElementsFromKafka op = new AddElementsFromKafka.Builder()\n.bootstrapServers(\"hostname1:8080,hostname2:8080\")\n.groupId(\"groupId1\")\n.topic(\"topic1\")\n.generator(ElementGenerator.class)\n.parallelism(1)\n.validate(true)\n.skipInvalidElements(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddElementsFromKafka\",\n\"topic\" : \"topic1\",\n\"groupId\" : \"groupId1\",\n\"bootstrapServers\" : [ \"hostname1:8080,hostname2:8080\" ],\n\"elementGenerator\" : \"ElementGenerator\",\n\"parallelism\" : 1\n}\n</code></pre> <pre><code>g.AddElementsFromKafka( \ntopic=\"topic1\", \ngroup_id=\"groupId1\", \nbootstrap_servers=[ \n\"hostname1:8080,hostname2:8080\" \n], \nelement_generator=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nparallelism=1 \n)\n</code></pre>"},{"location":"reference/operations-guide/flink/#addelementsfromsocket","title":"AddElementsFromSocket","text":"<p>Adds elements from a Socket, requires a hostname, port and an elementGenerator. Javadoc</p>"},{"location":"reference/operations-guide/flink/#example_2","title":"Example","text":"JavaJSONPython <pre><code>final AddElementsFromSocket op = new AddElementsFromSocket.Builder()\n.hostname(\"localhost\")\n.port(8080)\n.delimiter(\",\")\n.generator(ElementGenerator.class)\n.parallelism(1)\n.validate(true)\n.skipInvalidElements(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddElementsFromSocket\",\n\"hostname\" : \"localhost\",\n\"port\" : 8080,\n\"elementGenerator\" : \"ElementGenerator\",\n\"delimiter\" : \",\",\n\"parallelism\" : 1,\n\"skipInvalidElements\" : false,\n\"validate\" : true\n}\n</code></pre> <pre><code>g.AddElementsFromSocket( \nhostname=\"localhost\", \nport=8080, \nelement_generator=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nparallelism=1, \nvalidate=True, \nskip_invalid_elements=False, \ndelimiter=\",\" \n)\n</code></pre>"},{"location":"reference/operations-guide/flow/","title":"Control Flow Operations","text":"<p>These Operations are used for introducing logical control flow over other Operations. They are always available.</p> <p>This directed graph is used in all the examples on this page, except for ForEach:</p> <pre><code>graph LR\n  1 --&gt; 2\n  1 --&gt; 5\n  2 --&gt; 5\n  3 --&gt; 2\n  3 --&gt; 4\n  4 --&gt; 7\n  5 --&gt; 6\n  6 --&gt; 3\n  6 --&gt; 7\n  8 --&gt; 5\n  8 --&gt; 8</code></pre>"},{"location":"reference/operations-guide/flow/#if","title":"If","text":"<p>Conditional statement which executes a certain operation if the condition is satisfied and a different operation otherwise. Javadoc</p> Conditionally get elements or limit current results <p>This example will take the vertices adjacent to the Entity with id 2, and if there are fewer than 5 results, they will be passed into a GetElements operation.Otherwise, there will simply only be 5 results returned.</p> JavaJSONPython <pre><code>final OperationChain&lt;Object&gt; opChain = new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.input(new EntitySeed(2))\n.build())\n.then(new If.Builder&lt;&gt;()\n.conditional(new IsShorterThan(5))\n.then(new OperationChain.Builder()\n.first(new GetElements())\n.then(new Limit&lt;&gt;(5))\n.build())\n.otherwise(new Limit&lt;&gt;(5))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.If\",\n\"conditional\" : {\n\"predicate\" : {\n\"class\" : \"IsShorterThan\",\n\"maxLength\" : 5,\n\"orEqualTo\" : false\n}\n},\n\"then\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 5,\n\"truncate\" : true\n} ]\n},\n\"otherwise\" : {\n\"class\" : \"Limit\",\n\"resultLimit\" : 5,\n\"truncate\" : true\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.If( \nconditional=g.Conditional( \npredicate=g.IsShorterThan( \nmax_length=5, \nor_equal_to=False \n) \n), \nthen=g.OperationChain( \noperations=[ \ng.GetElements(), \ng.Limit( \nresult_limit=5, \ntruncate=True \n) \n] \n), \notherwise=g.Limit( \nresult_limit=5, \ntruncate=True \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=6,destination=3,directed=true,matchedVertex=DESTINATION,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;9]]\nEdge[source=5,destination=6,directed=true,matchedVertex=SOURCE,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;11]]\nEdge[source=1,destination=5,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;6]]\nEntity[vertex=5,group=cardinality,properties=Properties[hllp=&lt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus&gt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@7c0a5be5,count=&lt;java.lang.Integer&gt;3,edgeGroup=&lt;java.util.TreeSet&gt;[edge1]]]\nEntity[vertex=1,group=entity1,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 9\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 6\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Add named operation containing if operation with parameter <p>Here we create and add a NamedOperation, containing an If operation with a parameter. This parameter can be configured so that the optional GetElements with the filter can be executed, otherwise it will just continue to the next GetElements.</p> JavaJSONPython <pre><code>final String opChainString = \"{\" +\n\"\\\"operations\\\" : [ {\\n\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\"\\n\" +\n\"    }, {\\n\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.If\\\",\\n\" +\n\"      \\\"condition\\\" : \\\"${enableFiltering}\\\",\\n\" +\n\"      \\\"then\\\" : {\\n\" +\n\"        \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\\\",\\n\" +\n\"        \\\"view\\\" : {\\n\" +\n\"          \\\"entities\\\" : {\\n\" +\n\"            \\\"entity\\\" : {\\n\" +\n\"              \\\"preAggregationFilterFunctions\\\" : [ {\\n\" +\n\"                \\\"selection\\\" : [ \\\"count\\\" ],\\n\" +\n\"                \\\"predicate\\\" : {\\n\" +\n\"                  \\\"class\\\" : \\\"uk.gov.gchq.koryphe.impl.predicate.IsLessThan\\\",\\n\" +\n\"                  \\\"orEqualTo\\\" : true,\\n\" +\n\"                  \\\"value\\\" : 10\\n\" +\n\"                }\\n\" +\n\"              } ]\\n\" +\n\"            }\\n\" +\n\"          }\\n\" +\n\"        }\\n\" +\n\"      }\\n\" +\n\"    }, {\\n\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\\\"\\n\" +\n\"    } ]\" +\n\"}\";\nParameterDetail param = new ParameterDetail.Builder()\n.defaultValue(true)\n.description(\"Flag for enabling filtering\")\n.valueClass(boolean.class)\n.build();\njava.util.Map&lt;String, ParameterDetail&gt; parameterMap = Maps.newHashMap();\nparameterMap.put(\"enableFiltering\", param);\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n.operationChain(opChainString)\n.description(\"2 hop query with optional filtering by count\")\n.name(\"2-hop-with-optional-filtering\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.parameters(parameterMap)\n.overwrite()\n.score(4)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop-with-optional-filtering\",\n\"description\" : \"2 hop query with optional filtering by count\",\n\"score\" : 4,\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.If\",\n\"condition\" : \"${enableFiltering}\",\n\"then\" : {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\",\n\"view\" : {\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsLessThan\",\n\"orEqualTo\" : true,\n\"value\" : 10\n}\n} ]\n}\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\"\n} ]\n},\n\"overwriteFlag\" : true,\n\"parameters\" : {\n\"enableFiltering\" : {\n\"description\" : \"Flag for enabling filtering\",\n\"defaultValue\" : true,\n\"valueClass\" : \"boolean\",\n\"required\" : false\n}\n},\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds(), \ng.If( \ncondition=\"${enableFiltering}\", \nthen=g.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsLessThan( \nvalue=10, \nor_equal_to=True \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n) \n) \n), \ng.GetElements() \n] \n), \noperation_name=\"2-hop-with-optional-filtering\", \ndescription=\"2 hop query with optional filtering by count\", \nread_access_roles=[ \n\"read-user\" \n], \nwrite_access_roles=[ \n\"write-user\" \n], \noverwrite_flag=True, \nscore=4, \nparameters=[ \ng.NamedOperationParameter( \nname=\"enableFiltering\", \nvalue_class=\"boolean\", \ndescription=\"Flag for enabling filtering\", \ndefault_value=True, \nrequired=False \n) \n] \n)\n</code></pre> Parameterised named operation containing if operation <p>This example then runs the NamedOperation, providing both the input, and the value of the parameter via a Map.</p> JavaJSONPython <pre><code>final java.util.Map&lt;String, Object&gt; parameterValues = Maps.newHashMap();\nparameterValues.put(\"enableFiltering\", true);\nfinal NamedOperation&lt;EntityId, CloseableIterable&lt;? extends Element&gt;&gt; namedOp =\nnew NamedOperation.Builder&lt;EntityId, CloseableIterable&lt;? extends Element&gt;&gt;()\n.name(\"2-hop-with-optional-filtering\")\n.input(new EntitySeed(6))\n.parameters(parameterValues)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 6\n} ],\n\"operationName\" : \"2-hop-with-optional-filtering\",\n\"parameters\" : {\n\"enableFiltering\" : true\n}\n}\n</code></pre> <pre><code>g.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=6 \n) \n], \noperation_name=\"2-hop-with-optional-filtering\", \nparameters={'enableFiltering': True} \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=6,destination=3,directed=true,matchedVertex=DESTINATION,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;9]]\nEntity[vertex=7,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=4,destination=7,directed=true,matchedVertex=DESTINATION,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;11]]\nEdge[source=6,destination=7,directed=true,matchedVertex=DESTINATION,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;13]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=7,group=cardinality,properties=Properties[hllp=&lt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus&gt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@4fa6c1be,count=&lt;java.lang.Integer&gt;2,edgeGroup=&lt;java.util.TreeSet&gt;[edge1]]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;7]]\nEntity[vertex=3,group=cardinality,properties=Properties[hllp=&lt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus&gt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@615d6edc,count=&lt;java.lang.Integer&gt;3,edgeGroup=&lt;java.util.TreeSet&gt;[edge1]]]\nEdge[source=3,destination=2,directed=true,matchedVertex=SOURCE,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;5]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 9\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 7,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 4,\n\"destination\" : 7,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 11\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 7,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 13\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 7,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQL9A/oZ\",\n\"cardinality\" : 2\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 3,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4H/BE=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 5\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/flow/#while","title":"While","text":"<p>Runs an operation repeatedly until a condition is no longer true or a maximum number of runs (repeats) has been reached. Javadoc</p> Run an operation 3 times <p>This example will run the GetAdjacentIds operation 3 times.</p> JavaJSONPython <pre><code>final While&lt;Iterable&lt;EntityId&gt;, CloseableIterable&lt;? extends EntityId&gt;&gt; operation = new While.Builder&lt;Iterable&lt;EntityId&gt;, CloseableIterable&lt;? extends EntityId&gt;&gt;()\n.input(Lists.newArrayList(new EntitySeed(1)))\n.condition(true)\n.maxRepeats(3)\n.operation(new GetAdjacentIds.Builder()\n.inOutType(IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"While\",\n\"operation\" : {\n\"class\" : \"GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n},\n\"maxRepeats\" : 3,\n\"condition\" : true,\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ]\n}\n</code></pre> <pre><code>g.While( \nmax_repeats=3, \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \ncondition=True, \noperation=g.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=6]\nEntitySeed[vertex=3]\nEntitySeed[vertex=7]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 6\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 7\n} ]\n</code></pre> Run a while operation within a get walks <p>This example will run a GetWalks operation with 3 hops.</p> JavaJSONPython <pre><code>final GetWalks operation = new Builder()\n.input(new EntitySeed(1))\n.operations(new While.Builder&lt;Iterable&lt;EntityId&gt;, CloseableIterable&lt;? extends EntityId&gt;&gt;()\n.condition(true)\n.maxRepeats(3)\n.operation(new GetElements.Builder()\n.inOutType(IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"While\",\n\"operation\" : {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n},\n\"maxRepeats\" : 3,\n\"condition\" : true\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.While( \nmax_repeats=3, \ncondition=True, \noperation=g.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 6 --&gt; 3 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 6 --&gt; 7 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 5 --&gt; 6 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 9\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"3\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 7,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"7\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ ]\n} ]\n} ]\n</code></pre> Run until an end result is found <p>This example will keep running GetAdjacentIds until the results contain a vertex with value 7.</p> JavaJSONPython <pre><code>final While&lt;Iterable&lt;EntityId&gt;, CloseableIterable&lt;? extends EntityId&gt;&gt; operation = new While.Builder&lt;Iterable&lt;EntityId&gt;, CloseableIterable&lt;? extends EntityId&gt;&gt;()\n.input(Lists.newArrayList(new EntitySeed(1)))\n.conditional(new Not&lt;&gt;(new CollectionContains(new EntitySeed(7))), new ToSet&lt;&gt;())\n.maxRepeats(20)\n.operation(new GetAdjacentIds.Builder()\n.inOutType(IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"While\",\n\"conditional\" : {\n\"transform\" : {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n},\n\"predicate\" : {\n\"class\" : \"Not\",\n\"predicate\" : {\n\"class\" : \"CollectionContains\",\n\"value\" : {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 7\n}\n}\n}\n},\n\"operation\" : {\n\"class\" : \"GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n},\n\"maxRepeats\" : 20,\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ]\n}\n</code></pre> <pre><code>g.While( \nmax_repeats=20, \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation=g.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \nconditional=g.Conditional( \npredicate=g.Not( \npredicate=g.CollectionContains( \nvalue=g.EntitySeed( \nvertex=7 \n) \n) \n), \ntransform=g.ToSet() \n) \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=6]\nEntitySeed[vertex=3]\nEntitySeed[vertex=7]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 6\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 7\n} ]\n</code></pre>"},{"location":"reference/operations-guide/flow/#foreach","title":"ForEach","text":"<p>Runs supplied operation on all items in an Iterable input. Javadoc</p> ForEach Graph <pre><code>graph TD\n1(1, count=3) -- count=3 --&gt; 2\n1 -- count=1 --&gt; 4\n2(2, count=1) -- count=2 --&gt; 3\n2 -- count=1 --&gt; 4(4, count=1)\n2 -- count=1 --&gt; 5(5, count=3)\n3(3, count=2) -- count=4 --&gt; 4</code></pre> Example of ForEach in a chain JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.input(new EntitySeed(1))\n.build())\n.then(new ForEach.Builder&lt;&gt;()\n.operation(new OperationChain.Builder()\n.first(new ToSingletonList&lt;EntitySeed&gt;())\n.then(new GetAdjacentIds())\n.then(new ToVertices())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ]\n}, {\n\"class\" : \"ForEach\",\n\"operation\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"ToSingletonList\"\n}, {\n\"class\" : \"GetAdjacentIds\"\n}, {\n\"class\" : \"ToVertices\"\n} ]\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n] \n), \ng.ForEach( \noperation=g.OperationChain( \noperations=[ \ng.ToSingletonList(), \ng.GetAdjacentIds(), \ng.ToVertices() \n] \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ 2 --&gt; 3 --&gt; 1 ]\n[ 3 --&gt; 4 --&gt; 5 --&gt; 1 ]\n</code></pre> <pre><code>[ [ 2, 3, 1 ], [ 3, 4, 5, 1 ] ]\n</code></pre>"},{"location":"reference/operations-guide/generate/","title":"Generate Operations","text":"<p>These Operations are used for generating edges, elements and objects. They are always available.</p> <p>This directed graph is used in all the examples on this page, except for GetWalks:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/generate/#generateelements","title":"GenerateElements","text":"<p>Generates elements from objects using provided generators. Javadoc</p> Example generating elements from Strings JavaJSONPython <pre><code>final GenerateElements&lt;String&gt; operation = new GenerateElements.Builder&lt;String&gt;()\n.input(\"1,1\", \"1,2,1\")\n.generator(new ElementGenerator())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GenerateElements\",\n\"input\" : [ \"1,1\", \"1,2,1\" ],\n\"elementGenerator\" : {\n\"class\" : \"ElementGenerator\"\n}\n}\n</code></pre> <pre><code>g.GenerateElements( \nelement_generator=g.ElementGenerator( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nfields={'class': 'uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator'} \n), \ninput=[ \n\"1,1\", \n\"1,2,1\" \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example generating elements from domain objects JavaJSONPython <pre><code>final GenerateElements&lt;Object&gt; operation = new GenerateElements.Builder&lt;&gt;()\n.input(new DomainObject1(1, 1),\nnew DomainObject2(1, 2, 1))\n.generator(new DomainObjectGenerator())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GenerateElements\",\n\"input\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject1\",\n\"a\" : 1,\n\"c\" : 1\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject2\",\n\"a\" : 1,\n\"b\" : 2,\n\"c\" : 1\n} ],\n\"elementGenerator\" : {\n\"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObjectGenerator\"\n}\n}\n</code></pre> <pre><code>g.GenerateElements( \nelement_generator=g.ElementGenerator( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObjectGenerator\", \nfields={'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObjectGenerator'} \n), \ninput=[ \n{'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject1', 'a': 1, 'c': 1}, \n{'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject2', 'a': 1, 'b': 2, 'c': 1} \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/generate/#generateobjects","title":"GenerateObjects","text":"<p>Generates objects from elements using provided generators. Javadoc</p> Example generating Strings from elements JavaJSONPython <pre><code>final GenerateObjects&lt;String&gt; operation = new GenerateObjects.Builder&lt;String&gt;()\n.input(new Entity.Builder()\n.group(\"entity\")\n.vertex(6)\n.property(\"count\", 1)\n.build(),\nnew Edge.Builder()\n.group(\"edge\")\n.source(5).dest(6).directed(true)\n.property(\"count\", 1)\n.build())\n.generator(new ObjectGenerator())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GenerateObjects\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Edge\",\n\"group\" : \"edge\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"elementGenerator\" : {\n\"class\" : \"ObjectGenerator\"\n}\n}\n</code></pre> <pre><code>g.GenerateObjects( \nelement_generator=g.ElementGenerator( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.generator.ObjectGenerator\", \nfields={'class': 'uk.gov.gchq.gaffer.doc.operation.generator.ObjectGenerator'} \n), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=6 \n), \ng.Edge( \ngroup=\"edge\", \nproperties={'count': 1}, \nsource=5, \ndestination=6, \ndirected=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>6,1\n5,6,1\n</code></pre> <pre><code>[ \"6,1\", \"5,6,1\" ]\n</code></pre> Example generating domain objects from elements JavaJSONPython <pre><code>final GenerateObjects&lt;Object&gt; operation = new GenerateObjects.Builder&lt;&gt;()\n.input(new Entity.Builder()\n.group(\"entity\")\n.vertex(6)\n.property(\"count\", 1)\n.build(),\nnew Edge.Builder()\n.group(\"edge\")\n.source(5).dest(6).directed(true)\n.property(\"count\", 1)\n.build())\n.generator(new DomainObjectGenerator())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GenerateObjects\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Edge\",\n\"group\" : \"edge\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"elementGenerator\" : {\n\"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateObjectsExample$DomainObjectGenerator\"\n}\n}\n</code></pre> <pre><code>g.GenerateObjects( \nelement_generator=g.ElementGenerator( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.GenerateObjectsExample$DomainObjectGenerator\", \nfields={'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateObjectsExample$DomainObjectGenerator'} \n), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=6 \n), \ng.Edge( \ngroup=\"edge\", \nproperties={'count': 1}, \nsource=5, \ndestination=6, \ndirected=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>GenerateObjectsExample.DomainObject1[a=6,c=1]\nGenerateObjectsExample.DomainObject2[a=5,b=6,c=1]\n</code></pre> <pre><code>[ {\n\"a\" : 6,\n\"c\" : 1\n}, {\n\"a\" : 5,\n\"b\" : 6,\n\"c\" : 1\n} ]\n</code></pre>"},{"location":"reference/operations-guide/get/","title":"Get Operations","text":"<p>These Operations are used for fetching elements from the store backing a graph. They are available by default.</p> <p>This directed graph is used in all the examples on this page, except for GetWalks:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/get/#getelements","title":"GetElements","text":"<p>Gets elements related to provided seeds. Javadoc</p> Example fetching entities and edges by ID <p>Get entities and edges by entity id 2 and edge id 2 to 3.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2), new EdgeSeed(2, 3, DirectedType.EITHER))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n} ]\n}\n</code></pre> <pre><code>g.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=2 \n), \ng.EdgeSeed( \nsource=2, \ndestination=3, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example fetching entities and edges by ID and count <p>Get entities and edges by entity id 2 and edge id 2 to 3 with count more than 1.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2), new EdgeSeed(2, 3, DirectedType.EITHER))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(1))\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(1))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 1\n}\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 1\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=1, \nor_equal_to=False \n) \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=1, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n), \ng.EdgeSeed( \nsource=2, \ndestination=3, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example fetching entities and edges related to vertex <p>Get entities and edges that are related to vertex 2.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}\n</code></pre> <pre><code>g.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example fetching entities and edges related to edge <p>Get all entities and edges that are related to edge 1 to 2.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EdgeSeed(1, 2, DirectedType.EITHER))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : 1,\n\"destination\" : 2,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n} ]\n}\n</code></pre> <pre><code>g.GetElements( \ninput=[ \ng.EdgeSeed( \nsource=1, \ndestination=2, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example fetching entities and edges related to edge with count <p>Get all entities and edges that are related to edge 1 to 2 with count more than 1.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EdgeSeed(1, 2, DirectedType.EITHER))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(1))\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(1))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : 1,\n\"destination\" : 2,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 1\n}\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 1\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=1, \nor_equal_to=False \n) \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=1, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EdgeSeed( \nsource=1, \ndestination=2, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example fetching related entities with count <p>Get entities related to 2 with count less than 2 or more than 5.</p> <p>When using an <code>Or</code> predicate with a single selected value you can just do <code>select(propertyName)</code> then <code>execute(new Or(predicates))</code>.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2), new EdgeSeed(2, 3, DirectedType.EITHER))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(\nnew ElementFilter.Builder()\n.select(\"count\")\n.execute(new Or&lt;&gt;(new IsLessThan(2), new IsMoreThan(5)))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n} ],\n\"view\" : {\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n\"predicates\" : [ {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}, {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 5\n} ]\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.Or( \npredicates=[ \ng.IsLessThan( \nvalue=2, \nor_equal_to=False \n), \ng.IsMoreThan( \nvalue=5, \nor_equal_to=False \n) \n] \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n), \ng.EdgeSeed( \nsource=2, \ndestination=3, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example fetching related entities with multiple count <p>Get edges related to 2 when source is less than 2 or destination is more than 3.</p> <p>When using an <code>Or</code> predicate with a multiple selected values, it is more complicated. First, you need to select all the values you want: <code>select(a, b, c)</code>. This will create an array of the selected values, <code>[a, b, c]</code>. You then need to use the <code>Or.Builder</code> to build your <code>Or</code> predicate, using <code>.select()</code> then <code>.execute()</code>. When selecting values in the <code>Or.Builder</code> you need to refer to the position in the <code>[a,b,c]</code> array. So to use property <code>a</code>, use position 0 - <code>select(0)</code>.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2))\n.view(new View.Builder()\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(\nnew ElementFilter.Builder()\n.select(IdentifierType.SOURCE.name(), IdentifierType.DESTINATION.name())\n.execute(new Or.Builder&lt;&gt;()\n.select(0)\n.execute(new IsLessThan(2))\n.select(1)\n.execute(new IsMoreThan(3))\n.build())\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"SOURCE\", \"DESTINATION\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n\"predicates\" : [ {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 0 ],\n\"predicate\" : {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n}, {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 1 ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 3\n}\n} ]\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"SOURCE\", \n\"DESTINATION\" \n], \npredicate=g.Or( \npredicates=[ \ng.NestedPredicate( \nselection=[ \n0 \n], \npredicate=g.IsLessThan( \nvalue=2, \nor_equal_to=False \n) \n), \ng.NestedPredicate( \nselection=[ \n1 \n], \npredicate=g.IsMoreThan( \nvalue=3, \nor_equal_to=False \n) \n) \n] \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example fetching edges and including only specified properties in the results <p>Get entities and return only some properties.</p> <p>Note that because there are only two properties prior to asking to include only <code>vertex|count</code>, this returns the same results as asking to exclude <code>count</code>.</p> JavaJSONPython <pre><code>final Concat concat = new Concat();\nconcat.setSeparator(\"|\");\nfinal GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2))\n.view(new View.Builder()\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.transientProperty(\"vertex|count\", String.class)\n.properties(\"vertex|count\")\n.transformer(new ElementTransformer.Builder()\n.select(IdentifierType.SOURCE.name(), \"count\")\n.execute(concat)\n.project(\"vertex|count\")\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"transientProperties\" : {\n\"vertex|count\" : \"String\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"SOURCE\", \"count\" ],\n\"function\" : {\n\"class\" : \"Concat\",\n\"separator\" : \"|\"\n},\n\"projection\" : [ \"vertex|count\" ]\n} ],\n\"properties\" : [ \"vertex|count\" ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \ntransient_properties={'vertex|count': 'java.lang.String'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"SOURCE\", \n\"count\" \n], \nfunction=g.Concat( \nseparator=\"|\" \n), \nprojection=[ \n\"vertex|count\" \n] \n) \n], \nproperties=[ \n\"vertex|count\" \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;1|3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|2\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|1\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"vertex|count\" : \"1|3\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|1\"\n}\n} ]\n</code></pre> Example fetching edges and excluding specified properties from the results <p>Get entities and exclude properties.</p> <p>Note that because there are only two properties prior to the exclusion, this returns the same results as asking to include only <code>vertex|count</code>.</p> JavaJSONPython <pre><code>final Concat concat = new Concat();\nconcat.setSeparator(\"|\");\nfinal GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2))\n.view(new View.Builder()\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.transientProperty(\"vertex|count\", String.class)\n.excludeProperties(\"count\")\n.transformer(new ElementTransformer.Builder()\n.select(IdentifierType.SOURCE.name(), \"count\")\n.execute(concat)\n.project(\"vertex|count\")\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"transientProperties\" : {\n\"vertex|count\" : \"String\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"SOURCE\", \"count\" ],\n\"function\" : {\n\"class\" : \"Concat\",\n\"separator\" : \"|\"\n},\n\"projection\" : [ \"vertex|count\" ]\n} ],\n\"excludeProperties\" : [ \"count\" ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \ntransient_properties={'vertex|count': 'java.lang.String'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"SOURCE\", \n\"count\" \n], \nfunction=g.Concat( \nseparator=\"|\" \n), \nprojection=[ \n\"vertex|count\" \n] \n) \n], \nexclude_properties=[ \n\"count\" \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;1|3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|2\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|1\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"vertex|count\" : \"1|3\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|1\"\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/get/#getadjacentids","title":"GetAdjacentIds","text":"<p>Performs a single hop down related edges. Javadoc</p> Example fetching adjacent IDs from specified vertex <p>Get adjacent ids from vertex 2.</p> JavaJSONPython <pre><code>final GetAdjacentIds operation = new GetAdjacentIds.Builder()\n.input(new EntitySeed(2))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}\n</code></pre> <pre><code>g.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=3]\nEntitySeed[vertex=4]\nEntitySeed[vertex=5]\nEntitySeed[vertex=1]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 4\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 5\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 1\n} ]\n</code></pre> Example fetching adjacent IDs from along outbound edges of specified vertex <p>Get adjacent ids along outbound edges from vertex 2</p> JavaJSONPython <pre><code>final GetAdjacentIds operation = new GetAdjacentIds.Builder()\n.input(new EntitySeed(2))\n.inOutType(IncludeIncomingOutgoingType.OUTGOING)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}\n</code></pre> <pre><code>g.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=3]\nEntitySeed[vertex=4]\nEntitySeed[vertex=5]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 4\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 5\n} ]\n</code></pre> Example fetching adjacent IDs from along outbound edges of specified vertex with count <p>Get adjacent ids along outbound edges from vertex 2 with count greater than 1.</p> JavaJSONPython <pre><code>final GetAdjacentIds operation = new GetAdjacentIds.Builder()\n.input(new EntitySeed(2))\n.inOutType(IncludeIncomingOutgoingType.OUTGOING)\n.view(new View.Builder()\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(1))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 1\n}\n} ]\n}\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}\n</code></pre> <pre><code>g.GetAdjacentIds( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=1, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=3]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n} ]\n</code></pre>"},{"location":"reference/operations-guide/get/#getallelements","title":"GetAllElements","text":"<p>Gets all elements, optionally using a provided View. Javadoc</p> Example fetching everything in the graph JavaJSONFull JSONPython <pre><code>final GetAllElements operation = new GetAllElements();\n</code></pre> <pre><code>{\n\"class\" : \"GetAllElements\"\n}\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n}\n</code></pre> <pre><code>g.GetAllElements()\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example fetching everything with a count greater than 2 JavaJSONPython <pre><code>final GetAllElements operation = new GetAllElements.Builder()\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetAllElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n) \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/get/#getwalks","title":"GetWalks","text":"<p>Gets the walks/paths for a given vertex. Javadoc</p> GetWalks Graph <pre><code>graph LR\n  1 --&gt; 2\n  1 --&gt; 5\n  2 --&gt; 5\n  3 --&gt; 2\n  3 --&gt; 4\n  4 --&gt; 7\n  5 --&gt; 6\n  6 --&gt; 3\n  6 --&gt; 7\n  8 --&gt; 5\n  8 --&gt; 8</code></pre> <p>The examples for GetWalks use a modified graph. This graph contains two different edge groups, each with a modified count property. The count is set to the sum of the source and destination vertices. Additionally, the edge group is determined by whether this count property is even (group edge) or odd (group edge1).</p> Example getting walks <p>Gets all of the Walks of length 2 which start from vertex 1, with the added restriction that all edges must be traversed using the source as the matched vertex.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 6 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 5 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"5\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with incoming outgoing flags <p>Gets all of the Walks of length 2 which start from vertex 1. The IncludeIncomingOutgoingType flag can be used to determine which edge direction the Walk follows for each hop.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 8 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 2 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 3 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 6\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"1\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"1\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 5\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"3\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with filtering <p>Gets all of the Walks of length 2 which start from vertex 1. This example demonstrates the use of pre-aggregation filters to select which edges to traverse based on a property on the edge.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.view(new View.Builder().edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(3))\n.build())\n.build())\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder().edge(\"edge1\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(8))\n.build())\n.build())\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 3\n}\n} ]\n}\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge1\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 8\n}\n} ]\n}\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=3, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge1\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=8, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 8 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ ]\n}, {\n\"5\" : [ ]\n}, {\n\"8\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with entities <p>Gets all of the Walks of length 2 which start from vertex 1, with all of the entities which are attached to the vertices found along the way.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.view(new View.Builder().edge(\"edge\")\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder().edge(\"edge1\")\n.entity(\"entity1\")\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n},\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge1\" : { }\n},\n\"entities\" : {\n\"entity1\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 8 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 2 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n} ]\n} ]\n</code></pre> Example getting walks with filtering on cardinality entities from first hop <p>Gets all of the Walks of length 2 which start from vertex 5, where the results of the first hop are filtered based on the cardinality entities in the graph.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new OperationChain.Builder()\n.first(new GetElements.Builder()\n.view(new View.Builder()\n.entity(\"cardinality\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"edgeGroup\")\n.execute(new IsEqual(CollectionUtil.treeSet(\"edge\")))\n.build())\n.groupBy()\n.postAggregationFilter(new ElementFilter.Builder()\n.select(\"hllp\")\n.execute(new HyperLogLogPlusIsLessThan(2))\n.build())\n.build())\n.build())\n.build())\n.then(new GetElements.Builder()\n.view(new View.Builder()\n.edges(Lists.newArrayList(\"edge\", \"edge1\"))\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.edges(Lists.newArrayList(\"edge\", \"edge1\"))\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(5))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 5\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"entities\" : {\n\"cardinality\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"edgeGroup\" ],\n\"predicate\" : {\n\"class\" : \"IsEqual\",\n\"value\" : {\n\"TreeSet\" : [ \"edge\" ]\n}\n}\n} ],\n\"groupBy\" : [ ],\n\"postAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"hllp\" ],\n\"predicate\" : {\n\"class\" : \"HyperLogLogPlusIsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n}\n}\n}, {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { },\n\"edge1\" : { }\n},\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { },\n\"edge1\" : { }\n},\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=5 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"cardinality\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"edgeGroup\" \n], \npredicate=g.IsEqual( \nvalue={'java.util.TreeSet': ['edge']} \n) \n) \n], \npost_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"hllp\" \n], \npredicate=g.HyperLogLogPlusIsLessThan( \nvalue=2, \nor_equal_to=False \n) \n) \n], \ngroup_by=[ \n] \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n), \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n), \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 5 --&gt; 2 --&gt; 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 5 --&gt; 2 --&gt; 3 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n} ] ],\n\"entities\" : [ {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 5\n}\n} ] ],\n\"entities\" : [ {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"3\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n} ]\n} ]\n} ]\n</code></pre> Example getting walks with filtering on cardinality entities contained in walk <p>Gets all of the Walks of length 2 which start from vertex 5, where each Walk returned in the results is filtered based on total of the count property on the walks' edges being less than 11.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.view(new View.Builder()\n.edges(Lists.newArrayList(\"edge\", \"edge1\"))\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.edges(Lists.newArrayList(\"edge\", \"edge1\"))\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.conditional(new Conditional(\nnew IsLessThan(11),\nnew OperationChain.Builder()\n.first(new Map.Builder&lt;&gt;()\n.first(new ExtractWalkEdges())\n.then(new IterableConcat())\n.build())\n.then(new ForEach.Builder&lt;&gt;()\n.operation(new Map.Builder&lt;&gt;()\n.first(new ExtractProperty(\"count\"))\n.build())\n.build())\n.then(new Reduce.Builder&lt;&gt;()\n.aggregateFunction(new Sum())\n.build())\n.build()))\n.input(new EntitySeed(5))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 5\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { },\n\"edge1\" : { }\n},\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { },\n\"edge1\" : { }\n},\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"conditional\" : {\n\"transform\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Map\",\n\"functions\" : [ {\n\"class\" : \"ExtractWalkEdges\"\n}, {\n\"class\" : \"IterableConcat\"\n} ]\n}, {\n\"class\" : \"ForEach\",\n\"operation\" : {\n\"class\" : \"Map\",\n\"functions\" : [ {\n\"class\" : \"ExtractProperty\",\n\"name\" : \"count\"\n} ]\n}\n}, {\n\"class\" : \"Reduce\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n} ]\n},\n\"predicate\" : {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 11\n}\n},\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=5 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n), \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n), \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000, \nconditional=g.Conditional( \npredicate=g.IsLessThan( \nvalue=11, \nor_equal_to=False \n), \ntransform=g.OperationChain( \noperations=[ \ng.Map( \nfunctions=[ \ng.ExtractWalkEdges(), \ng.IterableConcat() \n] \n), \ng.ForEach( \noperation=g.Map( \nfunctions=[ \ng.ExtractProperty( \nname=\"count\" \n) \n] \n) \n), \ng.Reduce( \naggregate_function=g.Sum() \n) \n] \n) \n) \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 5 --&gt; 2 --&gt; 1 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n} ] ],\n\"entities\" : [ {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n} ]\n} ]\n</code></pre> Example getting walks with multiple groups <p>Gets all of the Walks of length 2 which start from vertex 1. The IncludeIncomingOutgoingType flag can be used to determine which edge direction the Walk follows for each hop. Additionally, the group set in the view is used to only travel down certain edges in each hop.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.edge(\"edge1\")\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge1\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 8 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 2 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ ]\n}, {\n\"5\" : [ ]\n}, {\n\"8\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ ]\n}, {\n\"5\" : [ ]\n}, {\n\"2\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with loops <p>Gets all of the Walks of length 6 which start from vertex 1, with the added restriction that all edges must be traversed using the source as the matched vertex. This demonstrates the behaviour when previously traversed edges are encountered again.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 6 --&gt; 3 --&gt; 2 --&gt; 5 --&gt; 6 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 5 --&gt; 6 --&gt; 3 --&gt; 4 --&gt; 7 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 5 --&gt; 6 --&gt; 3 --&gt; 2 --&gt; 5 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 9\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 5\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"3\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 3,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4H/BE=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 9\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 4,\n\"destination\" : 7,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"3\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 3,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4H/BE=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"4\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 4,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQL9CPoD\",\n\"cardinality\" : 2\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"7\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 9\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 5\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"3\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 3,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4H/BE=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with self loops <p>Gets all of the Walks of length 3 which start from vertex 8, with the added restriction that all edges must be traversed using the source as the matched vertex. This demonstrates the behaviour when self loops exist in the graph.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.input(new EntitySeed(8))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 8\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=8 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 8 --&gt; 8 --&gt; 8 --&gt; 8 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 8 --&gt; 8 --&gt; 8 --&gt; 5 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 8 --&gt; 8 --&gt; 5 --&gt; 6 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 8 --&gt; 5 --&gt; 6 --&gt; 3 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 8 --&gt; 5 --&gt; 6 --&gt; 7 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 9\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"3\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 7,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"7\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with additional operations <p>Gets all of the Walks of length 2 which start from vertex 5, where an additional operation is inserted between the GetElements operations used to retrieve elements.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new OperationChain(new GetElements.Builder()\n.view(new View.Builder()\n.edges(Lists.newArrayList(\"edge\", \"edge1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build(),\nnew Sort.Builder()\n.comparators(new ElementPropertyComparator.Builder()\n.property(\"count\")\n.build())\n.build()),\nnew GetElements.Builder()\n.view(new View.Builder()\n.edge(\"edge1\")\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(5))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 5\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { },\n\"edge1\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n}, {\n\"class\" : \"Sort\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ ],\n\"reversed\" : false\n} ],\n\"deduplicate\" : true\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge1\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=5 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n), \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n), \ng.Sort( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n], \nproperty=\"count\", \nreversed=False \n) \n], \ndeduplicate=True \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 5 --&gt; 2 --&gt; 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 5 --&gt; 2 --&gt; 3 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n} ] ],\n\"entities\" : [ {\n\"5\" : [ ]\n}, {\n\"2\" : [ ]\n}, {\n\"1\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 5\n}\n} ] ],\n\"entities\" : [ {\n\"5\" : [ ]\n}, {\n\"2\" : [ ]\n}, {\n\"3\" : [ ]\n} ]\n} ]\n</code></pre>"},{"location":"reference/operations-guide/hdfs/","title":"HDFS Operations","text":"<p>These Operations are used with HDFS.</p>"},{"location":"reference/operations-guide/hdfs/#addelementsfromhdfs","title":"AddElementsFromHdfs","text":"<p>Operation for adding Elements from HDFS. Javadoc</p> <p>This operation must be run as a Hadoop Job. So you will need to package up a shaded jar containing a main method that creates an instance of Graph and executes the operation. It can then be run with: </p> <pre><code>hadoop jar custom-shaded-jar.jar\n</code></pre> <p>When running an AddElementsFromHdfs on Accumulo, if you do not specify 'useProvidedSplits' and the Accumulo table does not have a full set of split points then this operation will first sample the input data, generate split points and set them on the Accumulo table. It does this by delegating to 'SampleDataForSplitPoints' and class <code>uk.gov.gchq.gaffer.operation.impl.SplitStoreFromFile</code>.</p> <p>Specifying the number of reducers within the Job has now been deprecated, and instead it is preferred to set the minimum and/or maximum number of reducers. Most users should not need to set the min or max number of reducers and simply leave the Store to pick the optimal number. The Accumulo Store does this by using the number of tablet servers. If you choose to set a min or max number of reducers then the Store will try to use a number within that range. If there is no optimal number within the provided range an exception is thrown.</p>"},{"location":"reference/operations-guide/hdfs/#example-adding-elements-from-hdfs-main-method","title":"Example adding elements from HDFS - Main Method","text":"<p>Example content for a main method that takes 5 arguments and runs an AddElementsFromHdfs.</p> Java <pre><code>if (5 != args.length) {\nSystem.err.println(\"Usage: hadoop jar custom-hdfs-import-&lt;version&gt;-shaded.jar &lt;inputPath&gt; &lt;outputPath&gt; &lt;failurePath&gt; &lt;schemaPath&gt; &lt;storePropertiesPath&gt;\");\nSystem.exit(1);\n}\nfinal String inputPath = args[0];\nfinal String outputPath = args[1];\nfinal String failurePath = args[2];\nfinal String schemaPath = args[3];\nfinal String storePropertiesPath = args[4];\nfinal Graph graph = new Graph.Builder()\n.storeProperties(storePropertiesPath)\n.addSchemas(Paths.get(schemaPath))\n.build();\nfinal AddElementsFromHdfs operation = new AddElementsFromHdfs.Builder()\n.addInputMapperPair(inputPath, TextMapperGeneratorImpl.class.getName())\n.outputPath(outputPath)\n.failurePath(failurePath)\n.splitsFilePath(\"/tmp/splits\")\n.workingPath(\"/tmp/workingDir\")\n.useProvidedSplits(false)\n.jobInitialiser(new TextJobInitialiser())\n.minReducers(10)\n.maxReducers(100)\n.build();\ngraph.execute(operation, new User());\n</code></pre>"},{"location":"reference/operations-guide/job/","title":"Job Tracker Operations","text":"<p>These Operations are used for managing Jobs. They are only available when the Job Tracker is enabled. By default, this is disabled.</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/job/#getalljobdetails","title":"GetAllJobDetails","text":"<p>Gets all running and historic job details for the graph. Javadoc</p> Example GetAllJobDetails JavaJSONPython <pre><code>final GetAllJobDetails operation = new GetAllJobDetails();\n</code></pre> <pre><code>{\n\"class\" : \"GetAllJobDetails\"\n}\n</code></pre> <pre><code>g.GetAllJobDetails()\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=b7084ad3-68ab-4a7b-879c-4c71813ac66f,user=User[userId=user01,dataAuths=[],opAuths=[]],status=RUNNING,startTime=1667818802286,opChain=OperationChain[GetAllJobDetails]]\n</code></pre> <pre><code>[ {\n\"jobId\" : \"b7084ad3-68ab-4a7b-879c-4c71813ac66f\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"RUNNING\",\n\"startTime\" : 1667818802286,\n\"opChain\" : \"OperationChain[GetAllJobDetails]\"\n} ]\n</code></pre>"},{"location":"reference/operations-guide/job/#getjobdetails","title":"GetJobDetails","text":"<p>Gets the details of a single job. Javadoc</p> Example getting job details in an operation chain JavaJSONPython <pre><code>final OperationChain&lt;JobDetail&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new DiscardOutput())\n.then(new GetJobDetails())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetJobDetails\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.DiscardOutput(), \ng.GetJobDetails() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=306e1208-62d2-47d5-b2c2-1005d3295011,user=User[userId=user01,dataAuths=[],opAuths=[]],status=RUNNING,startTime=1667818803505,opChain=OperationChain[GetAllElements-&gt;DiscardOutput-&gt;GetJobDetails]]\n</code></pre> <pre><code>{\n\"jobId\" : \"306e1208-62d2-47d5-b2c2-1005d3295011\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"RUNNING\",\n\"startTime\" : 1667818803505,\n\"opChain\" : \"OperationChain[GetAllElements-&gt;DiscardOutput-&gt;GetJobDetails]\"\n}\n</code></pre> Example getting job details with specific jobId JavaJSONPython <pre><code>final GetJobDetails operation = new GetJobDetails.Builder()\n.jobId(jobId)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJobDetails\",\n\"jobId\" : \"306e1208-62d2-47d5-b2c2-1005d3295011\"\n}\n</code></pre> <pre><code>g.GetJobDetails( \njob_id=\"306e1208-62d2-47d5-b2c2-1005d3295011\" \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=306e1208-62d2-47d5-b2c2-1005d3295011,user=User[userId=user01,dataAuths=[],opAuths=[]],status=FINISHED,startTime=1667818803505,endTime=1667818803505,opChain=OperationChain[GetAllElements-&gt;DiscardOutput-&gt;GetJobDetails]]\n</code></pre> <pre><code>{\n\"jobId\" : \"306e1208-62d2-47d5-b2c2-1005d3295011\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"FINISHED\",\n\"startTime\" : 1667818803505,\n\"endTime\" : 1667818803505,\n\"opChain\" : \"OperationChain[GetAllElements-&gt;DiscardOutput-&gt;GetJobDetails]\"\n}\n</code></pre>"},{"location":"reference/operations-guide/job/#getjobresults","title":"GetJobResults","text":"<p>Gets the results of a job. Javadoc</p> Example GetJobResults JavaJSONPython <pre><code>final GetJobResults operation = new GetJobResults.Builder()\n.jobId(jobId)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJobResults\",\n\"jobId\" : \"60d667eb-a20d-44c2-963f-fc1b6c9b3868\"\n}\n</code></pre> <pre><code>g.GetJobResults( \njob_id=\"60d667eb-a20d-44c2-963f-fc1b6c9b3868\" \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/job/#cancelscheduledjob","title":"CancelScheduledJob","text":"<p>Cancels a scheduled job specified by the job id. Javadoc</p> Example of a scheduled job before being cancelled JavaJSONPython <pre><code>final OperationChain&lt;JobDetail&gt; operationChain = new OperationChain.Builder()\n.first(new GetJobDetails.Builder().jobId(jobId).build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetJobDetails\",\n\"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetJobDetails( \njob_id=\"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=35c1bd84-1cd3-4609-8892-710e9d3c2d3f,user=User[userId=user01,dataAuths=[],opAuths=[]],status=SCHEDULED_PARENT,startTime=1667818799343,endTime=1667818799344,opChain=OperationChain[GetAllElements],serialisedOperationChain={\"class\":\"uk.gov.gchq.gaffer.operation.OperationChain\",\"operations\":[{\"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\",\"view\":{\"edges\":{\"edge\":{},\"edge1\":{}},\"entities\":{\"entity1\":{},\"entity\":{},\"cardinality\":{}}}}]},repeat=Repeat[initialDelay=1,repeatPeriod=1,timeUnit=MINUTES]]\n</code></pre> <pre><code>{\n\"repeat\" : {\n\"initialDelay\" : 1,\n\"repeatPeriod\" : 1,\n\"timeUnit\" : \"MINUTES\"\n},\n\"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"SCHEDULED_PARENT\",\n\"startTime\" : 1667818799343,\n\"endTime\" : 1667818799344,\n\"opChain\" : \"OperationChain[GetAllElements]\"\n}\n</code></pre> Example cancelling a scheduled job JavaJSONPython <pre><code>final OperationChain chain = new OperationChain.Builder()\n.first(new CancelScheduledJob.Builder()\n.jobId(jobId)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"CancelScheduledJob\",\n\"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.CancelScheduledJob( \njob_id=\"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\" \n) \n] \n)\n</code></pre> Example of a scheduled job after being cancelled JavaJSONPython <pre><code>final OperationChain&lt;JobDetail&gt; operationChain = new OperationChain.Builder()\n.first(new GetJobDetails.Builder().jobId(jobId).build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetJobDetails\",\n\"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetJobDetails( \njob_id=\"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=35c1bd84-1cd3-4609-8892-710e9d3c2d3f,user=User[userId=user01,dataAuths=[],opAuths=[]],status=CANCELLED,startTime=1667818799343,endTime=1667818799344,opChain=OperationChain[GetAllElements],serialisedOperationChain={\"class\":\"uk.gov.gchq.gaffer.operation.OperationChain\",\"operations\":[{\"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\",\"view\":{\"edges\":{\"edge\":{},\"edge1\":{}},\"entities\":{\"entity1\":{},\"entity\":{},\"cardinality\":{}}}}]},repeat=Repeat[initialDelay=1,repeatPeriod=1,timeUnit=MINUTES]]\n</code></pre> <pre><code>{\n\"repeat\" : {\n\"initialDelay\" : 1,\n\"repeatPeriod\" : 1,\n\"timeUnit\" : \"MINUTES\"\n},\n\"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"CANCELLED\",\n\"startTime\" : 1667818799343,\n\"endTime\" : 1667818799344,\n\"opChain\" : \"OperationChain[GetAllElements]\"\n}\n</code></pre>"},{"location":"reference/operations-guide/join/","title":"Join Operation","text":"<p>This operation joins two iterables together. Javadoc</p> <p>There are three different types of Join:</p> <ul> <li>FULL - returns all objects in the key, along with any matched objects from the other side</li> <li>INNER - returns all keys which matched with objects on the other side</li> <li>OUTER - returns all keys which didn't match with objects from the other side</li> </ul> <p>A Join operation can key by the left (input) or right hand side (output of the operation specified) and outputs an iterable of MapTuples. These Tuples contain the left and right outputs.</p> <p>A join operation must be supplied with a match method. This tells the operation how to determine what is and what isn't a match. There are two built in match methods:</p> <ul> <li>ElementMatch - Matches elements of the same id(s), group and group by properties</li> <li>KeyFunctionMatch - Matches any objects based on two key functions. The first key function applies to whatever the join type is (the object on the left hand side for Left keyed join and vice versa for the right).</li> </ul> <p>Once matched, the left and right sides are outputted as MapTuples keyed by \"LEFT\" and \"RIGHT\". The output is flattened by default (one left value for each right value) but this can be turned off using the flatten flag. Setting the flatten flag to false will cause the non keyed side to be summarised in a list.</p>"},{"location":"reference/operations-guide/join/#examples","title":"Examples","text":"<p>The following Join examples use these input elements:</p> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#left-key-inner-join","title":"Left key inner join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.INNER)\n.matchKey(MatchKey.LEFT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"LEFT\",\n\"flatten\" : false,\n\"joinType\" : \"INNER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"LEFT\", \njoin_type=\"INNER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; [Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; [Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; [Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-left-key-inner-join","title":"Flattened left key inner join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.INNER)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"flatten\" : true,\n\"joinType\" : \"INNER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \njoin_type=\"INNER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#right-key-inner-join","title":"Right key inner join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.INNER)\n.matchKey(MatchKey.RIGHT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : false,\n\"joinType\" : \"INNER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"RIGHT\", \njoin_type=\"INNER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ [Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-right-key-inner-join","title":"Flattened right key inner join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.flatten(true)\n.matchKey(MatchKey.RIGHT)\n.joinType(JoinType.INNER)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : true,\n\"joinType\" : \"INNER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \nmatch_key=\"RIGHT\", \njoin_type=\"INNER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#left-key-full-join","title":"Left key full join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.FULL)\n.matchKey(MatchKey.LEFT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"LEFT\",\n\"flatten\" : false,\n\"joinType\" : \"FULL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"LEFT\", \njoin_type=\"FULL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; [Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; [Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; [Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] ]\n[ Entity[vertex=6,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;30]] --&gt; [] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n},\n\"RIGHT\" : [ ]\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-left-key-full-join","title":"Flattened left key full join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.FULL)\n.matchKey(MatchKey.LEFT)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"LEFT\",\n\"flatten\" : true,\n\"joinType\" : \"FULL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \nmatch_key=\"LEFT\", \njoin_type=\"FULL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=6,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;30]] --&gt; null ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n},\n\"RIGHT\" : null\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#right-key-full-join","title":"Right key full join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.FULL)\n.matchKey(MatchKey.RIGHT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : false,\n\"joinType\" : \"FULL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"RIGHT\", \njoin_type=\"FULL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ [] --&gt; Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [] --&gt; Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]] ]\n[ [] --&gt; Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [] --&gt; Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ [] --&gt; Entity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ [] --&gt; Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [] --&gt; Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [] --&gt; Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-right-key-full-join","title":"Flattened right key full join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.FULL)\n.matchKey(MatchKey.RIGHT)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : true,\n\"joinType\" : \"FULL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \nmatch_key=\"RIGHT\", \njoin_type=\"FULL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ null --&gt; Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ null --&gt; Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]] ]\n[ null --&gt; Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ null --&gt; Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ null --&gt; Entity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ null --&gt; Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ null --&gt; Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ null --&gt; Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#left-key-outer-join","title":"Left key outer join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.OUTER)\n.matchKey(MatchKey.LEFT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"LEFT\",\n\"flatten\" : false,\n\"joinType\" : \"OUTER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"LEFT\", \njoin_type=\"OUTER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=6,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;30]] --&gt; [] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n},\n\"RIGHT\" : [ ]\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-left-key-outer-join","title":"Flattened left key outer join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.OUTER)\n.matchKey(MatchKey.LEFT)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"LEFT\",\n\"flatten\" : true,\n\"joinType\" : \"OUTER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \nmatch_key=\"LEFT\", \njoin_type=\"OUTER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=6,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;30]] --&gt; null ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n},\n\"RIGHT\" : null\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#right-key-outer-join","title":"Right key outer join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.OUTER)\n.matchKey(MatchKey.RIGHT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : false,\n\"joinType\" : \"OUTER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"RIGHT\", \njoin_type=\"OUTER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ [] --&gt; Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [] --&gt; Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]] ]\n[ [] --&gt; Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [] --&gt; Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ [] --&gt; Entity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ [] --&gt; Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [] --&gt; Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [] --&gt; Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-right-key-outer-join","title":"Flattened right key outer join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.OUTER)\n.matchKey(MatchKey.RIGHT)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : true,\n\"joinType\" : \"OUTER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \nmatch_key=\"RIGHT\", \njoin_type=\"OUTER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ null --&gt; Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ null --&gt; Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]] ]\n[ null --&gt; Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ null --&gt; Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ null --&gt; Entity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ null --&gt; Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ null --&gt; Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ null --&gt; Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/misc/","title":"Misc Operations","text":"<p>These Operations don't fit under other pages and are not core operations.</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/misc/#getfromendpoint","title":"GetFromEndpoint","text":"<p>Gets data from an endpoint. Javadoc</p>"},{"location":"reference/operations-guide/misc/#example","title":"Example","text":"JavaJSONPython <pre><code>final GetFromEndpoint get = new GetFromEndpoint.Builder()\n.endpoint(\"https://mydata.io:8443/mydata\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetFromEndpoint\",\n\"endpoint\" : \"https://mydata.io:8443/mydata\"\n}\n</code></pre> <pre><code>g.GetFromEndpoint(\nendpoint=\"https://mydata.io:8443/mydata\"\n)\n</code></pre>"},{"location":"reference/operations-guide/misc/#scoreoperationchain","title":"ScoreOperationChain","text":"<p>Determines a \"score\" for an OperationChain. This is used to determine whether a particular user has the required permissions to execute a given OperationChain. Javadoc</p> <p>This operation requires Store configuration to be set before it can be used. See the Store Guide for how to do this.</p>"},{"location":"reference/operations-guide/misc/#example-scoreoperationchain","title":"Example ScoreOperationChain","text":"JavaJSONPython <pre><code>final ScoreOperationChain scoreOpChain = new ScoreOperationChain.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new GetElements())\n.then(new NamedOperation.Builder&lt;Element, Iterable&lt;? extends Element&gt;&gt;()\n.name(\"namedOp\")\n.build())\n.then(new Limit&lt;&gt;(3))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"ScoreOperationChain\",\n\"operationChain\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\"\n}, {\n\"class\" : \"NamedOperation\",\n\"operationName\" : \"namedOp\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : true\n} ]\n}\n}\n</code></pre> <pre><code>g.ScoreOperationChain(\noperation_chain=g.OperationChain(\noperations=[\ng.GetElements(),\ng.NamedOperation(\noperation_name=\"namedOp\"\n),\ng.Limit(\nresult_limit=3,\ntruncate=True\n)\n]\n)\n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>5\n</code></pre> <pre><code>5\n</code></pre>"},{"location":"reference/operations-guide/misc/#example-of-scoreoperationchain-with-custom-named-score","title":"Example of ScoreOperationChain with custom named score","text":"<p>Here we have added a NamedOperation to the NamedOperationCache, with a custom score of 3. In our ScoreOperationChainDeclaration.json file, we have also declared that this should be resolved with a NamedOperationScoreResolver. With Limit declared as having a score of 2, the above chain correctly has a score of 5.</p> JavaJSONPython <pre><code>final ScoreOperationChain scoreOperationChain = new ScoreOperationChain.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new NamedOperation.Builder&lt;EntitySeed, Iterable&lt;? extends Element&gt;&gt;()\n.name(\"1-hop\")\n.input(new EntitySeed(1))\n.build())\n.then(new Limit&lt;&gt;(3))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"ScoreOperationChain\",\n\"operationChain\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"1-hop\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : true\n} ]\n}\n}\n</code></pre> <pre><code>g.ScoreOperationChain(\noperation_chain=g.OperationChain(\noperations=[\ng.NamedOperation(\ninput=[\ng.EntitySeed(\nvertex=1\n)\n],\noperation_name=\"1-hop\"\n),\ng.Limit(\nresult_limit=3,\ntruncate=True\n)\n]\n)\n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>5\n</code></pre> <pre><code>5\n</code></pre>"},{"location":"reference/operations-guide/named/","title":"Named Operations","text":"<p>Named Operations enable encapsulation of an OperationChain into a new single NamedOperation. The NamedOperation can be added to OperationChains and executed, just like any other Operation. They are available when a cache has been configured. Overview Javadoc</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/named/#addnamedoperation","title":"AddNamedOperation","text":"<p>Adds a new NamedOperation to a Graph. Javadoc</p> Example adding a new named operation JavaJSONPython <pre><code>final AddNamedOperation operation = new AddNamedOperation.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.then(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build())\n.description(\"2 hop query\")\n.name(\"2-hop\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.overwrite()\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop\",\n\"description\" : \"2 hop query\",\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n},\n\"overwriteFlag\" : true,\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \noperation_name=\"2-hop\", \ndescription=\"2 hop query\", \nread_access_roles=[ \n\"read-user\" \n], \nwrite_access_roles=[ \n\"write-user\" \n], \noverwrite_flag=True \n)\n</code></pre> Example adding a new named operation with score JavaJSONPython <pre><code>final AddNamedOperation operation = new AddNamedOperation.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build())\n.description(\"1 hop query\")\n.name(\"1-hop\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.overwrite()\n.score(2)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"1-hop\",\n\"description\" : \"1 hop query\",\n\"score\" : 2,\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n},\n\"overwriteFlag\" : true,\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \noperation_name=\"1-hop\", \ndescription=\"1 hop query\", \nread_access_roles=[ \n\"read-user\" \n], \nwrite_access_roles=[ \n\"write-user\" \n], \noverwrite_flag=True, \nscore=2 \n)\n</code></pre> Example adding a new named operation with parameter JavaJSONPython <pre><code>final String opChainString = \"{\" +\n\"    \\\"operations\\\" : [ {\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\" +\n\"      \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"\" +\n\"    }, {\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\" +\n\"      \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"\" +\n\"    }, {\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.Limit\\\",\" +\n\"      \\\"resultLimit\\\" : \\\"${param1}\\\"\" +\n\"    }\" +\n\" ]\" +\n\"}\";\nParameterDetail param = new ParameterDetail.Builder()\n.defaultValue(1L)\n.description(\"Limit param\")\n.valueClass(Long.class)\n.build();\nMap&lt;String, ParameterDetail&gt; paramMap = Maps.newHashMap();\nparamMap.put(\"param1\", param);\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n.operationChain(opChainString)\n.description(\"2 hop query with settable limit\")\n.name(\"2-hop-with-limit\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.parameters(paramMap)\n.overwrite()\n.score(3)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop-with-limit\",\n\"description\" : \"2 hop query with settable limit\",\n\"score\" : 3,\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.Limit\",\n\"resultLimit\" : \"${param1}\"\n} ]\n},\n\"overwriteFlag\" : true,\n\"parameters\" : {\n\"param1\" : {\n\"description\" : \"Limit param\",\n\"defaultValue\" : 1,\n\"valueClass\" : \"Long\",\n\"required\" : false\n}\n},\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.Limit( \nresult_limit=\"${param1}\" \n) \n] \n), \noperation_name=\"2-hop-with-limit\", \ndescription=\"2 hop query with settable limit\", \nread_access_roles=[ \n\"read-user\" \n], \nwrite_access_roles=[ \n\"write-user\" \n], \noverwrite_flag=True, \nscore=3, \nparameters=[ \ng.NamedOperationParameter( \nname=\"param1\", \nvalue_class=\"java.lang.Long\", \ndescription=\"Limit param\", \ndefault_value=1, \nrequired=False \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/named/#getallnamedoperations","title":"GetAllNamedOperations","text":"<p>Retrieves all NamedOperations associated with a Graph. Javadoc</p> Example getting all NamedOperations JavaJSONPython <pre><code>final GetAllNamedOperations operation = new GetAllNamedOperations();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.named.operation.GetAllNamedOperations\"\n}\n</code></pre> <pre><code>g.GetAllNamedOperations()\n</code></pre> <p>Results:</p> JavaJSON <pre><code>NamedOperationDetail[inputType=java.lang.Object[],creatorId=user01,operations={\"operations\":[{\"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\"includeIncomingOutGoing\":\"OUTGOING\"}]},readAccessRoles=[read-user],writeAccessRoles=[write-user],score=2]\nNamedOperationDetail[inputType=java.lang.Object[],creatorId=user01,operations={\"operations\":[{\"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\"includeIncomingOutGoing\":\"OUTGOING\"},{\"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\"includeIncomingOutGoing\":\"OUTGOING\"}]},readAccessRoles=[read-user],writeAccessRoles=[write-user]]\nNamedOperationDetail[inputType=java.lang.Object[],creatorId=user01,operations={    \"operations\" : [ {      \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",      \"includeIncomingOutGoing\" : \"OUTGOING\"    }, {      \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",      \"includeIncomingOutGoing\" : \"OUTGOING\"    }, {      \"class\" : \"uk.gov.gchq.gaffer.operation.impl.Limit\",      \"resultLimit\" : \"${param1}\"    } ]},readAccessRoles=[read-user],writeAccessRoles=[write-user],parameters={param1=ParameterDetail[description=Limit param,valueClass=class java.lang.Long,required=false,defaultValue=1]},score=3]\n</code></pre> <pre><code>[ {\n\"operationName\" : \"1-hop\",\n\"inputType\" : \"java.lang.Object[]\",\n\"description\" : \"1 hop query\",\n\"creatorId\" : \"user01\",\n\"operations\" : \"{\\\"operations\\\":[{\\\"class\\\":\\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\\\"includeIncomingOutGoing\\\":\\\"OUTGOING\\\"}]}\",\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ],\n\"parameters\" : null,\n\"score\" : 2\n}, {\n\"operationName\" : \"2-hop\",\n\"inputType\" : \"java.lang.Object[]\",\n\"description\" : \"2 hop query\",\n\"creatorId\" : \"user01\",\n\"operations\" : \"{\\\"operations\\\":[{\\\"class\\\":\\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\\\"includeIncomingOutGoing\\\":\\\"OUTGOING\\\"},{\\\"class\\\":\\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\\\"includeIncomingOutGoing\\\":\\\"OUTGOING\\\"}]}\",\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ],\n\"parameters\" : null\n}, {\n\"operationName\" : \"2-hop-with-limit\",\n\"inputType\" : \"java.lang.Object[]\",\n\"description\" : \"2 hop query with settable limit\",\n\"creatorId\" : \"user01\",\n\"operations\" : \"{    \\\"operations\\\" : [ {      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",      \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"    }, {      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",      \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"    }, {      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.Limit\\\",      \\\"resultLimit\\\" : \\\"${param1}\\\"    } ]}\",\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ],\n\"parameters\" : {\n\"param1\" : {\n\"description\" : \"Limit param\",\n\"defaultValue\" : 1,\n\"valueClass\" : \"java.lang.Long\",\n\"required\" : false\n}\n},\n\"score\" : 3\n} ]\n</code></pre>"},{"location":"reference/operations-guide/named/#namedoperation","title":"NamedOperation","text":"<p>Runs a pre-existing NamedOperation, i.e. one that has already been added. Javadoc</p> Example running a NamedOperation JavaJSONPython <pre><code>final NamedOperation&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt; operation =\nnew NamedOperation.Builder&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt;()\n.name(\"2-hop\")\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"2-hop\"\n}\n</code></pre> <pre><code>g.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"2-hop\" \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=3]\nEntitySeed[vertex=4]\nEntitySeed[vertex=5]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 4\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 5\n} ]\n</code></pre> Example running a NamedOperation with parameter JavaJSONPython <pre><code>Map&lt;String, Object&gt; paramMap = Maps.newHashMap();\nparamMap.put(\"param1\", 2L);\nfinal NamedOperation&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt; operation =\nnew NamedOperation.Builder&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt;()\n.name(\"2-hop-with-limit\")\n.input(new EntitySeed(1))\n.parameters(paramMap)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"2-hop-with-limit\",\n\"parameters\" : {\n\"param1\" : 2\n}\n}\n</code></pre> <pre><code>g.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"2-hop-with-limit\", \nparameters={'param1': 2} \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=3]\nEntitySeed[vertex=4]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 4\n} ]\n</code></pre>"},{"location":"reference/operations-guide/named/#deletenamedoperation","title":"DeleteNamedOperation","text":"<p>Removes an existing NamedOperation from a Graph. Javadoc</p> Example deleting a NamedOperation JavaJSONPython <pre><code>final DeleteNamedOperation operation = new DeleteNamedOperation.Builder()\n.name(\"2-hop\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"DeleteNamedOperation\",\n\"operationName\" : \"2-hop\"\n}\n</code></pre> <pre><code>g.DeleteNamedOperation( \noperation_name=\"2-hop\" \n)\n</code></pre>"},{"location":"reference/operations-guide/named/#addnamedview","title":"AddNamedView","text":"<p>Adds a NamedView to a Graph. Javadoc</p> Example adding a NamedView JavaJSONPython <pre><code>final AddNamedView op = new AddNamedView.Builder()\n.name(\"isMoreThan10\")\n.description(\"example test NamedView\")\n.overwrite(true)\n.view(new View.Builder()\n.edge(\"testEdge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(10))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedView\",\n\"name\" : \"isMoreThan10\",\n\"description\" : \"example test NamedView\",\n\"view\" : {\n\"edges\" : {\n\"testEdge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 10\n}\n} ]\n}\n}\n},\n\"overwriteFlag\" : true\n}\n</code></pre> <pre><code>g.AddNamedView( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"testEdge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=10, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \nname=\"isMoreThan10\", \ndescription=\"example test NamedView\", \noverwrite_flag=True \n)\n</code></pre> Example adding a NamedView with parameter JavaJSONPython <pre><code>final String viewJson = \"{\\\"edges\\\" : {\\n\" +\n\"  \\\"testEdge\\\" : {\\n\" +\n\"    \\\"preAggregationFilterFunctions\\\" : [ {\\n\" +\n\"      \\\"selection\\\" : [ \\\"count\\\" ],\\n\" +\n\"      \\\"predicate\\\" : {\\n\" +\n\"        \\\"class\\\" : \\\"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\\\",\\n\" +\n\"        \\\"orEqualTo\\\" : false,\\n\" +\n\"        \\\"value\\\" : \\\"${countThreshold}\\\"\\n\" +\n\"      }\\n\" +\n\"    } ]\\n\" +\n\"  }\\n\" +\n\"}}\";\nfinal ViewParameterDetail param = new ViewParameterDetail.Builder()\n.defaultValue(1L)\n.description(\"count threshold\")\n.valueClass(Long.class)\n.build();\nfinal Map&lt;String, ViewParameterDetail&gt; paramMap = Maps.newHashMap();\nparamMap.put(\"countThreshold\", param);\nfinal AddNamedView op = new AddNamedView.Builder()\n.name(\"isMoreThan\")\n.description(\"example test NamedView\")\n.overwrite(true)\n.view(viewJson)\n.parameters(paramMap)\n.writeAccessRoles(\"auth1\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedView\",\n\"name\" : \"isMoreThan\",\n\"description\" : \"example test NamedView\",\n\"view\" : {\n\"edges\" : {\n\"testEdge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : \"${countThreshold}\"\n}\n} ]\n}\n}\n},\n\"overwriteFlag\" : true,\n\"parameters\" : {\n\"countThreshold\" : {\n\"description\" : \"count threshold\",\n\"defaultValue\" : 1,\n\"valueClass\" : \"Long\",\n\"required\" : false\n}\n},\n\"writeAccessRoles\" : [ \"auth1\" ]\n}\n</code></pre> <pre><code>g.AddNamedView( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"testEdge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=\"${countThreshold}\", \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \nname=\"isMoreThan\", \ndescription=\"example test NamedView\", \noverwrite_flag=True, \nwrite_access_roles=[ \n\"auth1\" \n], \nparameters=[ \ng.NamedViewParameter( \nname=\"countThreshold\", \nvalue_class=\"java.lang.Long\", \ndescription=\"count threshold\", \ndefault_value=1, \nrequired=False \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/named/#deletenamedview","title":"DeleteNamedView","text":"<p>Removes an existing NamedView from a Graph. Javadoc</p> Example deleting a NamedView JavaJSONPython <pre><code>final DeleteNamedView op = new DeleteNamedView.Builder()\n.name(\"testNamedView\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"DeleteNamedView\",\n\"name\" : \"testNamedView\"\n}\n</code></pre> <pre><code>g.DeleteNamedView( \nname=\"testNamedView\" \n)\n</code></pre>"},{"location":"reference/operations-guide/named/#getallnamedviews","title":"GetAllNamedViews","text":"<p>Retrieves all NamedViews associated with a Graph. Javadoc</p> Example getting all NamedViews JavaJSONPython <pre><code>final GetAllNamedViews op = new GetAllNamedViews();\n</code></pre> <pre><code>{\n\"class\" : \"GetAllNamedViews\"\n}\n</code></pre> <pre><code>g.GetAllNamedViews()\n</code></pre>"},{"location":"reference/operations-guide/operations/","title":"Operations Guide","text":"<p>These pages contain examples of most operations in Gaffer. The examples are given in Java, JSON and Python.</p>"},{"location":"reference/operations-guide/operations/#table-of-all-operations","title":"Table of all Operations","text":"<p>Note</p> <p>Some Operations below are missing a link because they have not been documented on this site yet. Details may be found in the Javadoc.</p> Operation Type <code>operation.impl.add.AddElements</code> Core <code>operation.impl.get.GetAdjacentIds</code> Get <code>operation.impl.get.GetAllElements</code> Get <code>operation.impl.get.GetElements</code> Get <code>operation.impl.get.GetFromEndpoint</code> Get <code>operation.impl.GetWalks</code> Get <code>operation.impl.Count</code> Core <code>operation.impl.CountGroups</code> Core <code>operation.impl.DiscardOutput</code> Core <code>operation.impl.join.Join</code> Core <code>operation.impl.compare.Min</code> Core <code>operation.impl.compare.Max</code> Core <code>operation.impl.compare.Sort</code> Core <code>operation.impl.function.Aggregate</code> Core <code>operation.impl.function.Filter</code> Core <code>operation.impl.function.Transform</code> Core <code>operation.impl.GetVariable</code> Core <code>operation.impl.GetVariables</code> Core <code>operation.impl.Limit</code> Core <code>operation.impl.Map</code> Core <code>operation.impl.Reduce</code> Core <code>operation.impl.SampleElementsForSplitPoints</code> Core <code>operation.impl.SetVariable</code> Core <code>operation.impl.SplitStoreFromFile</code> Core <code>operation.impl.SplitStoreFromIterable</code> Core <code>operation.impl.Validate</code> Core <code>operation.impl.If</code> Flow <code>operation.impl.ForEach</code> Flow <code>operation.impl.While</code> Flow <code>operation.impl.output.ToArray</code> Output <code>operation.impl.output.ToCsv</code> Output <code>operation.impl.output.ToEntitySeeds</code> Output <code>operation.impl.output.ToList</code> Output <code>operation.impl.output.ToMap</code> Output <code>operation.impl.output.ToSet</code> Output <code>operation.impl.output.ToSingletonList</code> Output <code>operation.impl.output.ToStream</code> Output <code>operation.impl.output.ToVertices</code> Output <code>operation.OperationChain</code> Chain <code>operation.OperationChainDAO</code> Chain <code>operation.impl.ScoreOperationChain</code> Chain <code>operation.impl.ValidateOperationChain</code> Chain <code>operation.impl.add.ImportCsv</code> Import <code>operation.export.graph.ExportToOtherAuthorisedGraph</code> Export <code>operation.export.graph.ExportToOtherGraph</code> Export <code>operation.impl.export.GetExports</code> Export <code>operation.impl.export.localfile.ExportToLocalFile</code> Export <code>operation.impl.export.localfile.ImportFromLocalFile</code> Export <code>operation.impl.export.resultcache.ExportToGafferResultCache</code> Export <code>operation.impl.export.resultcache.GetGafferResultCacheExport</code> Export <code>operation.impl.export.set.ExportToSet</code> Export <code>operation.impl.export.set.GetSetExport</code> Export <code>operation.impl.job.CancelScheduledJob</code> Job <code>operation.impl.job.GetAllJobDetails</code> Job <code>operation.impl.job.GetJobDetails</code> Job <code>operation.impl.job.GetJobResults</code> Job <code>operation.impl.add.AddElementsFromFile</code> Flink <code>operation.impl.add.AddElementsFromKafka</code> Flink <code>operation.impl.add.AddElementsFromSocket</code> Flink <code>operation.impl.generate.GenerateElements</code> Generate <code>operation.impl.generate.GenerateObjects</code> Generate <code>operation.impl.GenerateSplitPointsFromSample</code> Generate <code>named.operation.AddNamedOperation</code> Named <code>named.operation.DeleteNamedOperation</code> Named <code>named.operation.GetAllNamedOperations</code> Named <code>named.operation.NamedOperation</code> Named <code>named.view.AddNamedView</code> Named <code>named.view.DeleteNamedView</code> Named <code>named.view.GetAllNamedViews</code> Named <code>store.operation.DeleteAllData</code> Store <code>store.operation.GetSchema</code> Store <code>store.operation.GetTraits</code> Store <code>store.operation.HasTrait</code> Store <code>store.operation.add.AddSchemaToLibrary</code> Store <code>store.operation.add.AddStorePropertiesToLibrary</code> Store <code>federatedstore.operation.AddGraph</code> Federated <code>federatedstore.operation.AddGraphWithHooks</code> Federated <code>federatedstore.operation.ChangeGraphAccess</code> Federated <code>federatedstore.operation.ChangeGraphId</code> Federated <code>federatedstore.operation.FederatedOperation</code> Federated <code>federatedstore.operation.GetAllGraphIds</code> Federated <code>federatedstore.operation.GetAllGraphInfo</code> Federated <code>federatedstore.operation.RemoveGraph</code> Federated <code>federatedstore.operation.RemoveGraphAndDeleteAllData</code> Federated <code>proxystore.operation.GetProxyProperties</code> Proxy <code>proxystore.operation.GetProxyUrl</code> Proxy <code>accumulostore.operation.hdfs.operation.ImportAccumuloKeyValueFiles</code> Accumulo <code>accumulostore.operation.impl.GetElementsBetweenSets</code> Accumulo <code>accumulostore.operation.impl.GetElementsBetweenSetsPairs</code> Accumulo <code>accumulostore.operation.impl.GetElementsInRanges</code> Accumulo <code>accumulostore.operation.impl.GetElementsWithinSet</code> Accumulo <code>accumulostore.operation.impl.SummariseGroupOverRanges</code> Accumulo <code>hdfs.operation.AddElementsFromHdfs</code> HDFS <code>hdfs.operation.SampleDataForSplitPoints</code> HDFS <code>mapstore.operation.CountAllElementsDefaultView</code> Map <code>spark.operation.dataframe.GetDataFrameOfElements</code> Spark <code>spark.operation.graphframe.GetGraphFrameOfElements</code> Spark <code>spark.operation.javardd.GetJavaRDDOfAllElements</code> Spark <code>spark.operation.javardd.GetJavaRDDOfElements</code> Spark <code>spark.operation.javardd.ImportJavaRDDOfElements</code> Spark <code>spark.operation.javardd.SplitStoreFromJavaRDDOfElements</code> Spark <code>spark.operation.scalardd.GetRDDOfAllElements</code> Spark <code>spark.operation.scalardd.GetRDDOfElements</code> Spark <code>spark.operation.scalardd.ImportRDDOfElements</code> Spark <code>spark.operation.scalardd.SplitStoreFromRDDOfElements</code> Spark <code>sparkaccumulo.operation.javardd.GetJavaRDDOfElementsInRanges</code> Spark <code>sparkaccumulo.operation.javardd.ImportKeyValueJavaPairRDDToAccumulo</code> Spark <code>sparkaccumulo.operation.scalardd.GetRDDOfElementsInRanges</code> Spark <code>sparkaccumulo.operation.scalardd.ImportKeyValuePairRDDToAccumulo</code> Spark"},{"location":"reference/operations-guide/spark/","title":"Spark Operations","text":"<p>These Operations are part of the Spark library. They are only available if they have been specifically enabled and are only supported by the Accumulo store. They are enabled by registering the Spark operations and their handlers with your store. You need to add the following to your store properties file: <pre><code>gaffer.store.operation.declarations=sparkAccumuloOperationsDeclarations.json\n</code></pre></p> <p>There is an option to read the RFiles directly rather than the usual approach of obtaining them from Accumulo's tablet servers. This requires the Hadoop user, running the Spark job, to have read access to the RFiles in the Accumulo tablet. Note, however, that data which has not been minor compacted will not be read if this option is used. This functionality is enabled using the option: <code>gaffer.accumulo.spark.directrdd.use_rfile_reader=true</code>.</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/spark/#getdataframeofelements","title":"GetDataFrameOfElements","text":"<p>Operation that returns an Apache Spark DataFrame consisting of Elements converted to Rows, fields are ordered according to the ordering of the groups in the view, with Entities first, followed by Edges. Javadoc</p> Example getting data frame of elements with entity group JavaJSON <pre><code>final GetDataFrameOfElements operation = new GetDataFrameOfElements.Builder()\n.view(new View.Builder()\n.entity(\"entity\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetDataFrameOfElements\",\n\"view\" : {\n\"entities\" : {\n\"entity\" : { }\n}\n}\n}\n</code></pre> <p>Results:</p> group vertex count entity 1 3 entity 2 1 entity 3 2 entity 4 1 entity 5 3 <p>Using filter:</p> <pre><code>df.filter(\"vertex = 1 OR vertex = 2\").show();\n</code></pre> <p>The results are:</p> group vertex count entity 1 3 entity 2 1 <p>Using filter:</p> <pre><code>df.filter(\"count &gt; 1\").show();\n</code></pre> <p>The results are:</p> group vertex count entity 1 3 entity 3 2 entity 5 3 Example getting data frame of elements with edge group JavaJSON <pre><code>final GetDataFrameOfElements operation = new GetDataFrameOfElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetDataFrameOfElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}\n</code></pre> <p>Results:</p> group src dst directed matchedVertex count edge 1 2 true null 3 edge 1 4 true null 1 edge 2 3 true null 2 edge 2 4 true null 1 edge 2 5 true null 1 edge 3 4 true null 4 <p>Using filter:</p> <pre><code>df.filter(\"src = 1 OR src = 3\").show();\n</code></pre> <p>The results are:</p> group src dst directed matchedVertex count edge 1 2 true null 3 edge 1 4 true null 1 edge 3 4 true null 4 <p>Using filter:</p> <pre><code>df.filter(\"count &gt; 1\").show();\n</code></pre> <p>The results are:</p> group src dst directed matchedVertex count edge 1 2 true null 3 edge 2 3 true null 2 edge 3 4 true null 4"},{"location":"reference/operations-guide/spark/#getgraphframeofelements","title":"GetGraphFrameOfElements","text":"<p>Operation which returns an Apache Spark GraphFrame consisting of Elements converted to rows. Javadoc</p> Example getting graph frame of elements JavaJSON <pre><code>final GetGraphFrameOfElements operation = new GetGraphFrameOfElements.Builder()\n.view(new View.Builder()\n.entity(\"entity\")\n.edge(\"edge\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetGraphFrameOfElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n},\n\"entities\" : {\n\"entity\" : { }\n}\n}\n}\n</code></pre> <p>Then with the graphFrame result you can execute for example:</p> <pre><code>graphFrame.vertices().filter(\"vertex = 1 OR vertex = 2\").showString(100, 20)\n</code></pre> <p>and the results are: </p> matchedVertex directed id dst src count group null null 1 null null null null null null 2 null null null null null null 1 null null 3 entity null null 2 null null 1 entity <p>Or you can inspect the edges:</p> <pre><code>graphFrame.edges().filter(\"count &gt; 1\").showString(100, 20)\n</code></pre> <p>and the results are: </p> group vertex count src dst directed matchedVertex id edge null 3 1 2 true null 1 edge null 2 2 3 true null 3 edge null 4 3 4 true null 6 <p>GraphFrames also include operations such as PageRank.</p>"},{"location":"reference/operations-guide/spark/#getjavarddofallelements","title":"GetJavaRDDOfAllElements","text":"<p>Operation which retrieves all Elements, and returns them inside a JavaRDD. Javadoc</p> Example getting JavaRDD of all elements JavaJSON <pre><code>final GetJavaRDDOfAllElements operation = new GetJavaRDDOfAllElements();\n</code></pre> <pre><code>{\n\"class\" : \"GetJavaRDDOfAllElements\"\n}\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=3,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> Example getting JavaRDD of all elements returning edges only JavaJSON <pre><code>final GetJavaRDDOfAllElements operation = new GetJavaRDDOfAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJavaRDDOfAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}\n</code></pre> <p>Results:</p> Java <pre><code>Edge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=3,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\n</code></pre>"},{"location":"reference/operations-guide/spark/#getjavarddofelements","title":"GetJavaRDDOfElements","text":"<p>Operation which retrieves all the Elements for input seeds, and returns them inside a JavaRDD. Javadoc</p> Example getting JavaRDD of elements with seeds JavaJSON <pre><code>final GetJavaRDDOfElements operation = new GetJavaRDDOfElements.Builder()\n.input(new EdgeSeed(1, 2, true), new EdgeSeed(2, 3, true))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJavaRDDOfElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : 1,\n\"destination\" : 2,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n} ]\n}\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\n</code></pre> Example getting JavaRDD of elements with Hadoop conf JavaJSON <pre><code>final Configuration conf = new Configuration();\nconf.set(\"AN_OPTION\", \"A_VALUE\");\nfinal String encodedConf;\ntry {\nencodedConf = AbstractGetRDDHandler.convertConfigurationToString(conf);\n} catch (final IOException e) {\nthrow new RuntimeException(\"Unable to convert conf to string\", e);\n}\nfinal GetJavaRDDOfElements operation = new GetJavaRDDOfElements.Builder()\n.input(new EdgeSeed(1, 2, true), new EdgeSeed(2, 3, true))\n.option(AbstractGetRDDHandler.HADOOP_CONFIGURATION_KEY, encodedConf)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJavaRDDOfElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : 1,\n\"destination\" : 2,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n} ],\n\"options\" : {\n\"Hadoop_Configuration_Key\" : \"config removed for readability\"\n}\n}\n</code></pre> Example getting JavaRDD of elements with seeds, returning edges only JavaJSON <pre><code>final GetJavaRDDOfElements operation = new GetJavaRDDOfElements.Builder()\n.input(new EdgeSeed(1, 2, true), new EdgeSeed(2, 3, true))\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJavaRDDOfElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : 1,\n\"destination\" : 2,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}\n</code></pre> <p>Results:</p> Java <pre><code>Edge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\n</code></pre>"},{"location":"reference/predicates-guide/gaffer-predicates/","title":"Gaffer Predicates","text":"<p>Predicates which are part of Gaffer.</p>"},{"location":"reference/predicates-guide/gaffer-predicates/#hyperloglogplusislessthan","title":"HyperLogLogPlusIsLessThan","text":"<p>Tests a HyperLogLogPlus cardinality is less than a provided value. Javadoc</p> <p>Input type: <code>com.clearspring.analytics.stream.cardinality.HyperLogLogPlus</code></p> Example HyperLogLogPlusIsLessThan Integer 2 JavaJSONPython <pre><code>final HyperLogLogPlusIsLessThan function = new HyperLogLogPlusIsLessThan(2);\n</code></pre> <pre><code>{\n\"class\" : \"HyperLogLogPlusIsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n</code></pre> <pre><code>g.HyperLogLogPlusIsLessThan( \nvalue=2, \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@4093e27d true com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@51d8a4de false com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@3120d299 false Example HyperLogLogPlusIsLessThan or equal to Integer 2 JavaJSONPython <pre><code>final HyperLogLogPlusIsLessThan function = new HyperLogLogPlusIsLessThan(2, true);\n</code></pre> <pre><code>{\n\"class\" : \"HyperLogLogPlusIsLessThan\",\n\"orEqualTo\" : true,\n\"value\" : 2\n}\n</code></pre> <pre><code>g.HyperLogLogPlusIsLessThan( \nvalue=2, \nor_equal_to=True\n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@4093e27d true com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@51d8a4de true com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@3120d299 false"},{"location":"reference/predicates-guide/koryphe-predicates/","title":"Koryphe Predicates","text":"<p>Predicates from the Koryphe library.</p>"},{"location":"reference/predicates-guide/koryphe-predicates/#ageoff","title":"AgeOff","text":"<p>Checks if a timestamp is recent based on a provided age off time. Javadoc</p> <p>Input type: <code>java.lang.Long</code></p> Example AgeOff in milliseconds JavaJSONPython <pre><code>final AgeOff function = new AgeOff(100000L);\n</code></pre> <pre><code>{\n\"class\" : \"AgeOff\",\n\"ageOffTime\" : 100000\n}\n</code></pre> <pre><code>g.AgeOff( \nage_off_time=100000 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String ClassCastException: java.lang.String cannot be cast to java.lang.Long java.lang.Long 1667818781957 true java.lang.Long 1667818681957 false java.lang.Long 1667818881957 true java.lang.String 1667818781957 ClassCastException: java.lang.String cannot be cast to java.lang.Long"},{"location":"reference/predicates-guide/koryphe-predicates/#and","title":"And","text":"<p>Returns true if all of its predicates are true. Javadoc</p> <p>Input type: <code>uk.gov.gchq.koryphe.signature.Signature$UnknownGenericType</code></p> Example of is less than 3 and is more than 0 JavaJSONPython <pre><code>final And function = new And&lt;&gt;(\nnew IsLessThan(3),\nnew IsMoreThan(0)\n);\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.And\",\n\"predicates\" : [ {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 3\n}, {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 0\n} ]\n}\n</code></pre> <pre><code>g.And( \npredicates=[ \ng.IsLessThan( \nvalue=3, \nor_equal_to=False \n), \ng.IsMoreThan( \nvalue=0, \nor_equal_to=False \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 0 false java.lang.Integer 1 true java.lang.Integer 2 true java.lang.Integer 3 false java.lang.Long 1 false java.lang.Long 2 false Example of first item less than 2 and second item more than 5 JavaJSONPython <pre><code>final And function = new And.Builder()\n.select(0)\n.execute(new IsLessThan(2))\n.select(1)\n.execute(new IsMoreThan(5))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.And\",\n\"predicates\" : [ {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 0 ],\n\"predicate\" : {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n}, {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 1 ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 5\n}\n} ]\n}\n</code></pre> <pre><code>g.And( \npredicates=[ \ng.NestedPredicate( \nselection=[ \n0 \n], \npredicate=g.IsLessThan( \nvalue=2, \nor_equal_to=False \n) \n), \ng.NestedPredicate( \nselection=[ \n1 \n], \npredicate=g.IsMoreThan( \nvalue=5, \nor_equal_to=False \n) \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Integer] [1, 10] true [java.lang.Integer, java.lang.Integer] [1, 1] false [java.lang.Integer, java.lang.Integer] [10, 10] false [java.lang.Integer, java.lang.Integer] [10, 1] false [java.lang.Long, java.lang.Long] [1, 10] false [java.lang.Integer] [1] false"},{"location":"reference/predicates-guide/koryphe-predicates/#areequal","title":"AreEqual","text":"<p>Returns true if the two inputs are equal. Javadoc</p> <p>Input type: <code>java.lang.Object, java.lang.Object</code></p> Example AreEqual JavaJSONPython <pre><code>final AreEqual function = new AreEqual();\n</code></pre> <pre><code>{\n\"class\" : \"AreEqual\"\n}\n</code></pre> <pre><code>g.AreEqual()\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Double] [1, 1.0] false [java.lang.Double, java.lang.Double] [2.5, 2.5] true [java.lang.String, ] [, null] false [java.lang.String, java.lang.String] [abc, abc] true"},{"location":"reference/predicates-guide/koryphe-predicates/#arein","title":"AreIn","text":"<p>Checks if a provided collection contains all the provided input values. Javadoc</p> <p>Input type: <code>java.util.Collection</code></p> Example AreIn Set JavaJSONPython <pre><code>final AreIn function = new AreIn(1, 2, 3);\n</code></pre> <pre><code>{\n\"class\" : \"AreIn\",\n\"values\" : [ 1, 2, 3 ]\n}\n</code></pre> <pre><code>g.AreIn( \nvalues=[ \n1, \n2, \n3 \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.HashSet [1, 2, 3] true java.util.HashSet [1, 2, 3, 4] false java.util.HashSet [4, 1] false java.util.HashSet [1, 2] true java.util.HashSet [] true"},{"location":"reference/predicates-guide/koryphe-predicates/#collectioncontains","title":"CollectionContains","text":"<p>Checks if a collection contains a provided value. Javadoc</p> <p>Input type: <code>java.util.Collection</code></p> Example CollectionContains JavaJSONPython <pre><code>final CollectionContains function = new CollectionContains(1);\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.CollectionContains\",\n\"value\" : 1\n}\n</code></pre> <pre><code>g.CollectionContains( \nvalue=1 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.HashSet [1, 2, 3] true java.util.HashSet [1] true java.util.HashSet [2] false java.util.HashSet [] false"},{"location":"reference/predicates-guide/koryphe-predicates/#exists","title":"Exists","text":"<p>Checks the input exists. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example Exists JavaJSONPython <pre><code>final Exists function = new Exists();\n</code></pre> <pre><code>{\n\"class\" : \"Exists\"\n}\n</code></pre> <pre><code>g.Exists()\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true null false java.lang.String true java.lang.String abc true"},{"location":"reference/predicates-guide/koryphe-predicates/#if","title":"If","text":"<p>Conditionally applies a predicate. Javadoc</p> <p>Input type: <code>uk.gov.gchq.koryphe.signature.Signature$UnknownGenericType</code></p> Example conditionally applying predicates to input <p>This example tests first whether the input is an Integer. If so, it is then tested to see if the value is greater than 3. Otherwise, since it is not an Integer, we then test to see if it is NOT a String.</p> JavaJSONPython <pre><code>final If&lt;Comparable&gt; predicate = new If&lt;&gt;(new IsA(Integer.class), new IsMoreThan(3), new Not&lt;&gt;(new IsA(String.class)));\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.If\",\n\"predicate\" : {\n\"class\" : \"IsA\",\n\"type\" : \"java.lang.Integer\"\n},\n\"then\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 3\n},\n\"otherwise\" : {\n\"class\" : \"Not\",\n\"predicate\" : {\n\"class\" : \"IsA\",\n\"type\" : \"java.lang.String\"\n}\n}\n}\n</code></pre> <pre><code>g.If( \npredicate=g.IsA( \ntype=\"java.lang.Integer\" \n), \nthen=g.IsMoreThan( \nvalue=3, \nor_equal_to=False \n), \notherwise=g.Not( \npredicate=g.IsA( \ntype=\"java.lang.String\" \n) \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 2 false java.lang.Integer 3 false java.lang.Integer 5 true java.lang.String test false java.util.HashMap {} true java.util.ArrayList [] true"},{"location":"reference/predicates-guide/koryphe-predicates/#or","title":"Or","text":"<p>Returns true if any of the predicates are true. Javadoc</p> <p>When using an Or predicate with a single selected value you can just use the constructor new <code>Or(predicates))</code>'.</p> <p>When using an Or predicate with multiple selected values, you need to use the <code>Or.Builder</code> to build your Or predicate, using <code>.select()</code> then <code>.execute()</code>. When selecting values in the <code>Or.Builder</code> you need to refer to the position in the input array. I.e to use the first value use position 0 - <code>select(0)</code>.You can select multiple values to give to a predicate like isXLessThanY, this is achieved by passing 2 positions to the select method - <code>select(0, 1)</code>.</p> <p>Input type: <code>uk.gov.gchq.koryphe.signature.Signature$UnknownGenericType</code></p> Example is less than 2 equal to 5 or is more than 10 JavaJSONPython <pre><code>final Or function = new Or&lt;&gt;(\nnew IsLessThan(2),\nnew IsEqual(5),\nnew IsMoreThan(10)\n);\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n\"predicates\" : [ {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}, {\n\"class\" : \"IsEqual\",\n\"value\" : 5\n}, {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 10\n} ]\n}\n</code></pre> <pre><code>g.Or( \npredicates=[ \ng.IsLessThan( \nvalue=2, \nor_equal_to=False \n), \ng.IsEqual( \nvalue=5 \n), \ng.IsMoreThan( \nvalue=10, \nor_equal_to=False \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true java.lang.Integer 2 false java.lang.Integer 3 false java.lang.Integer 5 true java.lang.Integer 15 true java.lang.Long 1 false java.lang.Long 3 false java.lang.Long 5 false Example is less than 2 equal to 5 or is more than 10 JavaJSONPython <pre><code>final Or function = new Or&lt;&gt;(\nnew IsLessThan(2),\nnew IsEqual(5),\nnew IsMoreThan(10)\n);\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n\"predicates\" : [ {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}, {\n\"class\" : \"IsEqual\",\n\"value\" : 5\n}, {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 10\n} ]\n}\n</code></pre> <pre><code>g.Or( \npredicates=[ \ng.IsLessThan( \nvalue=2, \nor_equal_to=False \n), \ng.IsEqual( \nvalue=5 \n), \ng.IsMoreThan( \nvalue=10, \nor_equal_to=False \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true java.lang.Integer 2 false java.lang.Integer 3 false java.lang.Integer 5 true java.lang.Integer 15 true java.lang.Long 1 false java.lang.Long 3 false java.lang.Long 5 false Example first item is less than 2 or second item is more than 10 JavaJSONPython <pre><code>final Or function = new Or.Builder()\n.select(0)\n.execute(new IsLessThan(2))\n.select(1)\n.execute(new IsMoreThan(10))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n\"predicates\" : [ {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 0 ],\n\"predicate\" : {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n}, {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 1 ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 10\n}\n} ]\n}\n</code></pre> <pre><code>g.Or( \npredicates=[ \ng.NestedPredicate( \nselection=[ \n0 \n], \npredicate=g.IsLessThan( \nvalue=2, \nor_equal_to=False \n) \n), \ng.NestedPredicate( \nselection=[ \n1 \n], \npredicate=g.IsMoreThan( \nvalue=10, \nor_equal_to=False \n) \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Integer] [1, 15] true [java.lang.Integer, java.lang.Integer] [1, 1] true [java.lang.Integer, java.lang.Integer] [15, 15] true [java.lang.Integer, java.lang.Integer] [15, 1] false [java.lang.Long, java.lang.Long] [1, 15] false [java.lang.Integer] [1] true"},{"location":"reference/predicates-guide/koryphe-predicates/#not","title":"Not","text":"<p>Returns the inverse of a predicate. Javadoc</p> <p>Input type: <code>uk.gov.gchq.koryphe.signature.Signature$UnknownGenericType</code></p> Example does not exist JavaJSONPython <pre><code>final Not function = new Not&lt;&gt;(new Exists());\n</code></pre> <pre><code>{\n\"class\" : \"Not\",\n\"predicate\" : {\n\"class\" : \"Exists\"\n}\n}\n</code></pre> <pre><code>g.Not( \npredicate=g.Exists() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false null true java.lang.String false java.lang.String abc false Example are not equal JavaJSONPython <pre><code>final Not function = new Not&lt;&gt;(new AreEqual());\n</code></pre> <pre><code>{\n\"class\" : \"Not\",\n\"predicate\" : {\n\"class\" : \"AreEqual\"\n}\n}\n</code></pre> <pre><code>g.Not( \npredicate=g.AreEqual() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Double] [1, 1.0] true [java.lang.Integer, java.lang.Integer] [1, 2] true [java.lang.Double, java.lang.Double] [2.5, 2.5] false [java.lang.String, ] [, null] true [java.lang.String, java.lang.String] [abc, abc] false"},{"location":"reference/predicates-guide/koryphe-predicates/#indaterange","title":"InDateRange","text":"<p>Tests if a Comparable is within a provided range. By default the range is inclusive, this can be toggled using the startInclusive and endInclusive booleans. Javadoc</p> <p>You can configure the start and end time strings using the following formats:</p> <ul> <li>timestamp in milliseconds</li> <li>yyyy/MM</li> <li>yyyy/MM/dd</li> <li>yyyy/MM/dd HH</li> <li>yyyy/MM/dd HH:mm</li> <li>yyyy/MM/dd HHss</li> </ul> <p>You can use a space, <code>-</code>, <code>/</code>, <code>_</code>, <code>:</code>, <code>|</code>, or <code>.</code> to separate the parts.</p> <p>Input type: <code>java.util.Date</code></p> Example InDateRange with day precision JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.start(\"2017/01/01\")\n.end(\"2017/02/01\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"start\" : \"2017/01/01\",\n\"end\" : \"2017/02/01\"\n}\n</code></pre> <pre><code>g.InDateRange( \nstart=\"2017/01/01\", \nend=\"2017/02/01\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Fri Jan 01 00:00:00 GMT 2016 false java.util.Date Sun Jan 01 00:00:00 GMT 2017 true java.util.Date Sun Jan 01 01:00:00 GMT 2017 true java.util.Date Sun Jan 01 23:59:59 GMT 2017 true java.util.Date Wed Feb 01 00:00:00 GMT 2017 true java.util.Date Wed Feb 01 00:00:01 GMT 2017 false null false Example InDateRange with second precision JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.start(\"2017/01/01 01:30:10\")\n.end(\"2017/01/01 01:30:50\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"start\" : \"2017/01/01 01:30:10\",\n\"end\" : \"2017/01/01 01:30:50\"\n}\n</code></pre> <pre><code>g.InDateRange( \nstart=\"2017/01/01 01:30:10\", \nend=\"2017/01/01 01:30:50\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Sun Jan 01 01:30:09 GMT 2017 false java.util.Date Sun Jan 01 01:30:10 GMT 2017 true java.util.Date Sun Jan 01 01:30:20 GMT 2017 true java.util.Date Sun Jan 01 01:30:50 GMT 2017 true java.util.Date Sun Jan 01 01:30:51 GMT 2017 false null false Example InDateRange with timestamps JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.start(\"1483315200\")\n.end(\"1485907200\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"start\" : \"1483315200\",\n\"end\" : \"1485907200\"\n}\n</code></pre> <pre><code>g.InDateRange( \nstart=\"1483315200\", \nend=\"1485907200\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Sun Jan 18 05:01:55 GMT 1970 false java.util.Date Sun Jan 18 05:01:55 GMT 1970 true java.util.Date Sun Jan 18 05:01:56 GMT 1970 true java.util.Date Sun Jan 18 05:45:07 GMT 1970 true java.util.Date Sun Jan 18 05:45:07 GMT 1970 false null false Example of range exclusive JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.start(\"2017/01/01\")\n.end(\"2017/02/01\")\n.startInclusive(false)\n.endInclusive(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"start\" : \"2017/01/01\",\n\"end\" : \"2017/02/01\",\n\"startInclusive\" : false,\n\"endInclusive\" : false\n}\n</code></pre> <pre><code>g.InDateRange( \nstart=\"2017/01/01\", \nend=\"2017/02/01\", \nstart_inclusive=False, \nend_inclusive=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Fri Jan 01 00:00:00 GMT 2016 false java.util.Date Sun Jan 01 00:00:00 GMT 2017 false java.util.Date Sun Jan 01 01:00:00 GMT 2017 true java.util.Date Sun Jan 01 23:59:59 GMT 2017 true java.util.Date Wed Feb 01 00:00:00 GMT 2017 false java.util.Date Wed Feb 01 00:00:01 GMT 2017 false null false Example of within the last week <p>If the end of the range is not specified then the end of the range is unbounded.</p> JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.startOffset(-7L)\n// end is not set - it is unbounded\n.offsetUnit(TimeUnit.DAY)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"startOffset\" : -7,\n\"offsetUnit\" : \"DAY\"\n}\n</code></pre> <pre><code>g.InDateRange( \nstart_offset=-7, \noffset_unit=\"DAY\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Sun Oct 30 11:00:11 GMT 2022 false java.util.Date Tue Nov 01 11:00:11 GMT 2022 true java.util.Date Sun Nov 06 11:00:11 GMT 2022 true java.util.Date Mon Nov 07 11:00:11 GMT 2022 true null false Example of exactly 7 hours ago JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.startOffset(-7L)\n.endOffset(-6L)\n.endInclusive(false)\n.offsetUnit(TimeUnit.HOUR)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"startOffset\" : -7,\n\"endOffset\" : -6,\n\"endInclusive\" : false,\n\"offsetUnit\" : \"HOUR\"\n}\n</code></pre> <pre><code>g.InDateRange( \nstart_offset=-7, \nend_offset=-6, \noffset_unit=\"HOUR\", \nend_inclusive=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Mon Nov 07 03:00:12 GMT 2022 false java.util.Date Mon Nov 07 04:00:22 GMT 2022 true java.util.Date Mon Nov 07 05:00:02 GMT 2022 true java.util.Date Mon Nov 07 05:00:22 GMT 2022 false java.util.Date Mon Nov 07 11:00:12 GMT 2022 false null false"},{"location":"reference/predicates-guide/koryphe-predicates/#indaterangedual","title":"InDateRangeDual","text":"<p>Tests if a start Comparable and end Comparable are within a provided range. Specifically the start Comparable has to be greater than the start bound and the end Comparable has to be less than the end bound. By default the range is inclusive, this can be toggled using the startInclusive and endInclusive booleans. Javadoc</p> <p>This uses the same input formats as InDateRange.</p> <p>Input type: <code>java.lang.Comparable, java.lang.Comparable</code></p> Example with fully uncontained range JavaJSONPython <pre><code>final InDateRangeDual function = new InDateRangeDual.Builder()\n.start(\"2017/03/01\")\n.end(\"2017/08/01\")\n.startFullyContained(false)\n.endFullyContained(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRangeDual\",\n\"start\" : \"2017/03/01\",\n\"end\" : \"2017/08/01\",\n\"endFullyContained\" : false,\n\"startFullyContained\" : false\n}\n</code></pre> <pre><code>g.InDateRangeDual( \nstart=\"2017/03/01\", \nend=\"2017/08/01\", \nstart_fully_contained=False, \nend_fully_contained=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Wed Feb 01 00:00:00 GMT 2017] false [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Sat Apr 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Mon May 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Fri Sep 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Fri Sep 01 00:00:00 BST 2017, Sun Oct 01 00:00:00 BST 2017] false [ ,] [null, null] false Example with start contained range JavaJSONPython <pre><code>final InDateRangeDual function = new InDateRangeDual.Builder()\n.start(\"2017/03/01\")\n.end(\"2017/08/01\")\n.startFullyContained(true)\n.endFullyContained(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRangeDual\",\n\"start\" : \"2017/03/01\",\n\"end\" : \"2017/08/01\",\n\"endFullyContained\" : false,\n\"startFullyContained\" : true\n}\n</code></pre> <pre><code>g.InDateRangeDual( \nstart=\"2017/03/01\", \nend=\"2017/08/01\", \nstart_fully_contained=True, \nend_fully_contained=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Wed Feb 01 00:00:00 GMT 2017] false [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Sat Apr 01 00:00:00 BST 2017] false [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Mon May 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Fri Sep 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Fri Sep 01 00:00:00 BST 2017, Sun Oct 01 00:00:00 BST 2017] false [ ,] [null, null] false Example with fully contained range JavaJSONPython <pre><code>final InDateRangeDual function = new InDateRangeDual.Builder()\n.start(\"2017/03/01\")\n.end(\"2017/08/01\")\n.startFullyContained(true)\n.endFullyContained(true)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRangeDual\",\n\"start\" : \"2017/03/01\",\n\"end\" : \"2017/08/01\",\n\"endFullyContained\" : true,\n\"startFullyContained\" : true\n}\n</code></pre> <pre><code>g.InDateRangeDual( \nstart=\"2017/03/01\", \nend=\"2017/08/01\", \nstart_fully_contained=True, \nend_fully_contained=True \n)\n</code></pre> Input Type Input Result [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Wed Feb 01 00:00:00 GMT 2017] false [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Sat Apr 01 00:00:00 BST 2017] false [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Mon May 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Fri Sep 01 00:00:00 BST 2017] false [java.util.Date, java.util.Date] [Fri Sep 01 00:00:00 BST 2017, Sun Oct 01 00:00:00 BST 2017] false [ ,] [null, null] false"},{"location":"reference/predicates-guide/koryphe-predicates/#inrange","title":"InRange","text":"<p>Checks if a comparable is within a provided range. Javadoc</p> <p>Input type: <code>java.lang.Comparable</code></p> Example of Long 5 to 10 JavaJSONPython <pre><code>final InRange function = new InRange.Builder&lt;Long&gt;()\n.start(5L)\n.end(10L)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRange\",\n\"start\" : {\n\"Long\" : 5\n},\n\"end\" : {\n\"Long\" : 10\n}\n}\n</code></pre> <pre><code>g.InRange( \nstart={'java.lang.Long': 5}, \nend={'java.lang.Long': 10} \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Long -5 false java.lang.Long 1 false java.lang.Long 5 true java.lang.Long 7 true java.lang.Long 10 true java.lang.Long 20 false java.lang.Integer 7 ClassCastException: java.lang.Long cannot be cast to java.lang.Integer java.lang.String 7 ClassCastException: java.lang.Long cannot be cast to java.lang.String null false Example of Long 5 to 10 exclusive JavaJSONPython <pre><code>final InRange function = new InRange.Builder&lt;Long&gt;()\n.start(5L)\n.end(10L)\n.startInclusive(false)\n.endInclusive(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRange\",\n\"start\" : {\n\"Long\" : 5\n},\n\"end\" : {\n\"Long\" : 10\n},\n\"startInclusive\" : false,\n\"endInclusive\" : false\n}\n</code></pre> <pre><code>g.InRange( \nstart={'java.lang.Long': 5}, \nend={'java.lang.Long': 10}, \nstart_inclusive=False, \nend_inclusive=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Long -5 false java.lang.Long 1 false java.lang.Long 5 false java.lang.Long 7 true java.lang.Long 10 false java.lang.Long 20 false java.lang.Integer 7 ClassCastException: java.lang.Long cannot be cast to java.lang.Integer java.lang.String 7 ClassCastException: java.lang.Long cannot be cast to java.lang.String null false Example of Long 5 less than 10 <p>If the start of the range is not specified then the start of the range is unbounded.</p> JavaJSONPython <pre><code>final InRange function = new InRange.Builder&lt;Long&gt;()\n.end(10L)\n.endInclusive(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRange\",\n\"end\" : {\n\"Long\" : 10\n},\n\"endInclusive\" : false\n}\n</code></pre> <pre><code>g.InRange( \nend={'java.lang.Long': 10}, \nend_inclusive=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Long -5 true java.lang.Long 1 true java.lang.Long 5 true java.lang.Long 7 true java.lang.Long 10 false java.lang.Long 20 false java.lang.Integer 7 ClassCastException: java.lang.Long cannot be cast to java.lang.Integer java.lang.String 7 ClassCastException: java.lang.Long cannot be cast to java.lang.String null false Example of String 'B' to 'D' JavaJSONPython <pre><code>final InRange function = new InRange.Builder&lt;String&gt;()\n.start(\"B\")\n.end(\"D\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRange\",\n\"start\" : \"B\",\n\"end\" : \"D\"\n}\n</code></pre> <pre><code>g.InRange( \nstart=\"B\", \nend=\"D\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String A false java.lang.String B true java.lang.String C true java.lang.String D true java.lang.String c false java.lang.Integer 1 ClassCastException: java.lang.String cannot be cast to java.lang.Integer null false"},{"location":"reference/predicates-guide/koryphe-predicates/#inrangedual","title":"InRangeDual","text":"<p>Checks if two comparables (a start and an end) are within a provided range. Javadoc</p> <p>Input type: <code>java.lang.Comparable, java.lang.Comparable</code></p> Example of Long overlapping range JavaJSONPython <pre><code>final InRangeDual function = new InRangeDual.Builder&lt;Long&gt;()\n.start(5L)\n.end(10L)\n.startFullyContained(false)\n.endFullyContained(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRangeDual\",\n\"start\" : {\n\"Long\" : 5\n},\n\"end\" : {\n\"Long\" : 10\n},\n\"endFullyContained\" : false,\n\"startFullyContained\" : false\n}\n</code></pre> <pre><code>g.InRangeDual( \nstart={'java.lang.Long': 5}, \nend={'java.lang.Long': 10}, \nstart_fully_contained=False, \nend_fully_contained=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Long, java.lang.Long] [1, 4] false [java.lang.Long, java.lang.Long] [1, 7] true [java.lang.Long, java.lang.Long] [6, 7] true [java.lang.Long, java.lang.Long] [7, 11] true [java.lang.Long, java.lang.Long] [11, 20] false [ ,] [null, null] false Example of Long end overlapping range JavaJSONPython <pre><code>final InRangeDual function = new InRangeDual.Builder&lt;Long&gt;()\n.start(5L)\n.end(10L)\n.startFullyContained(true)\n.endFullyContained(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRangeDual\",\n\"start\" : {\n\"Long\" : 5\n},\n\"end\" : {\n\"Long\" : 10\n},\n\"endFullyContained\" : false,\n\"startFullyContained\" : true\n}\n</code></pre> <pre><code>g.InRangeDual( \nstart={'java.lang.Long': 5}, \nend={'java.lang.Long': 10}, \nstart_fully_contained=True, \nend_fully_contained=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Long, java.lang.Long] [1, 4] false [java.lang.Long, java.lang.Long] [1, 7] false [java.lang.Long, java.lang.Long] [6, 7] true [java.lang.Long, java.lang.Long] [7, 11] true [java.lang.Long, java.lang.Long] [11, 20] false [ ,] [null, null] false Example of Long non overlapping range JavaJSONPython <pre><code>final InRangeDual function = new InRangeDual.Builder&lt;Long&gt;()\n.start(5L)\n.end(10L)\n.startFullyContained(true)\n.endFullyContained(true)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRangeDual\",\n\"start\" : {\n\"Long\" : 5\n},\n\"end\" : {\n\"Long\" : 10\n},\n\"endFullyContained\" : true,\n\"startFullyContained\" : true\n}\n</code></pre> <pre><code>g.InRangeDual( \nstart={'java.lang.Long': 5}, \nend={'java.lang.Long': 10}, \nstart_fully_contained=True, \nend_fully_contained=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Long, java.lang.Long] [1, 4] false [java.lang.Long, java.lang.Long] [1, 7] false [java.lang.Long, java.lang.Long] [6, 7] true [java.lang.Long, java.lang.Long] [7, 11] false [java.lang.Long, java.lang.Long] [11, 20] false [ ,] [null, null] false Example Long less than 10 <p>If the start of the range is not specified then the start of the range is unbounded.</p> JavaJSONPython <pre><code>final InRangeDual function = new InRangeDual.Builder&lt;Long&gt;()\n.end(10L)\n.endInclusive(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRangeDual\",\n\"end\" : {\n\"Long\" : 10\n},\n\"endInclusive\" : false\n}\n</code></pre> <pre><code>g.InRangeDual( \nend={'java.lang.Long': 10}, \nend_inclusive=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Long, java.lang.Long] [-5, -1] true [java.lang.Long, java.lang.Long] [1, 6] true [java.lang.Long, java.lang.Long] [6, 6] true [java.lang.Long, java.lang.Long] [6, 7] true [java.lang.Long, java.lang.Long] [6, 10] true [java.lang.Long, java.lang.Long] [10, 20] false [java.lang.Integer, java.lang.Integer] [6, 7] IllegalArgumentException: Input tuple values do not match the required function input types [java.lang.String, java.lang.String] [5, 7] IllegalArgumentException: Input tuple values do not match the required function input types [ ,] [null, null] false"},{"location":"reference/predicates-guide/koryphe-predicates/#intimerange","title":"InTimeRange","text":"<p>Functionally identical to InDateRange, except that it uses Long as the timestamp input type. By default, checks are carried out assuming the data will be in milliseconds. If this is not the case, the time unit can be changed using the timeUnit property. Javadoc</p> <p>Input type: <code>java.lang.Long</code></p> Example with time unit microseconds JavaJSONPython <pre><code>final InTimeRange function = new InTimeRange.Builder()\n.start(\"2017/01/01 01:30:10\")\n.end(\"2017/01/01 01:30:50\")\n.timeUnit(TimeUnit.MICROSECOND)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InTimeRange\",\n\"start\" : \"2017/01/01 01:30:10\",\n\"end\" : \"2017/01/01 01:30:50\",\n\"timeUnit\" : \"MICROSECOND\"\n}\n</code></pre> <pre><code>g.InTimeRange( \nstart=\"2017/01/01 01:30:10\", \nend=\"2017/01/01 01:30:50\", \ntime_unit=\"MICROSECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Long 1483234209000000 false java.lang.Long 1483234210000000 true java.lang.Long 1483234220000000 true java.lang.Long 1483234250000000 true java.lang.Long 1483234251000000 false null false"},{"location":"reference/predicates-guide/koryphe-predicates/#intimerangedual","title":"InTimeRangeDual","text":"<p>Functionally identical to InDateRangeDual. By default, checks are carried out assuming the data will be in milliseconds. If this is not the case, the time unit can be changed using the timeUnit property. Javadoc</p>"},{"location":"reference/predicates-guide/koryphe-predicates/#isa","title":"IsA","text":"<p>Checks if an input is an instance of a class. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example with String JavaJSONPython <pre><code>final IsA function = new IsA(String.class);\n</code></pre> <pre><code>{\n\"class\" : \"IsA\",\n\"type\" : \"java.lang.String\"\n}\n</code></pre> <pre><code>g.IsA( \ntype=\"java.lang.String\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false java.lang.Double 2.5 false java.lang.String abc true Example with Number JavaJSONPython <pre><code>final IsA function = new IsA(Number.class);\n</code></pre> <pre><code>{\n\"class\" : \"IsA\",\n\"type\" : \"java.lang.Number\"\n}\n</code></pre> <pre><code>g.IsA( \ntype=\"java.lang.Number\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true java.lang.Double 2.5 true java.lang.String abc false"},{"location":"reference/predicates-guide/koryphe-predicates/#isequal","title":"IsEqual","text":"<p>Checks if an input is equal to a provided value. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example equal to Integer 5 JavaJSONPython <pre><code>final IsEqual function = new IsEqual(5);\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsEqual\",\n\"value\" : 5\n}\n</code></pre> <pre><code>g.IsEqual( \nvalue=5 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 5 true java.lang.Long 5 false java.lang.String 5 false java.lang.Character 5 false Example equal to String 5 JavaJSONPython <pre><code>final IsEqual function = new IsEqual(\"5\");\n</code></pre> <pre><code>{\n\"class\" : \"IsEqual\",\n\"value\" : \"5\"\n}\n</code></pre> <pre><code>g.IsEqual( \nvalue=\"5\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 5 false java.lang.Long 5 false java.lang.String 5 true java.lang.Character 5 false"},{"location":"reference/predicates-guide/koryphe-predicates/#isfalse","title":"IsFalse","text":"<p>Checks if an input boolean is false. Javadoc</p> <p>Input type: <code>java.lang.Boolean</code></p> Example IsFalse JavaJSONPython <pre><code>final IsFalse function = new IsFalse();\n</code></pre> <pre><code>{\n\"class\" : \"IsFalse\"\n}\n</code></pre> <pre><code>g.IsFalse()\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Boolean true false java.lang.Boolean false true null false java.lang.String true ClassCastException: java.lang.String cannot be cast to java.lang.Boolean"},{"location":"reference/predicates-guide/koryphe-predicates/#istrue","title":"IsTrue","text":"<p>Checks if an input boolean is true. Javadoc</p> <p>Input type: <code>java.lang.Boolean</code></p> Example IsTrue JavaJSONPython <pre><code>final IsTrue function = new IsTrue();\n</code></pre> <pre><code>{\n\"class\" : \"IsTrue\"\n}\n</code></pre> <pre><code>g.IsTrue()\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Boolean true true java.lang.Boolean false false null false java.lang.String true ClassCastException: java.lang.String cannot be cast to java.lang.Boolean"},{"location":"reference/predicates-guide/koryphe-predicates/#isin","title":"IsIn","text":"<p>Checks if an input is in a set of allowed values. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example IsIn JavaJSONPython <pre><code>final IsIn function = new IsIn(5, 5L, \"5\", '5');\n</code></pre> <pre><code>{\n\"class\" : \"IsIn\",\n\"values\" : [ 5, {\n\"Long\" : 5\n}, \"5\", {\n\"Character\" : \"5\"\n} ]\n}\n</code></pre> <pre><code>g.IsIn( \nvalues=[ \n5, \n{'java.lang.Long': 5}, \n\"5\", \n{'java.lang.Character': '5'} \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 5 true java.lang.Long 5 true java.lang.String 5 true java.lang.Character 5 true java.lang.Integer 1 false java.lang.Long 1 false java.lang.String 1 false java.lang.Character 1 false"},{"location":"reference/predicates-guide/koryphe-predicates/#islessthan","title":"IsLessThan","text":"<p>Checks if a comparable is less than a provided value. Javadoc</p> <p>Input type: <code>java.lang.Comparable</code></p> Example IsLessThan with Integer 5 JavaJSONPython <pre><code>final IsLessThan function = new IsLessThan(5);\n</code></pre> <pre><code>{\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 5\n}\n</code></pre> <pre><code>g.IsLessThan( \nvalue=5, \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true java.lang.Long 1 false java.lang.Integer 5 false java.lang.Long 5 false java.lang.Integer 10 false java.lang.Long 10 false java.lang.String 1 false Example IsLessThan or equal with Integer 5 JavaJSONPython <pre><code>final IsLessThan function = new IsLessThan(5, true);\n</code></pre> <pre><code>{\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : true,\n\"value\" : 5\n}\n</code></pre> <pre><code>g.IsLessThan( \nvalue=5, \nor_equal_to=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true java.lang.Long 1 false java.lang.Integer 5 true java.lang.Long 5 false java.lang.Integer 10 false java.lang.Long 10 false java.lang.String 1 false Example IsLessThan with String 'B' JavaJSONPython <pre><code>final IsLessThan function = new IsLessThan(\"B\");\n</code></pre> <pre><code>{\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : \"B\"\n}\n</code></pre> <pre><code>g.IsLessThan( \nvalue=\"B\", \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false java.lang.String A true java.lang.String B false java.lang.String C false"},{"location":"reference/predicates-guide/koryphe-predicates/#ismorethan","title":"IsMoreThan","text":"<p>Checks if a comparable is more than a provided value. Javadoc</p> <p>Input type: <code>java.lang.Comparable</code></p> Example IsMoreThan with Integer 5 JavaJSONPython <pre><code>final IsMoreThan function = new IsMoreThan(5);\n</code></pre> <pre><code>{\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 5\n}\n</code></pre> <pre><code>g.IsMoreThan( \nvalue=5, \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false java.lang.Integer 5 false java.lang.Integer 10 true Example IsMoreThan or equal with Integer 5 JavaJSONPython <pre><code>final IsMoreThan function = new IsMoreThan(5, true);\n</code></pre> <pre><code>{\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : true,\n\"value\" : 5\n}\n</code></pre> <pre><code>g.IsMoreThan( \nvalue=5, \nor_equal_to=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false java.lang.Integer 5 true java.lang.Integer 10 true Example IsMoreThan with String 'B' JavaJSONPython <pre><code>final IsMoreThan function = new IsMoreThan(\"B\");\n</code></pre> <pre><code>{\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : \"B\"\n}\n</code></pre> <pre><code>g.IsMoreThan( \nvalue=\"B\", \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false java.lang.String A false java.lang.String B false java.lang.String C true"},{"location":"reference/predicates-guide/koryphe-predicates/#islongerthan","title":"IsLongerThan","text":"<p>Checks if the length of an input is more than a value. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example testing size/length attribute is greater than 5 JavaJSONPython <pre><code>final IsLongerThan predicate = new IsLongerThan(5);\n</code></pre> <pre><code>{\n\"class\" : \"IsLongerThan\",\n\"minLength\" : 5,\n\"orEqualTo\" : false\n}\n</code></pre> <pre><code>g.IsLongerThan( \nmin_length=5, \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String testString true java.lang.String aTest false [Ljava.lang.String; [null, null, null, null, null] false [Ljava.lang.String; [null, null, null, null, null, null, null, null, null, null] true java.util.Arrays$ArrayList [0, 1, 2, 3, 4, 5] true Example testing size/length attribute is greater than or equal to 5 JavaJSONPython <pre><code>final IsLongerThan predicate = new IsLongerThan(5, true);\n</code></pre> <pre><code>{\n\"class\" : \"IsLongerThan\",\n\"minLength\" : 5,\n\"orEqualTo\" : true\n}\n</code></pre> <pre><code>g.IsLongerThan( \nmin_length=5, \nor_equal_to=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String test false java.lang.String testString true java.lang.String aTest true [Ljava.lang.String; [null, null, null, null, null] true [Ljava.lang.String; [null, null, null, null, null, null, null, null, null, null] true java.util.Arrays$ArrayList [0, 1, 2, 3, 4, 5] true"},{"location":"reference/predicates-guide/koryphe-predicates/#isshorterthan","title":"IsShorterThan","text":"<p>Checks if the length of an input is more than than a value. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example testing size/length attribute is shorter than 4 JavaJSONPython <pre><code>final IsShorterThan function = new IsShorterThan(4);\n</code></pre> <pre><code>{\n\"class\" : \"IsShorterThan\",\n\"maxLength\" : 4,\n\"orEqualTo\" : false\n}\n</code></pre> <pre><code>g.IsShorterThan( \nmax_length=4, \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String 123 true java.lang.String 1234 false [Ljava.lang.Integer; [1, 2, 3] true [Ljava.lang.Integer; [1, 2, 3, 4] false java.util.ArrayList [1, 2, 3] true java.util.ArrayList [1, 2, 3, 4] false java.util.HashMap {1=a, 2=b, 3=c} true java.util.HashMap {4=d} true java.lang.Integer 10000 IllegalArgumentException: Could not determine the size of the provided value java.lang.Long 10000 IllegalArgumentException: Could not determine the size of the provided value"},{"location":"reference/predicates-guide/koryphe-predicates/#isxlessthany","title":"IsXLessThanY","text":"<p>Checks the first comparable is less than the second comparable. Javadoc</p> <p>Input type: <code>java.lang.Comparable, java.lang.Comparable</code></p> Example IsXLessThanY JavaJSONPython <pre><code>final IsXLessThanY function = new IsXLessThanY();\n</code></pre> <pre><code>{\n\"class\" : \"IsXLessThanY\"\n}\n</code></pre> <pre><code>g.IsXLessThanY()\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Integer] [1, 5] true [java.lang.Integer, java.lang.Integer] [5, 5] false [java.lang.Integer, java.lang.Integer] [10, 5] false [java.lang.Long, java.lang.Integer] [1, 5] false [java.lang.Long, java.lang.Long] [1, 5] true [java.lang.Long, java.lang.Long] [5, 5] false [java.lang.Long, java.lang.Long] [10, 5] false [java.lang.Integer, java.lang.Long] [1, 5] false [java.lang.String, java.lang.String] [bcd, cde] true [java.lang.String, java.lang.String] [bcd, abc] false [java.lang.String, java.lang.Integer] [1, 5] false"},{"location":"reference/predicates-guide/koryphe-predicates/#isxmorethany","title":"IsXMoreThanY","text":"<p>Checks the first comparable is more than the second comparable. Javadoc</p> <p>Input type: <code>java.lang.Comparable, java.lang.Comparable</code></p> Example IsXMoreThanY JavaJSONPython <pre><code>final IsXMoreThanY function = new IsXMoreThanY();\n</code></pre> <pre><code>{\n\"class\" : \"IsXMoreThanY\"\n}\n</code></pre> <pre><code>g.IsXMoreThanY()\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Integer] [1, 5] false [java.lang.Integer, java.lang.Integer] [5, 5] false [java.lang.Integer, java.lang.Integer] [10, 5] true [java.lang.Long, java.lang.Integer] [10, 5] false [java.lang.Long, java.lang.Long] [1, 5] false [java.lang.Long, java.lang.Long] [5, 5] false [java.lang.Long, java.lang.Long] [10, 5] true [java.lang.Integer, java.lang.Long] [10, 5] false [java.lang.String, java.lang.String] [bcd, cde] false [java.lang.String, java.lang.String] [bcd, abc] true [java.lang.String, java.lang.Integer] [10, 5] false"},{"location":"reference/predicates-guide/koryphe-predicates/#mapcontains","title":"MapContains","text":"<p>Checks if a map contains a given key. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example MapContains JavaJSONPython <pre><code>final MapContains function = new MapContains(\"a\");\n</code></pre> <pre><code>{\n\"class\" : \"MapContains\",\n\"key\" : \"a\"\n}\n</code></pre> <pre><code>g.MapContains( \nkey=\"a\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.HashMap {a=1, b=2, c=3} true java.util.HashMap {b=2, c=3} false java.util.HashMap {a=null, b=2, c=3} true"},{"location":"reference/predicates-guide/koryphe-predicates/#mapcontainspredicate","title":"MapContainsPredicate","text":"<p>Checks if a map contains a key that matches a predicate. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example of MapContainsPredicate with Regex Pedicate JavaJSONPython <pre><code>final MapContainsPredicate function = new MapContainsPredicate(new Regex(\"a.*\"));\n</code></pre> <pre><code>{\n\"class\" : \"MapContainsPredicate\",\n\"keyPredicate\" : {\n\"class\" : \"Regex\",\n\"value\" : {\n\"java.util.regex.Pattern\" : \"a.*\"\n}\n}\n}\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.MapContainsPredicate\",\n\"keyPredicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Regex\",\n\"value\" : {\n\"java.util.regex.Pattern\" : \"a.*\"\n}\n}\n}\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.HashMap {a1=1, a2=2, b=2, c=3} true java.util.HashMap {b=2, c=3} false java.util.HashMap {a=null, b=2, c=3} true"},{"location":"reference/predicates-guide/koryphe-predicates/#predicatemap","title":"PredicateMap","text":"<p>Extracts a value from a map then applies the predicate to it. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example FreqMap is more than 2 JavaJSONPython <pre><code>final PredicateMap function = new PredicateMap(\"key1\", new IsMoreThan(2L));\n</code></pre> <pre><code>{\n\"class\" : \"PredicateMap\",\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : {\n\"Long\" : 2\n}\n},\n\"key\" : \"key1\"\n}\n</code></pre> <pre><code>g.PredicateMap( \nkey=\"key1\", \npredicate=g.IsMoreThan( \nvalue={'java.lang.Long': 2}, \nor_equal_to=False \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result uk.gov.gchq.gaffer.types.FreqMap {key1=1} false uk.gov.gchq.gaffer.types.FreqMap {key1=2} false uk.gov.gchq.gaffer.types.FreqMap {key1=3} true uk.gov.gchq.gaffer.types.FreqMap {key1=3, key2=0} true uk.gov.gchq.gaffer.types.FreqMap {key2=3} false Example FreqMap is more than or equal to 2 JavaJSONPython <pre><code>final PredicateMap function = new PredicateMap(\"key1\", new IsMoreThan(2L, true));\n</code></pre> <pre><code>{\n\"class\" : \"PredicateMap\",\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : true,\n\"value\" : {\n\"Long\" : 2\n}\n},\n\"key\" : \"key1\"\n}\n</code></pre> <pre><code>g.PredicateMap( \nkey=\"key1\", \npredicate=g.IsMoreThan( \nvalue={'java.lang.Long': 2}, \nor_equal_to=True \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result uk.gov.gchq.gaffer.types.FreqMap {key1=1} false uk.gov.gchq.gaffer.types.FreqMap {key1=2} true uk.gov.gchq.gaffer.types.FreqMap {key1=3} true uk.gov.gchq.gaffer.types.FreqMap {key1=3, key2=0} true uk.gov.gchq.gaffer.types.FreqMap {key2=3} false Example Map with date key having value that exists JavaJSONPython <pre><code>final PredicateMap function = new PredicateMap(new Date(0L), new Exists());\n</code></pre> <pre><code>{\n\"class\" : \"PredicateMap\",\n\"predicate\" : {\n\"class\" : \"Exists\"\n},\n\"key\" : {\n\"Date\" : 0\n}\n}\n</code></pre> <pre><code>g.PredicateMap( \nkey={'java.util.Date': 0}, \npredicate=g.Exists() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.HashMap {Thu Jan 01 01:00:00 GMT 1970=1} true java.util.HashMap {Mon Nov 07 11:00:16 GMT 2022=2} false"},{"location":"reference/predicates-guide/koryphe-predicates/#stringcontains","title":"StringContains","text":"<p>Checks if a string contains some value. Javadoc</p> <p>Note</p> <p>The StringContains predicate is case sensitive by default, hence only exact matches are found.</p> <p>Input type: <code>java.lang.String</code></p> Example StringContains JavaJSONPython <pre><code>final StringContains function = new StringContains(\"test\");\n</code></pre> <pre><code>{\n\"class\" : \"StringContains\",\n\"value\" : \"test\",\n\"ignoreCase\" : false\n}\n</code></pre> <pre><code>g.StringContains( \nvalue=\"test\", \nignore_case=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String This is a Test false java.lang.String Test false java.lang.String test true Example StringContains ignoring case JavaJSONPython <pre><code>final StringContains function = new StringContains(\"test\", true);\n</code></pre> <pre><code>{\n\"class\" : \"StringContains\",\n\"value\" : \"test\",\n\"ignoreCase\" : true\n}\n</code></pre> <pre><code>g.StringContains( \nvalue=\"test\", \nignore_case=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String This is a Test true java.lang.String Test true java.lang.String test true"},{"location":"reference/predicates-guide/koryphe-predicates/#regex","title":"Regex","text":"<p>Checks if a string matches a pattern. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example abc JavaJSONPython <pre><code>final Regex function = new Regex(\"[a-d0-4]\");\n</code></pre> <pre><code>{\n\"class\" : \"Regex\",\n\"value\" : {\n\"java.util.regex.Pattern\" : \"[a-d0-4]\"\n}\n}\n</code></pre> <pre><code>g.Regex( \nvalue={'java.util.regex.Pattern': '[a-d0-4]'} \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String a true java.lang.String z false java.lang.String az false java.lang.Character a ClassCastException: java.lang.Character cannot be cast to java.lang.String java.lang.String 2 true java.lang.Integer 2 ClassCastException: java.lang.Integer cannot be cast to java.lang.String java.lang.Long 2 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/predicates-guide/koryphe-predicates/#multiregex","title":"MultiRegex","text":"<p>Checks if a string matches at least one pattern. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example MultiRegex JavaJSONPython <pre><code>final MultiRegex function = new MultiRegex(new Pattern[]{Pattern.compile(\"[a-d]\"), Pattern.compile(\"[0-4]\")});\n</code></pre> <pre><code>{\n\"class\" : \"MultiRegex\",\n\"value\" : [ {\n\"java.util.regex.Pattern\" : \"[a-d]\"\n}, {\n\"java.util.regex.Pattern\" : \"[0-4]\"\n} ]\n}\n</code></pre> <pre><code>g.MultiRegex( \nvalue=[ \n{'java.util.regex.Pattern': '[a-d]'}, \n{'java.util.regex.Pattern': '[0-4]'} \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String a true java.lang.String z false java.lang.String az false java.lang.Character a ClassCastException: java.lang.Character cannot be cast to java.lang.String java.lang.String 2 true java.lang.Integer 2 ClassCastException: java.lang.Integer cannot be cast to java.lang.String java.lang.Long 2 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/predicates-guide/predicates/","title":"Predicates Guide","text":"<p>Predicates are filter functions. Most come from the Koryphe library and some are part of Gaffer itself.</p>"},{"location":"reference/predicates-guide/predicates/#table-of-all-gaffer-predicates","title":"Table of all Gaffer Predicates","text":"<p>Note</p> <p>Predicates below which are missing a link have not been documented on this site yet.</p> Predicate Origin <code>impl.predicate.AgeOff</code> Koryphe <code>impl.predicate.AgeOffFromDays</code> Koryphe <code>impl.predicate.And</code> Koryphe <code>impl.predicate.AreEqual</code> Koryphe <code>impl.predicate.AreIn</code> Koryphe <code>impl.predicate.CollectionContains</code> Koryphe <code>impl.predicate.Exists</code> Koryphe <code>impl.predicate.If</code> Koryphe <code>impl.predicate.Or</code> Koryphe <code>impl.predicate.Not</code> Koryphe <code>impl.predicate.range.InDateRange</code> Koryphe <code>impl.predicate.range.InDateRangeDual</code> Koryphe <code>impl.predicate.range.InRange</code> Koryphe <code>impl.predicate.range.InRangeDual</code> Koryphe <code>impl.predicate.range.InTimeRange</code> Koryphe <code>impl.predicate.range.InTimeRangeDual</code> Koryphe <code>impl.predicate.IsA</code> Koryphe <code>impl.predicate.IsEqual</code> Koryphe <code>impl.predicate.IsFalse</code> Koryphe <code>impl.predicate.IsTrue</code> Koryphe <code>impl.predicate.IsIn</code> Koryphe <code>impl.predicate.IsLessThan</code> Koryphe <code>impl.predicate.IsMoreThan</code> Koryphe <code>impl.predicate.IsLongerThan</code> Koryphe <code>impl.predicate.IsShorterThan</code> Koryphe <code>impl.predicate.IsXLessThanY</code> Koryphe <code>impl.predicate.IsXMoreThanY</code> Koryphe <code>impl.predicate.MapContains</code> Koryphe <code>impl.predicate.MapContainsPredicate</code> Koryphe <code>predicate.PredicateMap</code> Koryphe <code>predicate.AdaptedPredicate</code> Koryphe <code>predicate.PredicateComposite</code> Koryphe <code>impl.predicate.StringContains</code> Koryphe <code>impl.predicate.Regex</code> Koryphe <code>impl.predicate.MultiRegex</code> Koryphe <code>tuple.predicate.IntegerTupleAdaptedPredicate</code> Koryphe <code>tuple.predicate.TupleAdaptedPredicate</code> Koryphe <code>tuple.predicate.TupleAdaptedPredicateComposite</code> Koryphe <code>access.predicate.user.DefaultUserPredicate</code> Gaffer <code>access.predicate.user.NoAccessUserPredicate</code> Gaffer <code>access.predicate.user.UnrestrictedAccessUserPredicate</code> Gaffer <code>data.element.comparison.ElementJoinComparator</code> Gaffer <code>data.element.function.ElementFilter</code> Gaffer <code>data.element.function.PropertiesFilter</code> Gaffer <code>data.elementdefinition.view.access.predicate.user.NamedViewWriteUserPredicate</code> Gaffer <code>federatedstore.access.predicate.user.FederatedGraphReadUserPredicate</code> Gaffer <code>federatedstore.access.predicate.user.FederatedGraphWriteUserPredicate</code> Gaffer <code>graph.hook.migrate.predicate.TransformAndFilter</code> Gaffer <code>rest.example.ExampleFilterFunction</code> Gaffer <code>sketches.clearspring.cardinality.predicate.HyperLogLogPlusIsLessThan</code> Gaffer <code>sketches.datasketches.cardinality.predicate.HllSketchIsLessThan</code> Gaffer <code>store.util.AggregatorUtil$IsElementAggregated</code> Gaffer <code>time.predicate.RBMBackedTimestampSetInRange</code> Gaffer"},{"location":"reference/properties-guide/advanced/","title":"Advanced Properties","text":"<p>These properties use advanced sketch structures from the Clearspring and Datasketches libraries.</p>"},{"location":"reference/properties-guide/advanced/#introduction","title":"Introduction","text":"<p>A sketch is a compact data structure that gives an approximate answer to a question. For example, a Hll sketch can estimate the cardinality of a set with billions of elements with a small relative error, using orders of magnitude less storage than storing the full set.</p> <p>Gaffer allows sketches to be stored on Entities and Edges. These sketches can be continually updated as new data arrives. Here are some example applications of sketches in Gaffer:</p> <ul> <li>Using a Hll sketch to provide a very quick estimate of the degree of a node.</li> <li>Using a quantiles sketch to estimate the median score associated to an edge, or the 99th percentile of the scores seen on an edge.</li> <li>Using a reservoir items sketch to store a sample of all the distinct labels associated to an edge.</li> <li>Using theta sketches to estimate the number of distinct edges seen on a particular day, the number seen on the previous day and the overlap between the two days.</li> </ul> <p>Gaffer provides serialisers and aggregators for sketches from two different libraries: the Apache version of the Datasketches library and the Clearspring. The Clearspring HyperLogLogPlus has been deprecated in Gaffer and we recommend the Datasketches HllSketch to users for the reasons described below.  </p> <p>For the Datasketches library, serialisers and aggregators are provided for several sketches. These sketches include:</p> <ul> <li>HyperLogLog sketches for estimating the cardinality of a set (see class org.apache.datasketches.hll.HllSketch);</li> <li>Frequency sketches for estimating the frequencies of items such as longs and strings respectively (see for example class org.apache.datasketches.frequencies.LongsSketch);</li> <li>Quantile sketches for estimating the quantiles of doubles or strings seen on an element (see for example class org.apache.datasketches.quantiles.DoublesSketch);</li> <li>Sampling sketches for maintaining samples of items seen on an element (see for example class org.apache.datasketches.sampling.ReservoirItemsSketch);</li> <li>Theta sketches for estimating the union and intersection of sets (see for example class org.apache.datasketches.theta.Sketch).</li> </ul> <p>Most of the Datasketches sketches come in two forms: a standard sketch form and a \"union\" form. The latter is technically not a sketch. It is an operator that allows efficient union operations of two sketches. It also allows updating the sketch with individual items. In order to obtain estimates from it, it is necessary to first obtain a sketch from it, using a method called <code>getResult()</code>. There are some interesting trade-offs in the serialisation and aggregation speeds between the sketches and the unions. If in doubt, use the standard sketches. Examples are provided for the standard sketches, but not for the unions.</p> <p>For the deprecated Clearspring library, a serialiser and an aggregator is provided for the <code>HyperLogLogPlus</code> sketch. This is an implementation of the HyperLogLog++ algorithm described in this paper.</p>"},{"location":"reference/properties-guide/advanced/#class-list","title":"Class List","text":"Property Full Class <code>HyperLogLogPlus</code> <code>com.clearspring.analytics.stream.cardinality.HyperLogLogPlus</code> <code>HllSketch</code> <code>org.apache.datasketches.hll.HllSketch</code> <code>LongsSketch</code> <code>org.apache.datasketches.frequencies.LongsSketch</code> <code>DoublesSketch</code> <code>org.apache.datasketches.quantiles.DoublesSketch</code> <code>ReservoirItemsSketch</code> <code>org.apache.datasketches.sampling.ReservoirItemsSketch</code> <code>ThetaSketch</code> <code>org.apache.datasketches.theta.Sketch</code>"},{"location":"reference/properties-guide/advanced/#predicate-support","title":"Predicate Support","text":"<p>The advanced properties all support these predicates:</p> <ul> <li><code>And</code></li> <li><code>Or</code></li> <li><code>Not</code></li> <li><code>If</code></li> <li><code>Exists</code></li> <li><code>IsA</code></li> <li><code>IsIn</code></li> <li><code>IsEqual</code></li> <li><code>PropertiesFilter</code></li> </ul> <p>Some advanced properties also have specilaised predicates:</p> Property Predicate <code>HyperLogLogPlus</code> <code>uk.gov.gchq.gaffer.sketches.clearspring.cardinality.predicate.HyperLogLogPlusIsLessThan</code> <code>HllSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.cardinality.predicate.HllSketchIsLessThan</code>"},{"location":"reference/properties-guide/advanced/#aggregator-support","title":"Aggregator Support","text":"<p>The <code>First</code> and <code>Last</code> binary operators are supported by all advanced properties.</p> <p>Each advanced property has a specilaised aggregator:</p> Property Binary Operator <code>HyperLogLogPlus</code> <code>uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator</code> <code>HllSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator</code> <code>LongsSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.frequencies.binaryoperator.LongsSketchAggregator</code> <code>DoublesSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.quantiles.binaryoperator.DoublesSketchAggregator</code> <code>ReservoirItemsSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.sampling.binaryoperator.ReservoirItemsSketchAggregator</code> <code>ThetaSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.theta.binaryoperator.SketchAggregator</code>"},{"location":"reference/properties-guide/advanced/#serialiser-support","title":"Serialiser Support","text":"<p>All advanced properties support the <code>NullSerialiser</code> and each has (at least one of) their own specialised serialiser(s):</p> Property Serialiser <code>HyperLogLogPlus</code> <code>uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser</code> <code>HllSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser</code> <code>LongsSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.frequencies.serialisation.LongsSketchSerialiser</code> <code>DoublesSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.quantiles.serialisation.DoublesSketchSerialiser</code> <code>ReservoirItemsSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.sampling.serialisation.ReservoirNumbersSketchSerialiser</code> <code>ReservoirItemsSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.sampling.serialisation.ReservoirStringsSketchSerialiser</code> <code>ThetaSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.theta.serialisation.SketchSerialiser</code>"},{"location":"reference/properties-guide/advanced/#examples","title":"Examples","text":"<p>This section contains examples for how to use the advanced properties.</p>"},{"location":"reference/properties-guide/advanced/#hyperloglogplus","title":"HyperLogLogPlus","text":"<p>This example demonstrates how the HyperLogLogPlus sketch property from the Clearspring library can be used to maintain an estimate of the degree of a vertex.</p> <p>Warning</p> <p>As of 2.1.0, we have deprecated the use of Clearspring's <code>HyperLogLogPlus</code> within Gaffer and recommend using Datasketches' <code>HllSketch</code> for approximate cardinality instead. This is because <code>HllSketch</code> has better performance as shown in the Datasketches documentation.</p> Example storing an estimate of the degree of a vertex using HyperLogLogPlus <p>Every time an Edge <code>A -&gt; B</code> is added to graph, we also add an Entity for <code>A</code> with a property of type HyperLogLogPlus containing <code>B</code>, and an Entity for <code>B</code> with a property of type HyperLogLogPlus containing <code>A</code>. The aggregator for the HyperLogLogPluses merges the new data with the pre-existing cardinality, so that after querying for the Entity the HyperLogLogPlus property gives us an estimate of the degree.</p>"},{"location":"reference/properties-guide/advanced/#elements-schema","title":"Elements schema","text":"<p>This is our new elements schema. The entity type <code>cardinality</code> has a property called 'approxCardinality'. This will store the HyperLogLogPlus object.</p> <pre><code>{\n\"entities\": {\n\"cardinality\": {\n\"vertex\": \"vertex.string\",\n\"properties\": {\n\"approxCardinality\": \"hyperLogLogPlus\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema","title":"Types schema","text":"<p>We have added a new type - 'hyperLogLogPlus'. This is a <code>com.clearspring.analytics.stream.cardinality.HyperLogLogPlus</code> object. We also added in the serialiser and aggregator for the HyperLogLogPlus object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new entities are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"hyperLogLogPlus\": {\n\"class\": \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser\"\n}\n}\n}\n}\n</code></pre> <p>Only one entity is in the graph. This was added 1000 times, and each time it had the 'approxCardinality' property containing a unique vertex. Here is the Entity:</p> <pre><code>Entity[vertex=A,group=cardinality,properties=Properties[approxCardinality=&lt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus&gt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@39075f64]]\n</code></pre> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. We can fetch the cardinality for the vertex using the following code:</p> <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EntitySeed(\"A\"))\n.build();\nfinal Element element;\ntry (final CloseableIterable&lt;? extends Element&gt; elements = graph.execute(query, user)) {\nelement = elements.iterator().next();\n}\nfinal HyperLogLogPlus hyperLogLogPlus = (HyperLogLogPlus) element.getProperty(\"approxCardinality\");\nfinal double approxDegree = hyperLogLogPlus.cardinality();\nfinal String degreeEstimate = \"Entity A has approximate degree \" + approxDegree;\n</code></pre> <p>The results are as follows. As an Entity was added 1000 times, each time with a different vertex, then we would expect the degree to be approximately 1000.</p> <pre><code>Entity A has approximate degree 1113.0\n</code></pre>"},{"location":"reference/properties-guide/advanced/#hllsketch","title":"HllSketch","text":"<p>This example demonstrates how the HllSketch sketch property from the Datasketches library can be used to maintain an estimate of the degree of a vertex.</p> Example storing an estimate of the degree of a vertex using HllSketch <p>Every time an Edge <code>A -&gt; B</code> is added to graph, we also add an Entity for <code>A</code> with a property of type HllSketch containing <code>B</code>, and an Entity for <code>B</code> with a property of type HllSketch containing <code>A</code>. The aggregator for the HllSketches merges the new data with the pre-existing cardinality, so that after querying for the Entity the HllSketch property gives us an estimate of the degree.</p>"},{"location":"reference/properties-guide/advanced/#elements-schema_1","title":"Elements schema","text":"<p>This is our new elements schema. The entity type <code>cardinality</code> has a property called 'approxCardinality'. This will store the HllSketch object.</p> <pre><code>{\n\"entities\": {\n\"cardinality\": {\n\"vertex\": \"vertex.string\",\n\"properties\": {\n\"approxCardinality\": \"hllSketch\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema_1","title":"Types schema","text":"<p>We have added a new type - <code>hllSketch</code>. This is a <code>org.apache.datasketches.hll.HllSketch</code> object. We also added in the serialiser and aggregator for the HllSketch object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new entities are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"hllSketch\": {\n\"class\": \"org.apache.datasketches.hll.HllSketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser\"\n}\n}\n}\n}\n</code></pre> <p>Only one entity is in the graph. This was added 1000 times, and each time it had the 'approxCardinality' property containing a unique vertex. Here is the Entity:</p> <pre><code>Entity[vertex=A,group=cardinality,properties=Properties[approxCardinality=&lt;org.apache.datasketches.hll.HllSketch&gt;### HLL SKETCH SUMMARY: \n  Log Config K   : 10\n  Hll Target     : HLL_4\n  Current Mode   : HLL\n  LB             : 986.8136434119266\n  Estimate       : 1018.8398354963819\n  UB             : 1052.991638617674\n  OutOfOrder Flag: true\n  CurMin         : 0\n  NumAtCurMin    : 374\n  HipAccum       : 1045.0654080765041\n  KxQ0           : 562.4995727539062\n  KxQ1           : 0.0\n]]\n</code></pre> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. We can fetch the cardinality for the vertex using the following code:</p> <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EntitySeed(\"A\"))\n.build();\nfinal Element element;\ntry (final CloseableIterable&lt;? extends Element&gt; elements = graph.execute(query, user)) {\nelement = elements.iterator().next();\n}\nfinal HllSketch hllSketch = (HllSketch) element.getProperty(\"approxCardinality\");\nfinal double approxDegree = hllSketch.getEstimate();\nfinal String degreeEstimate = \"Entity A has approximate degree \" + approxDegree;\n</code></pre> <p>The results are as follows. As an Entity was added 1000 times, each time with a different vertex, then we would expect the degree to be approximately 1000.</p> <pre><code>Entity A has approximate degree 1018.8398354963819\n</code></pre>"},{"location":"reference/properties-guide/advanced/#longssketch","title":"LongsSketch","text":"<p>This example demonstrates how the LongsSketch sketch property from the Datasketches library can be used to maintain estimates of the frequencies of Longs stored on vertices and edges.</p> Example storing an estimate of frequencies of Longs using LongsSketch <p>For example suppose every time an edge is observed there is a long value associated with it which specifies the size of the interaction. Storing all the different longs on the edge could be expensive in storage. Instead we can use a LongsSketch which will give us approximate counts of the number of times a particular long was observed.</p>"},{"location":"reference/properties-guide/advanced/#elements-schema_2","title":"Elements schema","text":"<p>This is our new elements schema. The edge has a property called 'longsSketch'. This will store the LongsSketch object.</p> <pre><code>{\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"longsSketch\": \"longs.sketch\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema_2","title":"Types schema","text":"<p>We have added a new type - 'longs.sketch'. This is a <code>org.apache.datasketches.frequencies.LongsSketch</code> object. We also added in the serialiser and aggregator for the LongsSketch object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new edges are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"longs.sketch\": {\n\"class\": \"org.apache.datasketches.frequencies.LongsSketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.frequencies.binaryoperator.LongsSketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.frequencies.serialisation.LongsSketchSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>Only one edge is in the graph. This was added 1000 times, and each time it had the 'longs.sketch' property containing a randomly generated long between 0 and 9 (inclusive). The sketch does not retain all the distinct occurrences of these long values, but allows one to estimate the number of occurrences of the different values. Here is the Edge:</p> <pre><code>Edge[source=A,destination=B,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[longsSketch=&lt;org.apache.datasketches.frequencies.LongsSketch&gt;FrequentLongsSketch:\n  Stream Length    : 1000\n  Max Error Offset : 0\nReversePurgeLongHashMap:\n        Index:     States              Values Keys\n            0:          1                 112 0\n            3:          1                  96 6\n            5:          1                  92 4\n            6:          2                 103 5\n            7:          1                  91 2\n            8:          2                  98 8\n            9:          5                  98 9\n            12:          1                 106 1\n            13:          1                  99 7\n            14:          1                 105 3\n]]\n</code></pre> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. To get value from it we need to call methods on the LongsSketch object. Let's get estimates of the frequencies of the values 1 and 9. We can fetch all cardinalities for all the vertices using the following code:</p> <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n.build();\nfinal Element edge;\ntry (final CloseableIterable&lt;? extends Element&gt; edges = graph.execute(query, user)) {\nedge = edges.iterator().next();\n}\nfinal LongsSketch longsSketch = (LongsSketch) edge.getProperty(\"longsSketch\");\nfinal String estimates = \"Edge A-B: 1L seen approximately \" + longsSketch.getEstimate(1L)\n+ \" times, 9L seen approximately \" + longsSketch.getEstimate(9L) + \" times.\";\n</code></pre> <p>The results are as follows. As 1000 edges were generated with a long randomly sampled from 0 to 9 then the occurrence of each is approximately 100.</p> <pre><code>Edge A-B: 1L seen approximately 106 times, 9L seen approximately 98 times.\n</code></pre>"},{"location":"reference/properties-guide/advanced/#doublessketch","title":"DoublesSketch","text":"<p>This example demonstrates how the DoublesSketch sketch property from the Datasketches library can be used to maintain estimates of the quantiles of a distribution of Doubles.</p> Example storing an estimate of quantiles of a distribution of Doubles using LongsSketch <p>Suppose that every time an edge is observed, there is a double value associated with it, for example a value between 0 and 1 giving the score of the edge. Instead of storing a property that contains all the doubles observed, we can store a DoublesSketch which will allow us to estimate the median double, the 99th percentile, etc.</p>"},{"location":"reference/properties-guide/advanced/#elements-schema_3","title":"Elements schema","text":"<p>This is our new elements schema. The edge has a property called 'doublesSketch'. This will store the DoublesSketch object.</p> <pre><code>{\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"doublesSketch\": \"doubles.sketch\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema_3","title":"Types schema","text":"<p>We have added a new type - 'doubles.sketch'. This is a <code>org.apache.datasketches.quantiles.DoublesSketch</code> object. We also added in the serialiser and aggregator for the DoublesSketch object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new edges are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"doubles.sketch\": {\n\"class\": \"org.apache.datasketches.quantiles.DoublesSketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.quantiles.binaryoperator.DoublesSketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.quantiles.serialisation.DoublesSketchSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>Here is the Edge:</p> <pre><code>Edge[source=A,destination=B,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[doublesSketch=&lt;org.apache.datasketches.quantiles.DirectUpdateDoublesSketchR&gt;\n### Quantiles DirectUpdateDoublesSketchR SUMMARY: \n  Empty                        : false\n  Direct, Capacity bytes       : true, 4128\n  Estimation Mode              : true\n  K                            : 128\n  N                            : 1,000\n  Levels (Needed, Total, Valid): 2, 2, 2\n  Level Bit Pattern            : 11\n  BaseBufferCount              : 232\n  Combined Buffer Capacity     : 512\n  Retained Items               : 488\n  Compact Storage Bytes        : 3,936\n  Updatable Storage Bytes      : 4,128\n  Normalized Rank Error        : 1.406%\n  Normalized Rank Error (PMF)  : 1.711%\n  Min Value                    : -3.148\n  Max Value                    : 3.112\n### END SKETCH SUMMARY\n]]\n</code></pre> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. To get value from it we need to call methods on the DoublesSketch object. We can get an estimate for the 25th, 50th and 75th percentiles on edge A-B using the following code:</p> <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n.build();\nfinal Element edge;\ntry (final CloseableIterable&lt;? extends Element&gt; edges = graph.execute(query, user)) {\nedge = edges.iterator().next();\n}\nfinal DoublesSketch doublesSketch = (DoublesSketch) edge.getProperty(\"doublesSketch\");\nfinal double[] quantiles = doublesSketch.getQuantiles(new double[]{0.25D, 0.5D, 0.75D});\nfinal String quantilesEstimate = \"Edge A-B with percentiles of double property - 25th percentile: \" + quantiles[0]\n+ \", 50th percentile: \" + quantiles[1]\n+ \", 75th percentile: \" + quantiles[2];\n</code></pre> <p>The results are as follows. This means that 25% of all the doubles on edge A-B had value less than -0.66, 50% had value less than -0.01 and 75% had value less than 0.64 (the results of the estimation are not deterministic so there may be small differences between the values below and those just quoted).</p> <pre><code>Edge A-B with percentiles of double property - 25th percentile: -0.6630847714290219, 50th percentile: -0.01745655491115906, 75th percentile: 0.6186156511540916\n</code></pre> <p>We can also get the cumulative density predicate of the distribution of the doubles:</p> <pre><code>final GetElements query2 = new GetElements.Builder()\n.input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n.build();\nfinal Element edge2;\ntry (final CloseableIterable&lt;? extends Element&gt; edges2 = graph.execute(query2, user)) {\nedge2 = edges2.iterator().next();\n}\nfinal DoublesSketch doublesSketch2 = (DoublesSketch) edge2.getProperty(\"doublesSketch\");\nfinal double[] cdf = doublesSketch2.getCDF(new double[]{0.0D, 1.0D, 2.0D});\nfinal String cdfEstimate = \"Edge A-B with CDF values at 0: \" + cdf[0]\n+ \", at 1: \" + cdf[1]\n+ \", at 2: \" + cdf[2];\n</code></pre> <p>The results are:</p> <pre><code>Edge A-B with CDF values at 0: 0.51, at 1: 0.844, at 2: 0.986\n</code></pre>"},{"location":"reference/properties-guide/advanced/#reservoiritemssketch","title":"ReservoirItemsSketch","text":"<p>This example demonstrates how the ReservoirItemsSketch sketch property from the Datasketches library can be used to maintain estimates of properties on vertices and edges. Example storing estimates of properties using ReservoirItemsSketch <p>The ReservoirItemsSketch sketch allows a sample of a set of strings to be maintained. We give two examples of this. The first is if when an edge is observed there is a string property associated to it, and there are a lot of different values of that string. We may not want to store all the different values of the string, but we may want to see a random sample of them. The second example is to store on an Entity a sketch which gives a sample of the vertices that are connected to the vertex. Even if we are storing all the edges then producing a random sample of the vertices attached to a vertex may not be quick (for example if a vertex has degree 10,000 then producing a sample of a random 10 neighbours would require scanning all the edges - storing the sketch on the Entity means that the sample will be precomputed and can be returned without scanning the edges)."},{"location":"reference/properties-guide/advanced/#elements-schema_4","title":"Elements schema","text":"<p>This is our new elements schema. The edge has a property called 'stringsSample'. This will store the ReservoirItemsSketch object. The entity has a property called 'neighboursSample'. This will also store a ReservoirItemsSketch object. <pre><code>{\n\"entities\": {\n\"blueEntity\": {\n\"vertex\": \"vertex.string\",\n\"properties\": {\n\"neighboursSample\": \"reservoir.strings.sketch\"\n}\n}\n},\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"stringsSample\": \"reservoir.strings.sketch\"\n}\n},\n\"blue\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\"\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema_4","title":"Types schema","text":"<p>We have added a new type - 'reservoir.strings.sketch'. This is a <code>org.apache.datasketches.sampling.ReservoirItemsSketch</code> object. We also added in the serialiser and aggregator for the ReservoirItemsSketch object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new edges are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"reservoir.strings.sketch\": {\n\"class\": \"org.apache.datasketches.sampling.ReservoirItemsSketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.sampling.binaryoperator.ReservoirItemsSketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.sampling.serialisation.ReservoirStringsSketchSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>An edge A-B of group \"red\" was added to the graph 1000 times. Each time it had the stringsSample property containing a randomly generated string. Here is the edge: <pre><code>Edge[source=A,destination=B,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[stringsSample=&lt;org.apache.datasketches.sampling.ReservoirItemsSketch&gt;\n### ReservoirItemsSketch SUMMARY: \n  k            : 20\n  n            : 1000\n  Current size : 20\n  Resize factor: X8\n### END SKETCH SUMMARY\n]]\n</code></pre></p> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. To get value from it we need to call a method on the ReservoirItemsSketch object:</p> <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n.build();\nfinal Element edge;\ntry (final CloseableIterable&lt;? extends Element&gt; edges = graph.execute(query, user)) {\nedge = edges.iterator().next();\n}\nfinal ReservoirItemsSketch&lt;String&gt; stringsSketch = ((ReservoirItemsSketch&lt;String&gt;) edge.getProperty(\"stringsSample\"));\nfinal String[] samples = stringsSketch.getSamples();\nfinal StringBuilder sb = new StringBuilder(\"10 samples: \");\nfor (int i = 0; i &lt; 10 &amp;&amp; i &lt; samples.length; i++) {\nif (i &gt; 0) {\nsb.append(\", \");\n}\nsb.append(samples[i]);\n}\n</code></pre> <p>The results contain a random sample of the strings added to the edge: <pre><code>10 samples: BGCAJGHCHI, ICHBADBEGE, JBHJAEDCBC, GEFEEDCIFF, BJHCHJDIBG, ECEEICCGJI, GHCIFGFGHH, BIFHFEBADF, GACEICJBFH, GAGJCCDHFB\n</code></pre></p> <p>500 edges of group \"blue\" were also added to the graph (edges X-Y0, X-Y1, ..., X-Y499). For each of these edges, an Entity was created for both the source and destination. Each Entity contained a 'neighboursSample' property that contains the vertex at the other end of the edge. We now get the Entity for the vertex X and display the sample of its neighbours:</p> <pre><code>final GetElements query2 = new GetElements.Builder()\n.input(new EntitySeed(\"X\"))\n.view(new View.Builder()\n.entity(\"blueEntity\")\n.build())\n.build();\nfinal Element entity;\ntry (final CloseableIterable&lt;? extends Element&gt; entities = graph.execute(query2, user)) {\nentity = entities.iterator().next();\n}\nfinal ReservoirItemsSketch&lt;String&gt; neighboursSketch = ((ReservoirItemsSketch&lt;String&gt;) entity.getProperty(\"neighboursSample\"));\nfinal String[] neighboursSample = neighboursSketch.getSamples();\nsb.setLength(0);\nsb.append(\"10 samples: \");\nfor (int i = 0; i &lt; 10 &amp;&amp; i &lt; neighboursSample.length; i++) {\nif (i &gt; 0) {\nsb.append(\", \");\n}\nsb.append(neighboursSample[i]);\n}\n</code></pre> <p>The results are:</p> <pre><code>10 samples: Y315, Y66, Y212, Y109, Y262, Y161, Y296, Y213, Y95, Y174\n</code></pre>"},{"location":"reference/properties-guide/advanced/#thetasketch","title":"ThetaSketch","text":"<p>This example demonstrates how the ThetaSketch (<code>org.apache.datasketches.theta.Sketch</code>) sketch property from the Datasketches library can be used to maintain estimates of the cardinalities of sets.</p> Example storing estimates of the cardinalities of sets using ThetaSketch <p>This sketch is similar to a HyperLogLogPlusPlus, but it can also be used to estimate the size of the intersections of sets. We give an example of how this can be used to monitor the changes to the number of edges in the graph over time.</p>"},{"location":"reference/properties-guide/advanced/#elements-schema_5","title":"Elements schema","text":"<p>This is our new elements schema. The edge has properties called 'startDate' and 'endDate'. These will be set to the midnight before the time of the occurrence of the edge and to midnight after the time of the occurrence of the edge. There is also a size property which will be a theta Sketch. This property will be aggregated over the 'groupBy' properties of startDate and endDate.</p> <pre><code>{\n\"entities\": {\n\"size\": {\n\"vertex\": \"vertex.string\",\n\"properties\": {\n\"startDate\": \"date.earliest\",\n\"endDate\": \"date.latest\",\n\"size\": \"thetasketch\"\n},\n\"groupBy\": [\n\"startDate\",\n\"endDate\"\n]\n}\n},\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"startDate\": \"date.earliest\",\n\"endDate\": \"date.latest\",\n\"count\": \"long.count\"\n},\n\"groupBy\": [\n\"startDate\",\n\"endDate\"\n]\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema_5","title":"Types schema","text":"<p>We have added a new type - 'thetasketch'. This is a <code>org.apache.datasketches.theta.Sketch</code> object. We also added in the serialiser and aggregator for the Union object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new edges are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"date.earliest\": {\n\"class\": \"java.util.Date\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n],\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n}\n},\n\"date.latest\": {\n\"class\": \"java.util.Date\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n],\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n}\n},\n\"long.count\": {\n\"class\": \"java.lang.Long\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"thetasketch\": {\n\"class\": \"org.apache.datasketches.theta.Sketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.theta.binaryoperator.SketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.theta.serialisation.SketchSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>1000 different edges were added to the graph for the day 09/01/2017 (i.e. the startDate was the midnight at the start of the 9th, and the endDate was the midnight at the end of the 9th). For each edge, an Entity was created, with a vertex called \"graph\". This contained a theta Sketch object to which a string consisting of the source and destination was added. 500 edges were added to the graph for the day 10/01/2017. Of these, 250 were the same as edges that had been added in the previous day, but 250 were new. Again, for each edge, an Entity was created for the vertex called \"graph\".</p> <p>Here is the Entity for the different days:</p> <pre><code>Entity[vertex=graph,group=size,properties=Properties[size=&lt;org.apache.datasketches.theta.DirectCompactOrderedSketch&gt;\n### DirectCompactOrderedSketch SUMMARY: \n  Estimate                : 500.0\n  Upper Bound, 95% conf   : 500.0\n  Lower Bound, 95% conf   : 500.0\n  Theta (double)          : 1.0\n  Theta (long)            : 9223372036854775807\n  Theta (long) hex        : 7fffffffffffffff\n  EstMode?                : false\n  Empty?                  : false\n  Array Size Entries      : 500\n  Retained Entries        : 500\n  Seed Hash               : 93cc\n### END SKETCH SUMMARY\n,endDate=&lt;java.util.Date&gt;Wed Jan 11 00:00:00 GMT 2017,startDate=&lt;java.util.Date&gt;Tue Jan 10 00:00:00 GMT 2017]]\nEntity[vertex=graph,group=size,properties=Properties[size=&lt;org.apache.datasketches.theta.DirectCompactOrderedSketch&gt;\n### DirectCompactOrderedSketch SUMMARY: \n  Estimate                : 1000.0\n  Upper Bound, 95% conf   : 1000.0\n  Lower Bound, 95% conf   : 1000.0\n  Theta (double)          : 1.0\n  Theta (long)            : 9223372036854775807\n  Theta (long) hex        : 7fffffffffffffff\n  EstMode?                : false\n  Empty?                  : false\n  Array Size Entries      : 1000\n  Retained Entries        : 1000\n  Seed Hash               : 93cc\n### END SKETCH SUMMARY\n,endDate=&lt;java.util.Date&gt;Tue Jan 10 00:00:00 GMT 2017,startDate=&lt;java.util.Date&gt;Mon Jan 09 00:00:00 GMT 2017]]\n</code></pre> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. To get value from it we need to call a method on the Sketch object:</p> <pre><code>final GetAllElements getAllEntities2 = new GetAllElements.Builder()\n.view(new View.Builder()\n.entity(\"size\")\n.build())\n.build();\nfinal CloseableIterable&lt;? extends Element&gt; allEntities2 = graph.execute(getAllEntities2, user);\nfinal CloseableIterator&lt;? extends Element&gt; it = allEntities2.iterator();\nfinal Element entityDay1 = it.next();\nfinal Sketch sketchDay1 = ((Sketch) entityDay1.getProperty(\"size\"));\nfinal Element entityDay2 = it.next();\nfinal Sketch sketchDay2 = ((Sketch) entityDay2.getProperty(\"size\"));\nfinal double estimateDay1 = sketchDay1.getEstimate();\nfinal double estimateDay2 = sketchDay2.getEstimate();\n</code></pre> <p>The result is: <pre><code>500.0\n1000.0\n</code></pre></p> <p>Now we can get an estimate for the number of edges in common across the two days:</p> <pre><code>final Intersection intersection = Sketches.setOperationBuilder().buildIntersection();\nintersection.update(sketchDay1);\nintersection.update(sketchDay2);\nfinal double intersectionSizeEstimate = intersection.getResult().getEstimate();\n</code></pre> <p>The result is: <pre><code>250.0\n</code></pre></p> <p>We now get an estimate for the number of edges in total across the two days, by simply aggregating overall the properties:</p> <pre><code>final GetAllElements getAllEntities = new GetAllElements.Builder()\n.view(new View.Builder()\n.entity(\"size\", new ViewElementDefinition.Builder()\n.groupBy() // set the group by properties to 'none'\n.build())\n.build())\n.build();\nfinal Element entity;\ntry (final CloseableIterable&lt;? extends Element&gt; allEntities = graph.execute(getAllEntities, user)) {\nentity = allEntities.iterator().next();\n}\nfinal double unionSizeEstimate = ((Sketch) entity.getProperty(\"size\")).getEstimate();\n</code></pre> <p>The result is:</p> <pre><code>1250.0\n</code></pre>"},{"location":"reference/properties-guide/basic/","title":"Basic Properties","text":"<p>Gaffer supports the storage of some common Java objects as properties on entities and edges. Serialisers for these will automatically be added to your schema when you create a graph using a schema that uses these properties.</p> <p>The standard basic properties are built-in classes from Java. They do not require their serialisers to be specified in a schema.</p> <ul> <li><code>String</code></li> <li><code>Integer</code></li> <li><code>Long</code></li> <li><code>Float</code></li> <li><code>Double</code></li> <li><code>Byte[]</code></li> <li><code>Boolean</code></li> <li><code>Date</code></li> </ul>"},{"location":"reference/properties-guide/basic/#predicate-support","title":"Predicate Support","text":"<p>Basic properties all support these predicates:</p> <ul> <li><code>And</code></li> <li><code>Or</code></li> <li><code>Not</code></li> <li><code>If</code></li> <li><code>Exists</code></li> <li><code>IsA</code></li> <li><code>IsIn</code></li> <li><code>IsEqual</code></li> <li><code>PropertiesFilter</code></li> </ul> <p>Some properties also support other specialised predicates as shown in the table below. For more information on predicates, see the predicates guide.</p> Predicate <code>String</code> <code>Integer</code> <code>Long</code> <code>Float</code> <code>Double</code> <code>Byte[]</code> <code>Boolean</code> <code>Date</code> <code>InRange</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>InTimeRange</code> \u2705 <code>InDateRange</code> \u2705 <code>IsFalse</code> \u2705 <code>IsTrue</code> \u2705 <code>IsLongerThan</code> \u2705 \u2705 <code>IsShorterThan</code> \u2705 \u2705 <code>MultiRegex</code> \u2705 <code>Regex</code> \u2705 <code>StringContains</code> \u2705 <code>AgeOff</code> \u2705"},{"location":"reference/properties-guide/basic/#aggregator-support","title":"Aggregator Support","text":"<p>Aggregators are also called binary operators. The <code>First</code> and <code>Last</code> binary operators are supported by all basic properties.</p> <p>Other operators are supported as shown in the table below. For more information on aggregators, see the binary operators guide.</p> Aggregator <code>String</code> <code>Integer</code> <code>Long</code> <code>Float</code> <code>Double</code> <code>Byte[]</code> <code>Boolean</code> <code>Date</code> <code>Max</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>Min</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>StringConcat</code> \u2705 <code>StringDeduplicateConcat</code> \u2705 <code>Product</code> \u2705 \u2705 \u2705 \u2705 <code>Sum</code> \u2705 \u2705 \u2705 \u2705 <code>And</code> \u2705 <code>Or</code> \u2705"},{"location":"reference/properties-guide/basic/#serialiser-support","title":"Serialiser Support","text":"<p>All properties support the <code>NullSerialiser</code>.</p> <p>The type of serialiser used for basic properties is automatically selected by Gaffer, based on the type of Gaffer store used. Specifying the exact serialiser to use is therefore optional.</p> <p>For <code>String</code> there is a <code>StringSerialiser</code> and a <code>StringToStringSerialiser</code>.</p> <p>The <code>Integer</code> and <code>Long</code> properties both have 'Ordered' and 'CompactRaw' serialisers (e.g. <code>OrderedIntegerSerialiser</code> &amp; <code>CompactRawIntegerSerialiser</code>). The <code>Float</code> and <code>Double</code> properties only have a single 'Ordered' serialiser each.</p> <p>The <code>Byte[]</code> and <code>Boolean</code> properties each have a specialised serialiser.</p>"},{"location":"reference/properties-guide/map-set/","title":"Map &amp; Set Properties","text":"<p>Gaffer supports the storage of some Java Map and Set objects as properties on entities and edges. Serialisers for these will automatically be added to your schema when you create a graph using a schema that uses these properties.</p> <p>There are also some more advanced properties which allow sets of timestamps to be stored on entities and edges - these do require their serialisers to be specified in a schema. More information on these are given in a dedicated section below.</p>"},{"location":"reference/properties-guide/map-set/#class-list","title":"Class List","text":"Property Full Class <code>HashMap</code> <code>java.util.HashMap</code> <code>TreeSet</code> <code>java.util.TreeSet</code> <code>FreqMap</code> <code>uk.gov.gchq.gaffer.types.FreqMap</code> <code>BoundedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.BoundedTimestampSet</code> <code>RBMBackedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.RBMBackedTimestampSet</code>"},{"location":"reference/properties-guide/map-set/#predicate-support","title":"Predicate Support","text":"<p>The properties above all support these predicates:</p> <ul> <li><code>And</code></li> <li><code>Or</code></li> <li><code>Not</code></li> <li><code>If</code></li> <li><code>Exists</code></li> <li><code>IsA</code></li> <li><code>IsIn</code></li> <li><code>IsEqual</code></li> <li><code>PropertiesFilter</code></li> </ul> <p>The FreqMap and HashMap properties also support these predicates:</p> <ul> <li><code>IsLongerThan</code></li> <li><code>IsShorterThan</code></li> <li><code>MapContains</code></li> <li><code>MapContainsPredicate</code></li> <li><code>PredicateMap</code></li> </ul> <p>The TreeSet property additionally supports these predicates:</p> <ul> <li><code>IsLongerThan</code></li> <li><code>IsShorterThan</code></li> <li><code>CollectionContains</code></li> <li><code>AreIn</code></li> </ul> <p>The RBMBackedTimestampSet property has a specilaised predicate <code>uk.gov.gchq.gaffer.time.predicate.RBMBackedTimestampSetInRange</code>.</p>"},{"location":"reference/properties-guide/map-set/#aggregator-support","title":"Aggregator Support","text":"<p>The <code>First</code> and <code>Last</code> binary operators are supported by all advanced properties. FreqMap and HashMap also both support the <code>BinaryOperatorMap</code> binary operator.</p> <p>Some of the other properties have (one or more of) their own specialised aggregator(s):</p> Property Binary Operator <code>FreqMap</code> <code>uk.gov.gchq.gaffer.types.function.FreqMapAggregator</code> <code>TreeSet</code> <code>CollectionConcat</code> <code>TreeSet</code> <code>CollectionIntersect</code> <code>BoundedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.binaryoperator.BoundedTimestampSetAggregator</code> <code>RBMBackedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.binaryoperator.RBMBackedTimestampSetAggregator</code>"},{"location":"reference/properties-guide/map-set/#serialiser-support","title":"Serialiser Support","text":"<p>All advanced properties support the <code>NullSerialiser</code>. FreqMap and HashMap also both support the <code>MapSerialiser</code> serialiser.</p> <p>Some of the other properties have (one or more of) their own specialised serialiser(s):</p> Property Serialiser <code>FreqMap</code> <code>uk.gov.gchq.gaffer.serialisation.FreqMapSerialiser</code> <code>TreeSet</code> <code>uk.gov.gchq.gaffer.serialisation.implementation.SetSerialiser</code> <code>TreeSet</code> <code>uk.gov.gchq.gaffer.serialisation.implementation.TreeSetStringSerialiser</code> <code>BoundedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.serialisation.BoundedTimestampSetSerialiser</code> <code>RBMBackedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.serialisation.RBMBackedTimestampSetSerialiser</code>"},{"location":"reference/properties-guide/map-set/#timestamp-properties","title":"Timestamp Properties","text":"<p>There are two timestamp properties:</p> <ul> <li>RBMBackedTimestampSet: When this is created, a TimeBucket is specified, e.g. minute. When a timestamp is added, it is truncated to the nearest start of a bucket (e.g. if the bucket is a minute then the seconds are removed) and then added to the set. Internally the timestamps are stored in a Roaring Bitmap.</li> <li>BoundedTimestampSet: This is similar to the above set, except that when it is created a maximum size is specified. If the set grows beyond the maximum size, then a random sample of the timestamps of that size is created. This is useful to avoid the size of the set for entities or edges that are very busy growing too large. By retaining a sample, we maintain an indication of when the entity or edge was active, without retaining all the information. The sample is implemented using a ReservoirLongsUnion from the Datasketches library.</li> </ul>"},{"location":"reference/properties-guide/map-set/#rbmbackedtimestampset-example","title":"RBMBackedTimestampSet Example","text":"<p>This example demonstrates how the RBMBackedTimestampSet property can be used to maintain a set of the timestamps at which an element was seen active.</p> Example a set of the timestamps using RBMBackedTimestampSet <p>In this example we record the timestamps to minute level accuracy, i.e. the seconds are ignored.</p>"},{"location":"reference/properties-guide/map-set/#elements-schema","title":"Elements schema","text":"<p>This is our new elements schema. The edge has a property called 'timestampSet'. This will store the RBMBackedTimestampSet object.</p> <pre><code>{\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"timestampSet\": \"timestamp.set\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/map-set/#types-schema","title":"Types schema","text":"<p>We have added a new type - 'timestamp.set'. This is a <code>uk.gov.gchq.gaffer.time.RBMBackedTimestampSet</code> object. We also added in the serialiser and aggregator for the RBMBackedTimestampSet object. Gaffer will automatically aggregate these sets together to maintain a set of all the times the element was active.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"timestamp.set\": {\n\"class\": \"uk.gov.gchq.gaffer.time.RBMBackedTimestampSet\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.time.binaryoperator.RBMBackedTimestampSetAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.time.serialisation.RBMBackedTimestampSetSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>Only one edge is in the graph. This was added 25 times, and each time it had the 'timestampSet' property containing a randomly generated timestamp from 2017. Here is the Edge:</p> <pre><code>Edge[source=A,destination=B,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[timestampSet=&lt;uk.gov.gchq.gaffer.time.RBMBackedTimestampSet&gt;RBMBackedTimestampSet[timeBucket=MINUTE,timestamps=2017-01-08T07:29:00Z,2017-01-18T10:41:00Z,2017-01-19T01:36:00Z,2017-01-31T16:16:00Z,2017-02-02T08:06:00Z,2017-02-12T14:21:00Z,2017-02-15T22:01:00Z,2017-03-06T09:03:00Z,2017-03-21T18:09:00Z,2017-05-08T15:34:00Z,2017-05-10T19:39:00Z,2017-05-16T10:44:00Z,2017-05-23T10:02:00Z,2017-05-28T01:52:00Z,2017-06-24T23:50:00Z,2017-07-27T09:34:00Z,2017-08-05T02:11:00Z,2017-09-07T07:35:00Z,2017-10-01T12:52:00Z,2017-10-23T22:02:00Z,2017-10-27T04:12:00Z,2017-11-01T02:45:00Z,2017-12-11T16:38:00Z,2017-12-22T14:40:00Z,2017-12-24T08:00:00Z]]]\n</code></pre> <p>You can see the list of timestamps on the edge. We can also get just the earliest, latest and total number of timestamps using methods on the TimestampSet object to get the following results:</p> <pre><code>Edge A-B was first seen at 2017-01-08T07:29:00Z, last seen at 2017-12-24T08:00:00Z, and there were 25 timestamps it was active.\n</code></pre>"},{"location":"reference/properties-guide/map-set/#boundedtimestampset-example","title":"BoundedTimestampSet Example","text":"<p>This example demonstrates how the BoundedTimestampSet property can be used to maintain a set of the timestamps at which an element was seen active.</p> Example a set of the timestamps using BoundedTimestampSet <p>If this set becomes larger than a size specified by the user then a uniform random sample of the timestamps is maintained. In this example we record the timestamps to minute level accuracy, i.e. the seconds are ignored, and specify that at most 25 timestamps should be retained.</p>"},{"location":"reference/properties-guide/map-set/#elements-schema_1","title":"Elements schema","text":"<p>This is our new schema. The edge has a property called 'boundedTimestampSet'. This will store the BoundedTimestampSet object.</p> <pre><code>{\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"boundedTimestampSet\": \"bounded.timestamp.set\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/map-set/#types-schema_1","title":"Types schema","text":"<p>We have added a new type - 'bounded.timestamp.set'. This is a <code>uk.gov.gchq.gaffer.time.BoundedTimestampSet</code> object. We have added in the serialiser and aggregator for the BoundedTimestampSet object. Gaffer will automatically aggregate these sets together to maintain a set of all the times the element was active. Once the size of the set becomes larger than 25 then a uniform random sample of size at most 25 of the timestamps is maintained.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"bounded.timestamp.set\": {\n\"class\": \"uk.gov.gchq.gaffer.time.BoundedTimestampSet\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.time.binaryoperator.BoundedTimestampSetAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.time.serialisation.BoundedTimestampSetSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>There are two edges in the graph. Edge A-B was added 3 times, and each time it had the 'boundedTimestampSet' property containing a randomly generated timestamp from 2017. Edge A-C was added 1000 times, and each time it also had the 'boundedTimestampSet' property containing a randomly generated timestamp from 2017. Here are the edges:</p> <pre><code>Edge[source=A,destination=C,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[boundedTimestampSet=&lt;uk.gov.gchq.gaffer.time.BoundedTimestampSet&gt;BoundedTimestampSet[timeBucket=MINUTE,state=SAMPLE,maxSize=25,timestamps=2017-01-01T15:49:00Z,2017-01-19T19:48:00Z,2017-02-02T08:42:00Z,2017-02-11T00:54:00Z,2017-04-02T17:27:00Z,2017-04-07T06:12:00Z,2017-04-23T02:28:00Z,2017-05-19T13:54:00Z,2017-05-25T04:20:00Z,2017-05-28T01:52:00Z,2017-05-28T23:07:00Z,2017-06-11T00:02:00Z,2017-06-13T16:47:00Z,2017-06-16T14:14:00Z,2017-06-17T21:39:00Z,2017-06-25T15:48:00Z,2017-06-26T02:46:00Z,2017-07-15T14:55:00Z,2017-07-15T19:58:00Z,2017-08-15T16:34:00Z,2017-08-16T08:39:00Z,2017-09-05T02:05:00Z,2017-12-09T13:55:00Z,2017-12-22T12:40:00Z,2017-12-24T11:12:00Z]]]\nEdge[source=A,destination=B,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[boundedTimestampSet=&lt;uk.gov.gchq.gaffer.time.BoundedTimestampSet&gt;BoundedTimestampSet[timeBucket=MINUTE,state=NOT_FULL,maxSize=25,timestamps=2017-02-12T14:21:00Z,2017-03-21T18:09:00Z,2017-12-24T08:00:00Z]]]\n</code></pre> <p>You can see that edge A-B has the full list of timestamps on the edge, but edge A-C has a sample of the timestamps.</p>"},{"location":"reference/properties-guide/properties/","title":"Properties Guide","text":"<p>Gaffer allows properties to be stored on Entities and Edges. As well as simple properties, such as a String or Integer, Gaffer allows rich properties such as sketches and sets of timestamps to be stored on Elements. Gaffer's ability to continuously aggregate properties on elements allows interesting, dynamic data structures to be stored within the graph. Examples include storing a <code>HyperLogLog</code> sketch on an Entity to give a very quick estimate of the degree of a node or storing a uniform random sample of the timestamps that an edge was seen active.</p> <p>Gaffer allows any Java object to be used as a property. If the property is not natively supported by Gaffer, then you will need to provide a serialiser, and possibly an aggregator.</p> <p>The properties that Gaffer natively supports can be divided into three categories:</p> <ul> <li>Standard basic Java properties</li> <li>Type properties - A special variant of String</li> <li>Advanced properties - These are sketches from the clearspring and datasketches libraries</li> <li>Sets and Maps - Including specialised sets for timestamps</li> </ul> <p>This documentation provides reference information detailing the predicates, aggregators (binary operators) and serialisers supported for Gaffer properties. It also provides some examples of how to use the more advanced types of property.</p>"},{"location":"reference/properties-guide/type/","title":"Type Properties","text":"<p>The <code>TypeValue</code> (Javadoc) and <code>TypeSubTypeValue</code> (Javadoc) are special properties which are similar to <code>String</code>, but also store a secondary string ('type') or secondary and tertiary strings ('type' &amp; 'subtype').</p>"},{"location":"reference/properties-guide/type/#predicate-support","title":"Predicate Support","text":"<p>Both type properties support these predicates:</p> <ul> <li><code>And</code></li> <li><code>Or</code></li> <li><code>Not</code></li> <li><code>If</code></li> <li><code>Exists</code></li> <li><code>IsA</code></li> <li><code>IsIn</code></li> <li><code>IsEqual</code></li> <li><code>PropertiesFilter</code></li> <li><code>InRange</code></li> </ul>"},{"location":"reference/properties-guide/type/#aggregator-support","title":"Aggregator Support","text":"<p>The <code>First</code>, <code>Last</code>, <code>Min</code> and <code>Max</code> binary operators are supported by both type properties.</p>"},{"location":"reference/properties-guide/type/#serialiser-support","title":"Serialiser Support","text":"<p>Both type properties support the <code>NullSerialiser</code> and have their own specialised serialisers, <code>TypeValueSerialiser</code> and <code>TypeSubTypeValueSerialiser</code>.</p>"},{"location":"user-guide/introduction/","title":"User Guide","text":"<p>Welcome to the Gaffer user guide. The pages under this section are intended to help a user of Gaffer understand the core concepts and quickly get started querying a currently deployed graph.</p>"},{"location":"user-guide/introduction/#the-basics","title":"The Basics","text":"<p>If you are brand new to Gaffer and graph databases in general, the Gaffer basics pages contain useful information to give an overview and foundation.</p> <ul> <li>What is Graph?</li> <li>What is Gaffer?</li> </ul>"},{"location":"user-guide/introduction/#available-apis","title":"Available APIs","text":"<p>Gaffer comes with a few different APIs, the pages in the user guide give an introduction to these APIs and how to use them to query a graph. Also included is an introduction to some of the core languages used for the APIs.</p> <ul> <li>What is JSON?</li> <li>What is Python?</li> <li>REST API</li> <li>Python API (gafferpy)</li> <li>Java API</li> </ul>"},{"location":"user-guide/introduction/#graph-querying","title":"Graph Querying","text":"<p>To query a graph Gaffer uses a custom querying format based around isolated functions called <code>Operations</code>. This user guide gives an introduction to this format and provides examples to help users formulate their own.</p> <ul> <li>Gaffer Operations Introduction</li> <li>Applying Filters to Queries</li> </ul>"},{"location":"user-guide/schema/","title":"Gaffer Schemas","text":"<p>One of the main differences between Gaffer and other graph database tools are its schemas. In Gaffer JSON based schemas need to be written upfront for it to understand how to load and treat the data in the graph. These schemas define all aspects of the nodes and edges in the graph, and can even be used to automatically do basic analysis or aggregation on queries and ingested data.</p> <p>You can kind of think of the schema as sort of a filter or validator for the incoming data. A given bit of data must conform with part of the schema or it will simply be ignored as it doesn't fit the structure of the graph.</p>"},{"location":"user-guide/schema/#elements-schema","title":"Elements Schema","text":"<p>All distinct bits of data in a Gaffer graph (e.g. nodes and edges) are referred to as 'elements'. The structure and properties of these graph elements are defined in the elements schema. The general format of an element schema are two lists; one of the <code>\"edges\"</code> and the other of the <code>\"entities\"</code> like the following:</p> <p>Basic elements syntax</p> <pre><code>{\n\"edges\": {\n\"Edge\": {\n\"source\": \"type\",\n\"destination\": \"type\",\n\"directed\": \"true\",\n\"properties\": {\n\"property\": \"type\"\n}\n}\n},\n\"entities\": {\n\"Node\": {\n\"description\": \"A Node\",\n\"vertex\": \"type\",\n\"properties\": {\n\"property\": \"type\"\n}\n}\n}\n}\n</code></pre> <p>As you can see there are a few fields for both the example <code>\"Edge\"</code> and <code>\"Node\"</code>, many of these require a type as their value (discussed in the next section) which are essentially handlers or object types for the value associated with the field.</p> <p>For an <code>edge</code> the following fields are required:</p> <ul> <li> <p><code>source</code> - A user defined type for the source node the edge originated from.</p> </li> <li> <p><code>directed</code> - Boolean true or false to define if the edge is directed or not. When an Edge is     undirected in Gaffer, it is treated as if the relationship was bidirectional and the vertices of     the edge do not have an authoritative source and destination.</p> <p>The type here, <code>\"true\"</code> or <code>\"false\"</code> needs to be defined in the types schema using a class that evaluates to it. This is demonstrated in the example deployment document.</p> </li> <li> <p><code>destination</code> - A user defined type for the destination node the edge goes to.</p> </li> </ul> <p>For an <code>entity</code> only one field is required:</p> <ul> <li><code>vertex</code> - A user defined type for the node/vertex.</li> </ul> <p>The example includes some of the common optional fields too such as a <code>\"properties\"</code> list and <code>\"description\"</code>.</p>"},{"location":"user-guide/schema/#types-schema","title":"Types Schema","text":"<p>Following on from the elements schema, the other necessary schema needed for a Gaffer deployment is the types schema.  The types schema allows user defined types for all elements in the graph. It can also demonstrate the power of Gaffer as it allows for custom functions classes to be used on the types; however, this can make it quite complex to write a full schema for a graph.</p> <p>Example types syntax</p> <pre><code>{\n\"types\": {\n\"type.string\": {\n\"description\": \"A basic type to hold the string value of an element\",\n\"class\": \"java.lang.String\"\n},\n\"type.int\": {\n\"description\": \"A basic type to hold the int value of an element\",\n\"class\": \"java.lang.Integer\"\n}\n}\n}\n</code></pre>"},{"location":"user-guide/apis/java-api/","title":"Using the Java API","text":"<p>As Gaffer is written in Java there is native support to allow use of all its public classes. Using Gaffer via the Java interface does differ from the rest API and <code>gafferpy</code> but is fully featured with extensive Javadocs. However, you will of course need to be familiar with writing and running Java code in order to utilise this form of the API.</p>"},{"location":"user-guide/apis/java-api/#querying-a-graph","title":"Querying a Graph","text":"<p>Using Java to query a graph unlike the other APIs requires a reference to a <code>Graph</code> object that essentially represents a graph.</p> <p>With the other APIs you would connect directly to a running instance via the rest interface; however, to do this with Java you would need to configure a <code>Graph</code> object with a proxy store.</p> <p>The following example uses the <code>ProxyStore.Builder()</code> to configure a <code>Graph</code> to connect to the required address (in this case <code>http://localhost:8080/rest</code>).</p> <pre><code>Graph graph = new Graph.Builder()\n.store(new ProxyStore.Builder()\n.graphId(uniqueNameOfYourGraph)\n.host(\"localhost\")\n.port(8080)\n.contextRoot(\"rest\")\n.build())\n.build();\n</code></pre> <p>Once the connection to a graph is made you can run queries and operations on it using the available classes and builders.</p> <p>The following operation chain gets all the elements in the graph then will count them and store the result in a <code>Long</code>.</p> <pre><code>OperationChain&lt;Long&gt; countAllElements = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new Count&lt;&gt;())\n.build();\nLong result = graph.execute(countAllElements, user);\n</code></pre> <p>If you're interested in learning more about the <code>Graph</code> class please see the developers guide on the subject.</p> <p>Note</p> <p>One other thing to note about the Java API is that the <code>execute()</code> method requires you to have a <code>User</code>. This is part of Gaffer's fine grain security, see the admin guide for more information.</p>"},{"location":"user-guide/apis/python-api/","title":"Using the Python API","text":"<p>This section covers an overview of the python API extension for Gaffer to demonstrate how to get up and running to perform queries from Python code on an existing running graph.</p> <p>Tip</p> <p>Please see the handy introduction to Python if you are new to the language.</p>"},{"location":"user-guide/apis/python-api/#what-is-the-python-extension","title":"What is the Python Extension?","text":"<p>Commonly referred to as <code>gafferpy</code> this is an API to gaffer that provides similar querying capabilities to the rest API but from Python. Fundamentally it wraps the rest API to use the same JSON under the hood this means you should be able to access almost any features or end points available in the main rest API.</p>"},{"location":"user-guide/apis/python-api/#installation","title":"Installation","text":"<p>Currently there isn't a release of <code>gafferpy</code> on pypi or other pip repository; however, the source code can still be cloned from the git repository and installed via pip. Please see the readme in the <code>gafferpy</code> repository for full instructions.</p>"},{"location":"user-guide/apis/python-api/#how-to-query-a-graph","title":"How to Query a Graph","text":"<p>To get started with <code>gafferpy</code> you will need to import the module and connect to an existing graph, the connection should be the same address as where the rest API is running.</p> <pre><code>from gafferpy import gaffer\nfrom gafferpy import gaffer_connector\ng_connector = gaffer_connector.GafferConnector(\"http://localhost:8080/rest/latest\")\n</code></pre> <p>Once connected you can access and run the same endpoints and operations as you would via the usual rest API but via their python classes. The endpoints are accessed via the <code>GafferConnector</code> to allow you executing Operation chains to perform queries on the graph.</p> <p>Note</p> <p>Some of the features of the full rest API may not be present in <code>gafferpy</code> so always check the reference guide first.</p> <p>A simple Operation can be called via the <code>execute_operation()</code> function. As an example, the following will get all the elements in a graph:</p> <pre><code>elements = g_connector.execute_operation(\noperation =  gaffer.GetAllElements()\n)\n</code></pre> <p>An Operation chain can be run using the <code>execute_operation_chain()</code> function. As an example, the following will get all the elements in a graph then count them.</p> <pre><code>count = g_connector.execute_operation_chain(\noperation_chain = gaffer.OperationChain(\noperations=[\ngaffer.GetAllElements(),\ngaffer.Count()\n]\n)\n)\n</code></pre> <p>Along with running Operations you can of course optionally apply some filtering using a <code>View</code>. There is more detail on both filtering and operations on their respective pages.</p>"},{"location":"user-guide/apis/rest-api/","title":"Using the Rest API","text":"<p>These sections will cover the usage of the Gaffer rest API to perform queries and operations on a graph. This guide should cover a lot of the use cases a user may face; however please refer to the reference guide for a full list of what is possible.</p>"},{"location":"user-guide/apis/rest-api/#what-is-the-rest-api","title":"What is the Rest API?","text":"<p>When a graph is deployed, a REST (or RESTful) API will be available at a predefined address. This provides an application programming interface (API) that a user or computer can interact with to send and receive data between them and the application.</p> <p>In Gaffer, the Rest API consists of various predefined HTTP requests known as endpoints that can be used to interact with a running graph instance. These endpoints are accessed either by sending a crafted HTTP request to them e.g. with a tool like <code>curl</code> or more commonly by the provided Swagger UI.</p>"},{"location":"user-guide/apis/rest-api/#querying-a-graph","title":"Querying a Graph","text":"<p>If you wish to just query to get some information about the graph instance such as what schema it is using or what available Operations it has then there should already be <code>GET</code> endpoints to do that. Executing any of these <code>GET</code> requests will simply 'get' you some information, however they may be of limited use for a user.</p> <p>The main endpoint a user will interact with is <code>/graph/operations/execute</code>. This is a <code>POST</code> request as it allows you to 'post' some data to it and get a response back. From here is where you can do querying and run operations on the graph to and extract data and do analysis with the graph.</p> <p>In Gaffer, JSON is the main interchange language which means you can post JSON and get response back in it.</p> <p>Tip</p> <p>See the what is JSON guide for a short introduction to the language.</p> <p>Generally a query consists of two parts an <code>Operation</code> or <code>OperationChain</code> and optionally some sort of filtering provided by a <code>View</code>. These parts are discussed in more detail further in the guide so please see the page covering Operations and this page on filtering using views.</p>"},{"location":"user-guide/gaffer-basics/what-is-a-graph/","title":"What is Graph?","text":""},{"location":"user-guide/gaffer-basics/what-is-a-graph/#introduction-to-graph-technology","title":"Introduction to Graph Technology","text":"<p>Graph databases are built to allow you to store and navigate relationships. Their value lies in allowing you to analyse and gain insight into relationships between different data sources to see the bigger picture more easily than through tables or documents. They allow you to store and examine data in a flexible way, similar to how you might sketch ideas on a whiteboard or in a mind map. </p> <p>Graph databases use nodes (also known as vertexes) to store data entities, and edges to store the relationships between these entities. An edge will always have a starting node, an end node, a type and a direction. They may describe parent-child relationships, actions, ownership and much more. There is no limit to the number and different types of relationships a node may have.</p> <p>Below is a simple example with two nodes representing people who have a relationship of 'friends' connecting them:</p> <p>Relationship between Dave and Chris</p> <pre><code>flowchart TD\n    subgraph Relationship\n        E((Person - Dave))\n        -- FRIENDS --&gt;\n        F((Person - Chris))  \n    end</code></pre>"},{"location":"user-guide/gaffer-basics/what-is-a-graph/#traversing-a-graph","title":"Traversing a graph","text":"<p>Any graph in a graph database can be traversed along specific edges or the entire graph in order to find patterns, paths or communities. The traversing of these relationships is fast as all relationships are stored explicitly. This means queries and algorithms exploring relationships can be run in seconds rather than hours or days as the relationships do not need to be calculated at query time. Therefore, the key benefit of graph databases is their ability to perform efficient and effective analysis of the connections between nodes to uncover patterns or groupings as well as potential connections in our data.</p> <p>Take the example below which is an extension of the previous graph, as you can see we have added an additional node and relationship into the graph. Suddenly, even with this small example, we can start to draw inferences and analytics about potential connections between nodes. For example, there is a potential connection between nodes 'Dave' and 'Steve' which might mean that if we were a social media company we could prompt \"Dave\" with a notification to see if they might know \"Steve\".</p> <p>A potential relationship between Steve and Dave</p> <pre><code>flowchart TD\n    subgraph Relationship\n        E((Person - Dave))\n        -- FRIENDS --&gt;\n        F((Person - Chris)) \n        -- FRIENDS --&gt;\n        B((Person - Steve)) \n        B-. POTENTIAL RELATIONSHIP .-&gt;E;\n    end</code></pre> <p>For definitions on the terms used in this page please see the glossary page.</p>"},{"location":"user-guide/gaffer-basics/what-is-cardinality/","title":"Cardinality","text":"<p>This page describes what cardinality is, how to add it to your Gaffer graph and how to use it in Gaffer queries.</p>"},{"location":"user-guide/gaffer-basics/what-is-cardinality/#what-is-cardinality","title":"What is Cardinality?","text":"<p>In Gaffer, cardinality represents the number of unique vertices that are connected to a given vertex.</p> <pre><code>graph TD\n  1(1, cardinality=4) --&gt; 2\n  1 --&gt; 3\n  1 --&gt; 4\n  1 --&gt; 5\n  3(3, cardinality=2) --&gt; 5\n  3 --&gt; 5\n  3 --&gt; 5\n  3 --&gt; 5</code></pre> <p>For very large graphs, updating this number accurately would be very costly in compute. This is because for each new Edge that is added, we would have to check both connected Entities to see if they are already connected to the other Entity, and this could be costly for Entities with a high cardinality. Instead, Gaffer uses approximate cardinality making use of a HyperLogLog Sketch, which estimates the cardinality with relatively low error. In Gaffer, where you see the term \"cardinality\" used, it is referring to this approximate cardinality backed by a sketch.</p>"},{"location":"user-guide/gaffer-basics/what-is-cardinality/#how-to-add-cardinality-to-your-graph","title":"How to add cardinality to your graph","text":"<p>You will need to add a property to your schema that will represent the approximate cardinality of an Entity. This property is usually added to a specific Entity group that exists solely to represent the Cardinality of a given vertex value. An example of the schema changes can be seen in the advanced properties guide. If you are using an Accumulo or Map store as your data store, this should be all that is needed. However, if you are using a custom store, or a custom rest API, some additional config is needed.</p> <p>Tip</p> <p>It is often useful keep track of cardinality per edge group. This is usually done with an edge group property which is group in the <code>groupBy</code>.</p> <pre><code>{\n\"entities\": {\n\"cardinality\": {\n\"vertex\": \"vertex.string\",\n\"properties\": {\n\"approxCardinality\": \"hll\",\n\"edgeGroup\": \"set\"\n},\n\"groupBy\": [\n\"edgeGroup\"\n]\n}\n}\n}\n</code></pre> Additional config <p>If you are using a custom data store, you will need to make sure the <code>SketchesJsonModules</code> is added to your store properties. This can be easily done by changing the <code>store.properties</code> file, as shown below. Alternatively, it can be hardcoded into the store, like in the AccumuloProperties.</p> <pre><code>gaffer.serialiser.json.modules=uk.gov.gchq.gaffer.sketches.serialisation.json.SketchesJsonModules\n</code></pre> <p>If you are using a custom data store, or you not using the standard spring-rest Gaffer rest API, then you will also need to ensure that the <code>sketches-library</code> dependency is added to your <code>pom.xml</code> for the store and/or rest API.</p> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;uk.gov.gchq.gaffer&lt;/groupId&gt;\n&lt;artifactId&gt;sketches-library&lt;/artifactId&gt;\n&lt;version&gt;${gaffer.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"user-guide/gaffer-basics/what-is-cardinality/#how-to-add-data-with-cardinality-in-your-schema","title":"How to add data with cardinality in your schema","text":"<p>There are two main methods of adding cardinality elements in Gaffer. The first is to do it manually when you add your edges, the second is to use a generator that can do it for you.</p>"},{"location":"user-guide/gaffer-basics/what-is-cardinality/#manually-adding-cardinality-entities","title":"Manually adding cardinality entities","text":"<p>Adding a cardinality entity between vertex 'A' and 'B' using <code>AddElements</code>. For more examples of different property types, see the sketches on the developer guide page.</p> JavaJSONPython <pre><code>final HllSketch hll = new HllSketch(10); //(1)!\nhll.update(\"B\"); //(2)!\nnew AddElements.Builder()\n.input(new Entity.Builder()\n.group(\"cardinality\")\n.vertex(\"A\")\n.property(\"approxCardinality\", hll) //(3)!\n.build())\n.build();\n</code></pre> <ol> <li>Create the HllSketch object and define the precision values. By default, logK = 10.</li> <li>Update the sketch with the connected entity's vertex value, this adds it to the HllSketch's    bit hash.</li> <li>When adding the cardinality entity, set the property.</li> </ol> <pre><code>{\n\"class\": \"AddElements\",\n\"input\": [{\n\"class\": \"Entity\",\n\"vertex\": \"A\",\n\"group\": \"cardinality\",\n\"properties\": {\n\"approxCardinality\": {\n\"org.apache.datasketches.hll.HllSketch\": {\n\"values\": [\"B\"] //(1)!\n}\n}\n}\n}]\n}\n</code></pre> <ol> <li>You can directly add the values in the json and the deserialiser and aggregator will ensure    it is properly added to the object.</li> </ol> <pre><code>g.AddElements(\ninput=[\ng.Entity(\nvertex=\"A\",\ngroup=\"cardinality\",\nproperties={\n\"hll\": g.hll_sketch([\"B\"]) #(1)!\n}\n)\n]\n)\n</code></pre> <ol> <li>The <code>g.hll_sketch</code> helper function lets you directly add the values. The deserialiser and    aggregator will ensure it is properly added to the object.</li> </ol>"},{"location":"user-guide/gaffer-basics/what-is-cardinality/#automatically-adding-cardinality-entities","title":"Automatically adding cardinality entities","text":"<p>Rather than using the <code>AddElements</code> operation to manually add cardinality entities, you can add them automatically when you add edges to the graph using the <code>HllSketchEntityGenerator</code>. This will take an edge and return the same edge, as well as two cardinality entities, each representing the additional cardinality link between the two vertices in the edge.</p> JavaJSONPython <pre><code>new OperationChain.Builder()\n.first(new GenerateElements.Builder&lt;Element&gt;()\n.input(new Edge(\"edgeGroup1\", \"A\", \"B\", true)) //(1)!\n.generator(new HllSketchEntityGenerator() //(2)!\n.cardinalityPropertyName(\"approxCardinality\") //(3)!\n.group(\"cardinality\") //(4)!\n.edgeGroupProperty(\"edgeGroup\") //(5)!\n.propertiesToCopy(...) //(6)!\n)\n.build())\n.then(new AddElements()) //(7)!\n.build();\n</code></pre> <ol> <li>The input of edges is added to the OperationChain. Here we make one Edge between \"A\" and \"B\",    with group = \"edgeGroup\".</li> <li>The input is streamed into the <code>HllSketchEntityGenerator</code>, which will return the edge as well    as the two cardinality entities.</li> <li>The name of the property where we should store the cardinality.</li> <li>The group which the cardinality entity should be put into.</li> <li>If you track cardinality per edge group using a set property (as described    above), which property should track this.</li> <li>Any properties from the edge to copy onto the cardinality entity.</li> <li>The results are streamed into <code>AddElements</code> to be added to the graph.</li> </ol> <pre><code>{\n\"class\": \"OperationChain\",\n\"operations\": [\n{\n\"class\": \"GenerateElements\",\n\"input\": [{\n\"class\": \"Edge\",\n\"group\": \"edgeGroup1\",\n\"source\": \"A\",\n\"destination\": \"B\",\n\"directed\": true\n}],\n\"elementGenerator\": {\n\"class\": \"HllSketchEntityGenerator\",\n\"cardinalityPropertyName\": \"approxCardinality\",\n\"edgeGroupProperty\": \"edgeGroup\",\n\"group\": \"cardinality\"\n}\n},\n{\n\"class\": \"AddElements\"\n}\n]\n}\n</code></pre> <pre><code>g.OperationChain([\ng.GenerateElements(\ninput=[g.Edge(\"edgeGroup1\", \"A\", \"B\", True)],\nelement_generator=g.HllSketchEntityGenerator(\ncardinality_property_name=\"approxCardinality\",\ngroup=\"cardinality\",\nedge_group_property=\"edgeGroup\"\n)\n),\ng.AddElements()\n])\n</code></pre>"},{"location":"user-guide/gaffer-basics/what-is-cardinality/#how-to-get-cardinality-back-using-gaffer-queries","title":"How to get cardinality back using Gaffer queries","text":"<p>Depending on how you query Gaffer, approximate cardinality will be displayed in results in different ways.</p> JavaJSONPython <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EntitySeed(\"A\"))\n.build();\nfinal Element element;\ntry (final CloseableIterable&lt;? extends Element&gt; elements = graph.execute(query, user)) {\nelement = elements.iterator().next();\n}\nfinal HllSketch hllSketch = (HllSketch) element.getProperty(\"approxCardinality\");\nfinal double approxCardinality = hllSketch.getEstimate();\nfinal String cardinalityEstimate = \"Entity A has approximate cardinality \" + approxCardinality;\n</code></pre> <p>Result:</p> <pre><code>Entity A has approximate cardinality 1.0\n</code></pre> <pre><code>{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"A\"\n}\n]\n}\n</code></pre> <p>Result:</p> <pre><code>[{\n\"class\": \"Entity\",\n\"group\": \"cardinality\",\n\"vertex\": \"A\",\n\"properties\": {\n\"approxCardinality\": {\n\"org.apache.datasketches.hll.HllSketch\": {\n\"bytes\": \"AgEHCgMIAQBejtgF\", \"cardinality\": 1.0\n}\n}\n}\n}]\n</code></pre> <pre><code>g.GetElements(g.EntitySeed(\"A\"))\n</code></pre> <p>Result:</p> <pre><code>[{\n'class': 'uk.gov.gchq.gaffer.data.element.Entity',\n'group': 'BasicEntity',\n'vertex': 'A',\n'properties': {\n'approxCardinality': {\n'org.apache.datasketches.hll.HllSketch': {\n'bytes': 'AgEHCgMIAQBejtgF',\n'cardinality': 1.0\n}\n}\n}\n}]\n</code></pre>"},{"location":"user-guide/gaffer-basics/what-is-gaffer/","title":"What is Gaffer?","text":"<p>Gaffer is a graph database framework, it acts similarly to an interface providing a graph data structure on top of a chosen storage technology to enable storage of large graphs and traversal of it's nodes and edges. In a nutshell Gaffer allows you to take data, convert it into a graph, store it in a database and then run queries and analytics on it.</p> <p>The high level interactions of loading data and querying are demonstrated in the diagrams below.</p> <pre><code>flowchart TD\n    subgraph Graph Query\n        G{{Schema}} -.-&gt; F\n        F([Query]) ---&gt; H(Gaffer)\n        J(key-value store) &lt;--&gt; H\n        H --&gt; K([Result])\n    end\n    subgraph Data Input\n        A(Data)--&gt;B{{Schema}}\n        B --&gt; C(Gaffer)\n        C --&gt; D(key-value store)\n    end</code></pre> <p>Note</p> <p>Knowledge of the Gaffer schema in use is usually required to formulate a graph query, but doesn't form part of the query itself - hence the dotted connection.</p>"},{"location":"user-guide/gaffer-basics/what-is-gaffer/#why-would-you-want-to-use-gaffer","title":"Why would you want to use Gaffer?","text":"<p>Conceptually a graph database/data platform can have a large variety of uses where it'll provide specific advantages over other data storage/analytic platforms which is discussed in the \"What is Graph?\" section of these docs. Gaffer provides an extensible and straightforward way to insert, manage and query the graph data stored in the underlying storage systems (ie. Accumulo).</p> <p>Gaffer also has some key features not always found in other graph database technologies, including but not limited to:</p> <ul> <li>Aggregation.</li> <li>Fine grained security.</li> <li>Graph Federation.</li> </ul>"},{"location":"user-guide/gaffer-basics/what-is-json/","title":"What is JSON?","text":"<p>JavaScript Object Notation is a commonly used data format that can be used for storing and transporting data; notably the industry standard for modern web requests. It's constructed of a set of key value pairs as exampled:</p> JSON Example<pre><code>{\n\"name\": \"example name\",\n\"team\": \"example team\",\n\"interests\": [\"stuff\", \"more stuff\"],\n\"pets\": 2,\n\"location\": {\n\"country\": \"GB\",\n\"region\": \"somewhere\"\n},\n\"present\": true,\n\"appendices\": null\n}\n</code></pre> <p>For further reading on JSON please see the official website.</p>"},{"location":"user-guide/gaffer-basics/what-is-json/#json-data-types","title":"JSON Data Types","text":"<p>JSON objects are defined by the contents of a pair of braces: <code>{}</code>, these then contain the various comma separated key value pairs that make up a block of data to be stored or transported. JSON has a number of supported data types and some notable exceptions.</p>"},{"location":"user-guide/gaffer-basics/what-is-json/#supported-data-types","title":"Supported Data Types","text":"<ul> <li>Strings - A simple string of characters e.g. <code>\"A String\"</code>.</li> <li>Numbers - Number representation e.g. <code>1</code>.</li> <li>Objects - Nested JSON object e.g. the <code>\"location\"</code> object in the example.</li> <li>Arrays - A list of entries, denoted by <code>[]</code> e.g. <code>\"interests\"</code> in the   example.</li> <li>Booleans - <code>true</code> or <code>false</code> values e.g. <code>\"present\"</code> in the example.</li> <li>Null - Represents no value e.g. <code>\"appendices\"</code> in the example.</li> </ul> <p>Note</p> <p>The JSON in Gaffer is serialised via the Jackson Databind library so please refer to its documentation for more details on supported JSON data types and features.</p>"},{"location":"user-guide/gaffer-basics/what-is-json/#unsupported-data-types","title":"Unsupported Data Types","text":"<ul> <li>Dates - There is no inbuilt date standard for JSON, most people use a   <code>String</code> to represent a date value.</li> <li>Undefined - Undefined is a special state where something does not exist,   this is different to in concept to null.</li> </ul>"},{"location":"user-guide/gaffer-basics/what-is-json/#how-is-json-used-in-gaffer","title":"How is JSON used in Gaffer?","text":"<p>JSON in Gaffer is largely used as an interchange format for data and can be found mainly in the API but also in many configuration files. The following sections give a quick introduction as to where and how JSON is used in Gaffer.</p>"},{"location":"user-guide/gaffer-basics/what-is-json/#json-in-the-gaffer-api","title":"JSON in the Gaffer API","text":"<p>Gaffer provides a number of communication methods so that you can programmatically interact with a graph, as of Version 2.0 this is provided in 3 ways: A HTTP REST API, a Python API and a Native Java interface. Of these 3 both the Python and REST API use JSON as their method of data transportation, although the Python API obfuscates JSON behind the <code>gafferpy</code> client library.</p> <p>Here is an example of the structure of an operations request using JSON via the REST API:</p> <pre><code>{\n\"class\": \"OperationChain\",\n\"operations\": [\n{\n\"class\": \"GetAllElements\"\n},\n{\n\"class\": \"Count\"\n}\n]\n}\n</code></pre>"},{"location":"user-guide/gaffer-basics/what-is-json/#json-in-gaffer-configs","title":"JSON in Gaffer configs","text":"<p>Gaffer also utilises JSON as a method of storing configuration data for the graph, the most notable area of this being the Gaffer schema. A full break down of the Gaffer schema can be found in the graph schema guide.</p> <p>Other notable configuration files are:</p> <ul> <li><code>graphConfig.json</code> - The main graph configuration file.</li> <li><code>operationsDeclarations.json</code> - Used to activate additional operations for use   in the graph.</li> </ul>"},{"location":"user-guide/gaffer-basics/what-is-python/","title":"What is Python and how is it used in Gaffer?","text":"<p>Python is a popular high level programming language that's seen massive popularity specifically in the data science and educational programming areas. Python is an interpreted general purpose language that's dynamically typed and garbage collected. For more info on Python please reference the\u00a0official Python docs.</p>"},{"location":"user-guide/gaffer-basics/what-is-python/#python-in-gaffer","title":"Python in Gaffer","text":"<p>Whilst Gaffer is written primarily in Java a Python interface has been provided so that you can programmatically access Gaffer functionality with Python, this can be accessed via the gafferpy library located in the gafferpy repository. This provides a Python 3.6+ compatible import that will allow you to speak directly to the Gaffer REST API, it supports persistent connections to Gaffer, connection via SSL and the associated Python functionality to interact with available Gaffer operations.</p> <p>Note</p> <p>See the page on using the Python API in gaffer for further information.</p> <p>Inside the gafferpy library you'll find a set of examples that show how you can interact with Gaffer, here is a basic example of using gafferpy:</p> <p>This executes a get request into Gaffer to retrieve the current schema.</p> <pre><code>from gafferpy import gaffer as g\nfrom gafferpy import gaffer_connector\ndef get_schema(gc) -&gt; None:\n\"\"\"Gets and prints the schema from the Gaffer graph instance.\n    Args:\n        gc: The pre-initialised gaffer_connector.\n    \"\"\"\n# Get Schema\nresult = gc.execute_get(g.GetSchema())\n# Print result\nprint(\"Schema:\\n{0}\\n\".format(result))\n# Establish connection\ng_connector = gaffer_connector.GafferConnector(\"http://localhost:8080/rest\")\nget_schema(g_connector)\n</code></pre> <p>In this simple example you can see the use of a <code>gaffer_connector</code>; the purpose of this is to orchestrate the connection to a Gaffer REST endpoint. The main <code>gaffer</code> Python module (usually imported as <code>g</code>) allows access to various functions to run Gaffer operations. This connection works by serialising the Python code into JSON and then transferring this to be deserialised and ran in Gaffer.</p> <p>Tip</p> <p>A link to the gafferpy repository can be found here: gchq/gafferpy</p>"},{"location":"user-guide/query/gaffer-syntax/filtering/","title":"Filtering Data","text":"<p>One of the key parts of querying data is being able to filter out bits you may not want. This page will cover some of the common ways you can filter the returned data from an Operation to get the data you want.</p> <p>In Gaffer the main way you filter data is by applying whats known as a <code>View</code> to a returned set of elements. A <code>View</code>, as the name suggests, allows you to view the data in a different way; this can be either via a filter, aggregation, transformation or just general manipulation of the results.</p> <p>Use cases with a <code>View</code> usually fall into one of the following catagories:</p> <ul> <li> <p>Filtering - General filtering on elements based on predicates. Filtering     can be applied pre-aggregation, post aggregation and post transformation.</p> </li> <li> <p>Aggregation - This is to control how similar elements are aggregated     together. You can provide a subset of the schema <code>groupBy</code> properties and     override existing aggregation functions.</p> </li> <li> <p>Transformation - Transformations can be applied by providing Functions to     transform properties and vertex values. This is a powerful feature, you can     override the existing values or you can transform and save the new value     into a new transient property.</p> </li> <li> <p>Property Removal - The relevant properties you want to be returned can be     controlled. You can use either <code>properties</code> or <code>excludeProperties</code> to define     the list of properties to be included or excluded.</p> </li> </ul>"},{"location":"user-guide/query/gaffer-syntax/filtering/#filtering-in-practice","title":"Filtering in Practice","text":"<p>We will demonstrate general filtering on a query. Take the following graph as a basic example, where we have a <code>Person</code> node with ID <code>John</code> that has a few <code>Created</code> edges with a <code>weight</code> property on them.</p> <pre><code>graph LR\n    A([\"Person\n\n        ID: John\"])\n    --\n    \"Created\n     weight: 0.2\"\n    --&gt;\n    B([\"Software\n\n        ID: 1\"])\n    A\n    --\n    \"Created\n     weight: 0.6\"\n    --&gt;\n    C([\"Software\n\n        ID: 2\"])</code></pre> <p>Lets say the <code>weight</code> property represents how much a <code>Person</code> contributed to creating something and that we wanted to only find the most significant contributions. To do this we can apply a filter to act as a threshold to only get edges with a <code>weight</code> more than a specific value.</p> <p>First we use a simple query to get the node with ID <code>John</code> and any edges associated with it. Then we can apply a filter to include only edges where the <code>weight</code> property is over a certain value.</p> <p>In this scenario it is analogous to asking, \"Get all the <code>Created</code> edges on node <code>John</code> that have a <code>weight</code> greater than 0.4\".</p> JSONPythonJava <pre><code>{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"John\"\n}\n],\n\"view\": {\n\"edges\": {\n\"Created\": {\n\"preAggregationFilterFunctions\": [\n{\n\"selection\": [\n\"weight\"\n],\n\"predicate\": {\n\"class\": \"IsMoreThan\",\n\"orEqualTo\": false,\n\"value\": {\n\"Float\": 0.4\n}\n}\n}\n]\n}\n}\n}\n}\n</code></pre> <pre><code>elements = g_connector.execute_operation(\noperation = gaffer.GetElements(\ninput = [gaffer.EntitySeed(vertex = \"John\")]\nview = gaffer.View(\nedges = [\ngaffer.ElementDefinition(\ngroup = 'Created',\npre_aggregation_filter_functions = [\ngaffer.PredicateContext(\nselection = ['weight'],\npredicate = gaffer.IsMoreThan(\nvalue = {'java.lang.Float': 0.4},\nor_equal_to = False\n)\n)\n]\n)\n]\n)\n)\n)\n</code></pre> <pre><code>// Define the View to use\nfinal View viewWithFilters = new View.Builder()\n.edge(\"Created\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"weight\")\n.execute(new IsMoreThan(0.4))\n.build())\n.build())\n.build();\n// Create the operation to execute\nfinal GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(\"John\"))\n.view(viewWithFilters)\n.build();\ngraph.execute(operation, user);\n</code></pre> <p>To form relevant filters and queries it is usually required that you know the graph schema in use. The schema determines what properties and elements you can reference in your queries and the general structure of the data in the graph. For an introduction and background on Gaffer schemas please see the guide.</p> <p>Tip</p> <p>As you can see filtering is based around predicates which are similar to if else statements in traditional programming. For a full list of available predicates refer to the reference documentation.</p>"},{"location":"user-guide/query/gaffer-syntax/filtering/#filtering-properties","title":"Filtering Properties","text":"<p>If you are only interested in specific properties then it is more efficient to tell Gaffer to only return those properties. This can be easily achieved by applying the <code>properties</code> or <code>excludeProperties</code> field to a <code>View</code>.</p> <p>If we take a similar example to before but instead add a couple of properties to both the <code>Person</code> and <code>Created</code> elements to give a graph like the following:</p> <pre><code>graph LR\n    A([\"Person\n\n        ID: John\n        age: 34\"])\n    --\n    \"Created\n     weight: 0.2\n     hours: 100\"\n    --&gt;\n    B([\"Software\n\n        ID: 1\"])\n    A\n    --\n    \"Created\n     weight: 0.6\n     hours: 800\"\n    --&gt;\n    C([\"Software\n\n        ID: 2\"])</code></pre> <p>Now as before we can run a query on this graph to get the elements relevant to the <code>Person</code> node. However, this time we will filter so that only specific properties are returned.</p> <p>Here we are asking to only include the <code>hours</code> property from the <code>Created</code> edges in the output, and specifically excluding the <code>age</code> property from any returned <code>Person</code> entities.</p> JSONPythonJava <pre><code>{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"John\"\n}\n],\n\"view\": {\n\"edges\": {\n\"Created\": {\n\"properties\" : [ \"hours\" ]\n}\n},\n\"entities\" : {\n\"Person\" : {\n\"excludeProperties\" : [ \"age\" ]\n}\n}\n}\n}\n</code></pre> <pre><code>elements = g_connector.execute_operation(\noperation = gaffer.GetElements(\ninput = [gaffer.EntitySeed(vertex = \"John\")]\nview = gaffer.View(\nedges = [\ngaffer.ElementDefinition(\ngroup = 'Created',\nproperties = [ \"hours\" ]\n)\n]\nentities = [\ngaffer.ElementDefinition(\ngroup = 'Person',\nexclude_properties = [ \"age\" ]\n)\n]\n)\n)\n)\n</code></pre> <pre><code>// Define the View to use\nfinal View viewWithFilters = new View.Builder()\n.edge(\"Created\", new ViewElementDefinition.Builder()\n.properties(\"hours\")\n.build())\n.entities(\"Person\", new ViewElementDefinition.Builder()\n.excludeProperties(\"age\")\n.build())\n.build();\n// Create the operation to execute\nfinal GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(\"John\"))\n.view(viewWithFilters)\n.build();\ngraph.execute(operation, user);\n</code></pre>"},{"location":"user-guide/query/gaffer-syntax/filtering/#transformation","title":"Transformation","text":"<p>It is possible to apply a transformation to the output of a query which then gives you the opportunity to manipulate the results into a more useful output.</p> <p>When a transform is applied the new results are saved into what is known as a transient property. A transient property is just a property that is not persisted; simply created at query time by a transform function.</p> <p>To use a transform you must use a transform function, this is a Java class that extends the <code>java.util.Function</code> class to take some input and give a new output. Commonly you would want to write your own transform function class as it can be quite specific to your graph data and what analytics you want to get out of it. However, the Koryphe module (included by default with Gaffer) provides some default functions you can make use of.</p> <p>As an example of transformation we will use the same graph from the previous section to transform the <code>hours</code> property into minutes and save the returned information into a new <code>minutes</code> transient property.</p> <p>Here you can see we select the inputs for the function as the <code>\"hours\"</code> property we then use the <code>MultiplyBy</code> Koryphe function to transform a property and project the result into a transient property named <code>\"minutes\"</code>.</p> JSONPythonJava <pre><code>{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"John\"\n}\n],\n\"view\": {\n\"edges\": {\n\"Created\": {\n\"transientProperties\" : {\n\"minutes\" : \"java.lang.Integer\"\n},\n\"transformFunctions\" : [\n{\n\"selection\" : [ \"hours\" ],\n\"function\" : {\n\"class\" : \"MultiplyBy\",\n\"by\" : 60\n},\n\"projection\" : [ \"minutes\" ]\n}\n]\n}\n}\n}\n}\n</code></pre> <pre><code>elements = g_connector.execute_operation(\noperation = gaffer.GetElements(\ninput = [gaffer.EntitySeed(vertex = \"John\")]\nview = gaffer.View(\nedges = [\ngaffer.ElementDefinition(\ngroup = 'Created',\ntransient_properties = {'minutes': 'java.lang.Integer'},\ntransform_functions = [\ngaffer.FunctionContext(\nselection = [ \"hours\" ],\nfunction = gaffer.MultiplyBy(by = 60),\nprojection = [ \"minutes\" ]\n)\n]\n)\n]\n)\n)\n)\n</code></pre> <pre><code>final GetElements getEdgesWithMinutes = new GetElements.Builder()\n.input(new EntitySeed(\"John\"))\n.view(new View.Builder()\n.edge(\"Created\", new ViewElementDefinition.Builder()\n.transientProperty(\"minutes\", Integer.class)\n.transformer(new MultiplyBy(60))\n.build())\n.build())\n.build();\ngraph.execute(getEdgesWithMinutes, user);\n</code></pre> <p>The <code>selection</code> in a transform is similar to the way we select properties and identifiers in a filter and as demonstrated you can select (and also project) any property but also any of these unique identifiers:</p> <ul> <li><code>VERTEX</code> - This is the vertex on an Entity.</li> <li><code>SOURCE</code> - This is the source vertex on an Edge.</li> <li><code>DESTINATION</code> - This is the destination vertex on an Edge.</li> <li><code>DIRECTED</code> - This is the directed field on an Edge.</li> <li><code>MATCHED_VERTEX</code> - This is the vertex that was matched in the query, either   the <code>SOURCE</code> or the <code>DESTINATION</code>.</li> <li><code>ADJACENT_MATCHED_VERTEX</code> - This is the adjacent vertex that was matched in   the query, either the <code>SOURCE</code> or the <code>DESTINATION</code>. For example, if your seed   matches the source of the edge this would resolve to the <code>DESTINATION</code> value.</li> </ul>"},{"location":"user-guide/query/gaffer-syntax/filtering/#query-time-aggregation","title":"Query-time Aggregation","text":"<p>Gaffer allows grouping results together based on their properties to form a new result, this is known as aggregation. Aggregation can be applied at both data ingest or query-time, this guide will focus on the latter but an overview of both techniques is available in the gaffer basics guide.</p> <p>Generally to apply aggregation at query-time you must override what is known as the <code>groupBy</code> property to create your own aggregator in the query. To demonstrate this we will use the following example graph.</p> <p>A simple graph representing commits by a <code>Person</code> to a <code>Repository</code> with each <code>Commit</code> being an edge with properties for the lines <code>added</code> and <code>removed</code>.</p> <pre><code>graph LR\n    A([\"Person\n\n        ID: John\"])\n    --\n    \"Commit\n     added: 10\n     removed: 3\"\n    --&gt;\n    B([\"Repository\n\n        ID: 1\"])\n    A\n    --\n    \"Commit\n     added: 3\n     removed: 5\"\n    --&gt;\n    B</code></pre> <p>We will use aggregation to group the properties of the <code>Commit</code> edges to get a total for all the <code>added</code> property.</p> <p>Usually a result would contain all the edges on the <code>Person</code> node but instead we have applied aggregation so the result will contain an element with a <code>Sum</code> of all the <code>added</code> properties.</p> JSONPythonJava <pre><code>{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"John\"\n}\n],\n\"view\": {\n\"edges\": {\n\"Commit\": {\n\"groupBy\" : [ ],\n\"aggregator\" : {\n\"operators\" : [\n{\n\"selection\" : [ \"added\" ],\n\"binaryOperator\" : {\n\"class\" : \"Sum\"\n}\n}\n]\n}\n}\n}\n}\n}\n</code></pre> <pre><code>elements = g_connector.execute_operation(\noperation = gaffer.GetElements(\ninput = [gaffer.EntitySeed(vertex = \"John\")]\nview = gaffer.View(\nedges = [\ngaffer.ElementDefinition(\ngroup = 'Commit',\ngroup_by = [],\naggregate_functions = [\ngaffer.BinaryOperatorContext(\nselection=[ \"added\" ],\nbinary_operator = gaffer.Sum()\n)\n]\n)\n]\n)\n)\n)\n</code></pre> <pre><code>final GetElements getEdgesAggregated = new GetElements.Builder()\n.input(new EntitySeed(\"John\"))\n.view(new View.Builder()\n.edge(\"Commit\", new ViewElementDefinition.Builder()\n.groupBy()\n.aggregator(new ElementAggregator.Builder()\n.select(\"added\")\n.execute(new Sum())\n.build()))\n.build())\n.build();\ngraph.execute(getEdgesAggregated, user);\n</code></pre> <p>Tip</p> <p>As with some of the other examples we again use a class from the Koryphe module to help with the aggregation, please see the reference material for a full list and examples.</p>"},{"location":"user-guide/query/gaffer-syntax/operations/","title":"Operations","text":"<p>Querying in Gaffer is all mainly based around whats called \"Operations\". You can think of these as lots of small functions/commands that can be either standalone or be chained together into an Operation Chain to form more complex query pipelines.</p> <p>If you have ever used a shell language such as bash Gaffer queries work on a similar principal where you have lots of smaller self contained commands (aka Operations) that can work together to form more complicated use cases.</p> <p>The general structure of an Operation when using JSON via the rest API looks like the following:</p> <pre><code>{\n\"class\": \"Operation\",\n\"input\": \"Input\"\n}\n</code></pre> <p>Using Operations is fairly simple, we first define the Operation we wish to use with the <code>class</code> key which needs to be an available Operation in Gaffer. Then if applicable, we give the Operation some sort of input using the <code>input</code> key. Not all Operations require an input but more often that not some user input is required, the reference guide has a full list of all Operations and example usage.</p> <p>Tip</p> <p>To get a list of all available Operations for a graph you can use the endpoint <code>/graph/operations</code></p>"},{"location":"user-guide/query/gaffer-syntax/operations/#operation-chains","title":"Operation Chains","text":"<p>The Operations in Gaffer can be chained together to form complex graph queries. This page will give some general example usage of how you can chain Operations together.</p> <p>As an example of a simple operation, say we want to get all nodes and edges based on their ID. To do this we can use the <code>GetElements</code> operation and set the <code>EntitySeed</code> to the entity (e.g. node) or edge where we want to start the search.</p> <p>Assuming the entity ID we wish to search from is <code>\"v1\"</code>.</p> JSONPythonJava <pre><code>{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"v1\"\n}\n]\n}\n</code></pre> <pre><code>elements = g_connector.execute_operation(\noperation = gaffer.GetElements(input = [gaffer.EntitySeed(vertex = \"v1\")])\n)\n</code></pre> <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(\"v1\"))\n.build();\ngraph.execute(operation, user);\n</code></pre> <p>This can then be expanded into a chain by using the output from the <code>GetElements</code> operation as the input to the <code>Count</code> operation to give a total of how many entities the <code>GetElements</code> returned.</p> <p>As you can see we have used the <code>OperationChain</code> to run two operations in a chain with the output of one being the input of the next.</p> JSONPythonJava <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [\n{\n\"class\": \"GetElements\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"v1\"\n}\n]\n},\n{\n\"class\" : \"Count\"\n}\n]\n}\n</code></pre> <pre><code>count = g_connector.execute_operation_chain(\noperation_chain = gaffer.OperationChain(\noperations=[\ngaffer.GetElements(input = [gaffer.EntitySeed(vertex = \"v1\")]),\ngaffer.Count()\n]\n)\n)\n</code></pre> <pre><code>OperationChain&lt;Long&gt; countElements = new OperationChain.Builder()\n.first(new GetElements.Builder().input(new EntitySeed(\"v1\")).build())\n.then(new Count&lt;&gt;())\n.build();\nLong result = graph.execute(countElements, user);\n</code></pre> <p>To chain operations it's important to take note of what each operations input and outputs are, say if you want to chain two together like the following:</p> <p>The output of <code>Operation1</code> needs to be compatible with the input of <code>Operation2</code>.</p> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [\n{\n\"class\": \"Operation1\"\n},\n{\n\"class\" : \"Operation2\"\n}\n]\n}\n</code></pre> <p>Tip</p> <p>The reference guide and Javadoc can be valuable to understand what each <code>Operation</code> outputs and accepts.</p>"},{"location":"user-guide/query/gaffer-syntax/import-export/csv/","title":"CSV Data Import and Export","text":"<p>Gaffer supports both importing from and exporting to csv. This page outlines some of the common methods you can use to do this via the API.</p>"},{"location":"user-guide/query/gaffer-syntax/import-export/csv/#using-local-files","title":"Using Local Files","text":"<p>If you configure your Gaffer graph to support the <code>ImportFromLocalFile</code> and <code>ExportToLocalFile</code> operations, then it can do this from/to a local file. To enable these operations you will need to use a JSON configuration file to specify the operations and their handlers like so:</p> <pre><code>{\n\"operations\": [\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ImportFromLocalFile\",\n\"handler\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ImportFromLocalFileHandler\"\n}\n},\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ExportToLocalFile\",\n\"handler\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ExportToLocalFileHandler\"\n}\n}\n]\n}\n</code></pre> <p>Usually this file is called <code>operationsDeclarations.json</code> but the name can be anything, what is important is that the file is specified in your store properties file by using the following property:</p> <pre><code>gaffer.store.operation.declarations=/gaffer/store/operationsDeclarations.json\n</code></pre>"},{"location":"user-guide/query/gaffer-syntax/import-export/csv/#how-to-import-and-export","title":"How to Import and Export","text":"<p>You can use the rest API to add the graph elements. In production this method would not be recommended for large volumes of data. However, it is fine for smaller data sets and generally can be done in a few stages outlined in the following diagram.</p> <pre><code>flowchart LR\n    A(Raw Data) --&gt; B(GenerateElements)\n    B --&gt; C(AddElements)</code></pre> <p>The operation chain below essentially mirrors the stages in the previous diagram. The first stage is taking the raw input data and converting it into Gaffer elements via an element generator class. Gaffer includes a few built in generators but you can use a custom class or pre-process the data before passing to Gaffer so that you're able to use a default generator. Once the data has been converted to elements it needs to be added into the graph. To load elements there is a standard <code>AddElements</code> operation which takes raw elements JSON as input and adds them into the graph.</p> <p>Tip</p> <p>See the page covering Operations for an introduction on how to use them via the API.</p> <pre><code>{\n\"class\": \"OperationChain\",\n\"operations\": [\n{\n\"class\": \"ImportFromLocalFile\", //(1)!\n\"filePath\": \"mydata.csv\"\n},\n{\n\"class\": \"GenerateElements\", //(2)!\n\"elementGenerator\": {\n\"class\": \"Neo4jCsvElementGenerator\"\n}\n},\n{\n\"class\": \"AddElements\" //(3)!\n}\n]\n}\n</code></pre> <ol> <li>The <code>ImportFromLocalFile</code> operation reads each line from the file    <code>mydata.csv</code> and will stream each string into the next parts of the chain.</li> <li>The <code>GenerateElements</code> operation will transform each line of the file into a    Gaffer Element. You will need to provide an element generator that is    suitable for the file you have provided. The two <code>CsvElementGenerators</code>    provided in core Gaffer are <code>Neo4jElementGenerator</code> and    <code>NeptuneCsvElementGenerator</code>.</li> <li>Finally, the stream of Gaffer Elements are added with an <code>AddElements</code>    operation.</li> </ol> <p>Exporting to csv is done with a similar OperationChain.</p> <pre><code>{\n\"class\": \"OperationChain\",\n\"operations\": [\n{\n\"class\": \"GetAllElements\" //(1)!\n},\n{\n\"class\": \"ToCsv\", //(2)!\n\"csvGenerator\": \"Neo4jCsvGenerator\"\n},\n{\n\"class\": \"ExportToLocalFile\", //(3)!\n\"filePath\": \"output.csv\"\n}\n]\n}\n</code></pre> <ol> <li>Firstly, you need to get the Elements which you want to export, in this    example we simply <code>GetAllElements</code>.</li> <li>The <code>ToCsv</code> operation is then used to turn each Element into a csv formatted    string. You must supply a <code>CsvGenerator</code> to do this. You can build a custom    <code>CsvGenerator</code>, or use a supplied one. The two    <code>CsvGenerators</code> provided in core Gaffer are    <code>Neo4jCsvGenerator</code> and    <code>NeptuneCsvGenerator</code>.</li> <li>Then the <code>ExportToLocalFile</code> operation is used to save this string output    into a local file.</li> </ol>"},{"location":"user-guide/query/gaffer-syntax/import-export/csv/#formats","title":"Formats","text":""},{"location":"user-guide/query/gaffer-syntax/import-export/csv/#custom-formats","title":"Custom formats","text":"<p>Currently, custom formats for import are not supported. Instead you should use one of the two OpenCypher formats. However, for export you can customise the <code>CsvGenerator</code> class to create a custom export format in a <code>ToCsv</code> operation. For example, the following operation.</p> <pre><code>{\n\"class\": \"ToCsv\",\n\"csvGenerator\": {\n\"class\": \"CsvGenerator\",\n\"fields\": [\"prop1\", \"SOURCE\", \"DESTINATION\", \"prop2\", \"GROUP\"],\n\"constants\": [\"constant1\", \"constant2\"]\n}\n}\n</code></pre> <p>Would produce csv rows that look like:</p> TableCSV prop1Value sourceValue destinationValue prop2 groupValue constant1 constant2 <pre><code>prop1Value,sourceValue,destinationValue,prop2,groupValue,constant1,constant2\n</code></pre>"},{"location":"user-guide/query/gaffer-syntax/import-export/csv/#opencypher-formats","title":"OpenCypher Formats","text":"<p>Core Gaffer has some generators provided that can import from and export to OpenCypher CSV. These will work with other graph databases like Neo4j and Neptune.</p> <p>Note</p> <p>Please note that when using these, Gaffer might change your property name headers. All instances of <code>-</code> are replaced with <code>_</code>, and invalid characters are stripped as outlined in PropertiesUtil.</p> <p>As shown later in the examples, OpenCypher formats let you dictate property types in the header, like <code>propertyName:type</code>. Below is a table that shows which Gaffer transform function is used to deserialise each OpenCypher data type during import.</p> Gaffer Transform Function OpenCypher Data Types <code>ToString</code> <code>String</code> <code>Char</code> <code>Duration</code> <code>Point</code> <code>Date</code> <code>LocalDate</code> <code>LocalDateTime</code> <code>ToBoolean</code> <code>Bool</code> <code>Boolean</code> <code>ToInteger</code> <code>Int</code> <code>Short</code> <code>Byte</code> <code>ToLong</code> <code>Long</code> <code>ToFloat</code> <code>Float</code> <code>ToDouble</code> <code>Double</code> <code>ParseTime</code> <code>DateTime</code>"},{"location":"user-guide/query/gaffer-syntax/import-export/csv/#neo4j-generators","title":"Neo4j Generators","text":"<p>You can import CSV from Neo4j using the <code>Neo4jCsvElementGenerator</code> and export using the <code>Neo4jCsvGenerator</code>. The format used is defined here.</p> TableCSV _id name age lang _labels _start _end _type weight v1 marko 29 Person v2 lop java Software e1 v1 v2 Created 0.4 <pre><code>_id,name:String,age:Int,lang:String,_labels,_start,_end,_type,weight:Float\nv1,marko,29,,Person,,,,\nv2,lop,,java,Software,,,,\ne1,,,,,v1,v2,Created,0.4\n</code></pre>"},{"location":"user-guide/query/gaffer-syntax/import-export/csv/#neptune-generators","title":"Neptune Generators","text":"<p>You can import CSV from Neptune using the <code>NeptuneCsvElementGenerator</code> and export using the <code>NeptuneCsvGenerator</code>. The format used is defined here.</p> TableCSV :ID name age lang :LABEL :START_ID :END_ID :TYPE weight v1 marko 29 Person v2 lop java Software e1 v1 v2 Created 0.4 <pre><code>:ID,name:String,age:Int,lang:String,:LABEL,:START_ID,:END_ID,:TYPE,weight:Double\nv1,marko,29,,person,,,,\nv2,lop,,java,software,,,,\ne1,,,,,v1,v2,created,0.4\n</code></pre>"},{"location":"user-guide/query/gremlin/gremlin/","title":"Gremlin Queries in Gaffer","text":"<p>Warning</p> <p>Gremlin support is currently limited and experimental in Gaffer. This page is a work in progress to capture the current capabilities.</p>"}]}